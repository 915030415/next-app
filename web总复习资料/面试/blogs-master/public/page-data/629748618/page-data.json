{"componentChunkName":"component---src-templates-blog-post-js","path":"/629748618/","result":{"data":{"site":{"siteMetadata":{"title":"ssh的博客","author":"ssh"}},"markdownRemark":{"id":"a44ff678-33b7-5a41-8058-86a3a27b156c","html":"<h2 id=\"前言\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>在 Vue 的官网中的过渡动画章节中，可以看到一个很酷炫的<a href=\"https://cn.vuejs.org/v2/guide/transitions.html#%E5%88%97%E8%A1%A8%E7%9A%84%E6%8E%92%E5%BA%8F%E8%BF%87%E6%B8%A1\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">动画效果</a></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/6/3/1727890a0a2d9845?w=706&#x26;h=682&#x26;f=gif&#x26;s=1928105\"></p>\n<p>乍一看，让我们手写出这个逻辑应该是非常复杂的，先看看本文最后要实现的效果吧，和这个案例是非常类似的。</p>\n<h2 id=\"预览\"><a href=\"#%E9%A2%84%E8%A7%88\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>预览</h2>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/6/3/17278961a474678c?w=500&#x26;h=679&#x26;f=gif&#x26;s=4061003\"></p>\n<p>也可以直接进预览网址里看：</p>\n<p><a href=\"http://sl1673495.gitee.io/flip-animation\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://sl1673495.gitee.io/flip-animation</a></p>\n<p>图片素材依然引用自知乎问题<a href=\"https://www.zhihu.com/question/28997505\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">《有个漂亮女朋友是种怎样的体验？》</a>，侵删。</p>\n<h2 id=\"分析需求\"><a href=\"#%E5%88%86%E6%9E%90%E9%9C%80%E6%B1%82\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>分析需求</h2>\n<p>拿到了这个需求，第一直觉是怎么做？假设第一行第一个图片移动到了第二行第三列，是不是要计算出第一行的高度，再计算出第二行前两个元素的宽度，然后从初始的坐标点通过 CSS 或者一些动画 API 移动过去？这样做是可以，但是在图片不定高不定宽，并且一次要移动很多图片情况下，这个计算方法就非常复杂了。并且这种情况下，图片的坐标都需要我们手动管理，非常不利于维护和扩展。</p>\n<p>换种思路，能不能直接很自然的把 DOM 元素通过原生 API 添加到 DOM 树中，然后让浏览器帮我们好这个终点值，最后我们再动画位移过去？</p>\n<p>在文档里我们发现一个名词：<code class=\"language-text\">FLIP</code>，这给了我们一个线索，是不是用这个玩意就可以写出这个动画呢？</p>\n<p>答案是肯定的，顺着这个线索找到 <code class=\"language-text\">Aerotwist</code> 社区里的一篇文章：<a href=\"https://aerotwist.com/blog/flip-your-animations/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">flip-your-animations</a>，以这篇文章为切入点，一步步来实现一个类似的效果。</p>\n<h2 id=\"flip\"><a href=\"#flip\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>FLIP</h2>\n<p><code class=\"language-text\">FLIP</code> 究竟是什么东西呢？先看下它的定义：</p>\n<h3 id=\"first\"><a href=\"#first\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>First</h3>\n<p>即将做动画的元素的初始状态（比如位置、透明度等等）。</p>\n<h3 id=\"last\"><a href=\"#last\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Last</h3>\n<p>即将做动画的元素的最终状态。</p>\n<h3 id=\"invert\"><a href=\"#invert\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Invert</h3>\n<p>这一步比较关键，假设我们图片的初始位置是 <code class=\"language-text\">左: 0, 上：0</code>，元素动画后的最终位置是 <code class=\"language-text\">左：100, 上100</code>，那么很明显这个元素是向右下角运动了 <code class=\"language-text\">100px</code>。</p>\n<p><strong>但是</strong>，此时我们不按照常规思维去先计算它的最终位置，然后再命令元素从 <code class=\"language-text\">0, 0</code> 运动到 <code class=\"language-text\">100, 100</code>，而是<strong>先让元素自己移动过去</strong>（比如在 Vue 中用数据来驱动，在数组前面追加几个图片，之前的图片就自己移动到下面去了）。</p>\n<p>这里有一个关键的知识点要注意了，也是我在之前的文章<a href=\"https://juejin.im/post/5ec73026f265da76da29cb25\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">《深入解析你不知道的 EventLoop 和浏览器渲染、帧动画、空闲回调》</a>中提到过的：</p>\n<p>DOM 元素属性的改变（比如 <code class=\"language-text\">left</code>、<code class=\"language-text\">right</code>、 <code class=\"language-text\">transform</code> 等等），会被集中起来延迟到浏览器的下一帧统一渲染，所以我们可以得到一个这样的中间时间点：<strong>DOM 状态（位置信息）改变了，而浏览器还没渲染</strong>。</p>\n<p>有了这个前置条件，我们就可以保证先让 Vue 去操作 DOM 变更，此时浏览器还未渲染，我们已经能得到 DOM 状态变更后的位置了。</p>\n<p>说的具体点，假设我们的图片是一行两个排列，图片数组初始化的状态是 <code class=\"language-text\">[img1, img2</code>，此时我们往数组头部追加两个元素 <code class=\"language-text\">[img3, img4, img1, img2]</code>，那么 <code class=\"language-text\">img1</code> 和 <code class=\"language-text\">img2</code> 就自然而然的被挤到下一行去了。</p>\n<p>假设 <code class=\"language-text\">img1</code> 的初始位置是 <code class=\"language-text\">0, 0</code>，被数据驱动导致的 DOM 改变挤下去后的位置是 <code class=\"language-text\">100, 100</code>，那么此时浏览器还没有渲染，我们可以在这个时间点把 <code class=\"language-text\">img1.style.transform = translate(-100px, -100px)</code>，让它 先 <strong>Invert</strong> 倒置回位移前的位置。</p>\n<h3 id=\"play\"><a href=\"#play\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Play</h3>\n<p>倒置了以后，想要让它做动画就很简单了，再让它回到 <code class=\"language-text\">0, 0</code> 的位置即可，本文会采用最新的 <code class=\"language-text\">Web Animation API</code> 来实现最后的 <code class=\"language-text\">Play</code>。</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Animation\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MDN 文档：Web Animation</a></p>\n<h2 id=\"实现\"><a href=\"#%E5%AE%9E%E7%8E%B0\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>实现</h2>\n<p>首先图片渲染很简单，就让图片通过简单的排成 4 列即可：</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\">.wrap {\n  display: flex;\n  flex-wrap: wrap;\n}\n\n.img {\n  width: 25%;\n}\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">v-else</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>wrap<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>img-wrap<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">v-for</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>src in imgs<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">:key</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>src<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>imgs<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>img<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">:src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>src<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>那么关键点就在于怎么往这个 <code class=\"language-text\">imgs</code> 数组里追加元素后，做一个流畅的路径动画。</p>\n<p>我们来实现追加图片的方法 <code class=\"language-text\">add</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> newData <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSister</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">await</span> <span class=\"token function\">preload</span><span class=\"token punctuation\">(</span>newData<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>首先随机的取出几张图片作为待放入数组的元素，利用 <code class=\"language-text\">new Image</code> 预加载这些图片，防止渲染一堆空白图片到屏幕上。</p>\n<p>然后定义一个计算一组 DOM 元素位置的函数 <code class=\"language-text\">getRects</code>，利用 <code class=\"language-text\">getBoundingClientRect</code> 可以获得最新的位置信息，这个方法在接下来获取图片元素旧位置和新位置时都要使用。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">getRects</span><span class=\"token punctuation\">(</span>doms<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> doms<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>dom<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> rect <span class=\"token operator\">=</span> dom<span class=\"token punctuation\">.</span><span class=\"token function\">getBoundingClientRect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> left<span class=\"token punctuation\">,</span> top <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> rect\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> left<span class=\"token punctuation\">,</span> top <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 当前已有的图片</span>\n<span class=\"token keyword\">const</span> prevImgs <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$refs<span class=\"token punctuation\">.</span>imgs<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> prevPositions <span class=\"token operator\">=</span> <span class=\"token function\">getRects</span><span class=\"token punctuation\">(</span>prevImgs<span class=\"token punctuation\">)</span></code></pre></div>\n<p>记录完图片的旧位置后，就可以向数组里追加新的图片了：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>imgs <span class=\"token operator\">=</span> newData<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>imgs<span class=\"token punctuation\">)</span></code></pre></div>\n<p>随后就是比较关键的点了，我们知道 Vue 是异步渲染的，也就是改变了这个 <code class=\"language-text\">imgs</code> 数组后不会立刻发生 DOM 的变动，此时我们要用到 <code class=\"language-text\">nextTick</code> 这个 API，这个 API 把你传入的回调函数放进了 <code class=\"language-text\">microTask</code> 队列，正如上文提到的事件循环的文章里所说，<code class=\"language-text\">microTask</code>队列的执行一定发生在浏览器重新渲染前。</p>\n<p>由于先调用了 <code class=\"language-text\">this.imgs = newData.concat(this.imgs)</code> 这段代码，触发了 Vue 的响应式依赖更新，此时 Vue 内部会把本次 DOM 更新的渲染函数先放到 <code class=\"language-text\">microTask</code>队列中，此时的队列是<code class=\"language-text\">[changeDOM]</code>。</p>\n<p>调用了 <code class=\"language-text\">nextTick(callback)</code> 后，这个<code class=\"language-text\">callback</code>函数也会被追加到队列中，此时的队列是 <code class=\"language-text\">[changeDOM, callback]</code>。</p>\n<p>这下聪明的你肯定就明白了，为什么 <code class=\"language-text\">nextTick</code>的回调函数里一定能获取到最新的 DOM 状态。</p>\n<p>由于我们之前保存了图片元素节点的数组 <code class=\"language-text\">prevImgs</code>，所以在 <code class=\"language-text\">nextTick</code> 里调用同样的 <code class=\"language-text\">getRect</code> 方法获取到的就是旧图片的最新位置了。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 最新 DOM 状态</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$nextTick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 再调用同样的方法获取最新的元素位置</span>\n    <span class=\"token keyword\">const</span> currentPositions <span class=\"token operator\">=</span> <span class=\"token function\">getRects</span><span class=\"token punctuation\">(</span>prevImgs<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>此时我们已经拥有了 <code class=\"language-text\">Invert</code> 步骤的关键信息，新位置和旧位置，那么接下来就很简单了，把图片数组循环做一个倒置后 <code class=\"language-text\">Play</code>的动画即可。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">prevImgs<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>imgRef<span class=\"token punctuation\">,</span> imgIndex<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> currentPosition <span class=\"token operator\">=</span> currentPositions<span class=\"token punctuation\">[</span>imgIndex<span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">const</span> prevPosition <span class=\"token operator\">=</span> prevPositions<span class=\"token punctuation\">[</span>imgIndex<span class=\"token punctuation\">]</span>\n\n  <span class=\"token comment\">// 倒置后的位置，虽然图片移动到最新位置了，但你先给我回去，等着我来让你做动画。</span>\n  <span class=\"token keyword\">const</span> invert <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    left<span class=\"token punctuation\">:</span> prevPosition<span class=\"token punctuation\">.</span>left <span class=\"token operator\">-</span> currentPosition<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span>\n    top<span class=\"token punctuation\">:</span> prevPosition<span class=\"token punctuation\">.</span>top <span class=\"token operator\">-</span> currentPosition<span class=\"token punctuation\">.</span>top<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> keyframes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token comment\">// 初始位置是倒置后的位置</span>\n    <span class=\"token punctuation\">{</span>\n      transform<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`translate(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>invert<span class=\"token punctuation\">.</span>left<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">px, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>invert<span class=\"token punctuation\">.</span>top<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">px)`</span></span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 图片更新后本来应该在的位置</span>\n    <span class=\"token punctuation\">{</span> transform<span class=\"token punctuation\">:</span> <span class=\"token string\">\"translate(0)\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span>\n\n  <span class=\"token keyword\">const</span> options <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    duration<span class=\"token punctuation\">:</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span>\n    easing<span class=\"token punctuation\">:</span> <span class=\"token string\">\"cubic-bezier(0,0,0.32,1)\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 开始运动！</span>\n  <span class=\"token keyword\">const</span> animation <span class=\"token operator\">=</span> imgRef<span class=\"token punctuation\">.</span><span class=\"token function\">animate</span><span class=\"token punctuation\">(</span>keyframes<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>此时一个非常流畅的路径动画效果就完成了。</p>\n<p>完整实现如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> newData <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSister</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">await</span> <span class=\"token function\">preload</span><span class=\"token punctuation\">(</span>newData<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> prevImgs <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$refs<span class=\"token punctuation\">.</span>imgs<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> prevPositions <span class=\"token operator\">=</span> <span class=\"token function\">getRects</span><span class=\"token punctuation\">(</span>prevImgs<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>imgs <span class=\"token operator\">=</span> newData<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>imgs<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$nextTick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> currentPositions <span class=\"token operator\">=</span> <span class=\"token function\">getRects</span><span class=\"token punctuation\">(</span>prevImgs<span class=\"token punctuation\">)</span>\n\n    prevImgs<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>imgRef<span class=\"token punctuation\">,</span> imgIndex<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> currentPosition <span class=\"token operator\">=</span> currentPositions<span class=\"token punctuation\">[</span>imgIndex<span class=\"token punctuation\">]</span>\n      <span class=\"token keyword\">const</span> prevPosition <span class=\"token operator\">=</span> prevPositions<span class=\"token punctuation\">[</span>imgIndex<span class=\"token punctuation\">]</span>\n\n      <span class=\"token keyword\">const</span> invert <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        left<span class=\"token punctuation\">:</span> prevPosition<span class=\"token punctuation\">.</span>left <span class=\"token operator\">-</span> currentPosition<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span>\n        top<span class=\"token punctuation\">:</span> prevPosition<span class=\"token punctuation\">.</span>top <span class=\"token operator\">-</span> currentPosition<span class=\"token punctuation\">.</span>top<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">const</span> keyframes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n          transform<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`translate(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>invert<span class=\"token punctuation\">.</span>left<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">px, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>invert<span class=\"token punctuation\">.</span>top<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">px)`</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span> transform<span class=\"token punctuation\">:</span> <span class=\"token string\">\"translate(0)\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">]</span>\n\n      <span class=\"token keyword\">const</span> options <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        duration<span class=\"token punctuation\">:</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span>\n        easing<span class=\"token punctuation\">:</span> <span class=\"token string\">\"cubic-bezier(0,0,0.32,1)\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">const</span> animation <span class=\"token operator\">=</span> imgRef<span class=\"token punctuation\">.</span><span class=\"token function\">animate</span><span class=\"token punctuation\">(</span>keyframes<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<h2 id=\"乱序\"><a href=\"#%E4%B9%B1%E5%BA%8F\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>乱序</h2>\n<p>现在我们想要实现官网 demo 中的 <code class=\"language-text\">shuffle</code> 效果，有了追加图片逻辑的铺垫，是不是已经觉得思路如泉涌了？没错，即使图片被打乱的再厉害，只要我们有「图片开始时的位置」和「图片结束时的位置」，那就可以轻松做到路径动画。</p>\n<p>现在我们需要做的是把动画的逻辑抽离出来，我们分析一下整条链路：</p>\n<p><code class=\"language-text\">保存旧位置 -&gt; 改变数据驱动视图更新 -&gt; 获得新位置 -&gt; 利用 FLIP 做动画</code></p>\n<p>其实外部只需要传入一个 <code class=\"language-text\">update</code> 方法告诉我们如何去更新图片数组，就可以把这个逻辑完全抽象到一个函数里去。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">scheduleAnimation</span><span class=\"token punctuation\">(</span>update<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 获取旧图片的位置</span>\n  <span class=\"token keyword\">const</span> prevImgs <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$refs<span class=\"token punctuation\">.</span>imgs<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> prevSrcRectMap <span class=\"token operator\">=</span> <span class=\"token function\">createSrcRectMap</span><span class=\"token punctuation\">(</span>prevImgs<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// 更新数据</span>\n  <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// DOM更新后</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$nextTick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> currentSrcRectMap <span class=\"token operator\">=</span> <span class=\"token function\">createSrcRectMap</span><span class=\"token punctuation\">(</span>prevImgs<span class=\"token punctuation\">)</span>\n    Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>prevSrcRectMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> currentRect <span class=\"token operator\">=</span> currentSrcRectMap<span class=\"token punctuation\">[</span>src<span class=\"token punctuation\">]</span>\n      <span class=\"token keyword\">const</span> prevRect <span class=\"token operator\">=</span> prevSrcRectMap<span class=\"token punctuation\">[</span>src<span class=\"token punctuation\">]</span>\n\n      <span class=\"token keyword\">const</span> invert <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        left<span class=\"token punctuation\">:</span> prevRect<span class=\"token punctuation\">.</span>left <span class=\"token operator\">-</span> currentRect<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span>\n        top<span class=\"token punctuation\">:</span> prevRect<span class=\"token punctuation\">.</span>top <span class=\"token operator\">-</span> currentRect<span class=\"token punctuation\">.</span>top<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">const</span> keyframes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n          transform<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`translate(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>invert<span class=\"token punctuation\">.</span>left<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">px, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>invert<span class=\"token punctuation\">.</span>top<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">px)`</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span> transform<span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">]</span>\n      <span class=\"token keyword\">const</span> options <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        duration<span class=\"token punctuation\">:</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span>\n        easing<span class=\"token punctuation\">:</span> <span class=\"token string\">\"cubic-bezier(0,0,0.32,1)\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">const</span> animation <span class=\"token operator\">=</span> currentRect<span class=\"token punctuation\">.</span>img<span class=\"token punctuation\">.</span><span class=\"token function\">animate</span><span class=\"token punctuation\">(</span>keyframes<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>那么追加图片和乱序的函数就变得非常简单了：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 追加图片</span>\n<span class=\"token keyword\">async</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> newData <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSister</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">await</span> <span class=\"token function\">preload</span><span class=\"token punctuation\">(</span>newData<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">scheduleAnimation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>imgs <span class=\"token operator\">=</span> newData<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>imgs<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token comment\">// 乱序图片</span>\n<span class=\"token function\">shuffle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">scheduleAnimation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>imgs <span class=\"token operator\">=</span> <span class=\"token function\">shuffle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>imgs<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"源码地址\"><a href=\"#%E6%BA%90%E7%A0%81%E5%9C%B0%E5%9D%80\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>源码地址</h2>\n<p><a href=\"https://github.com/sl1673495/flip-animation\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/sl1673495/flip-animation</a></p>\n<h2 id=\"总结\"><a href=\"#%E6%80%BB%E7%BB%93\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>总结</h2>\n<h3 id=\"flip-1\"><a href=\"#flip-1\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>FLIP</h3>\n<p>FLIP 不光可以做位置变化的动画，对于透明度、宽高等等也一样可以很轻松的实现。</p>\n<p>比如电商平台中经常会出现一个动画，点击一张商品图片后，商品从它本来的位置慢慢的放大成了一张完整的页面。</p>\n<p><code class=\"language-text\">FLIP</code>的思路掌握后，只要你知道元素动画前的状态和元素动画后的状态，你都可以轻松的通过「倒置状态」后，让它们做一个流畅的动画后到达目的地，并且此时的 DOM 状态是很干净的，而不是通过大量计算的方式强迫它从 <code class=\"language-text\">0, 0</code> 位移到 <code class=\"language-text\">100, 100</code>，并且让 DOM 样式上留下 <code class=\"language-text\">transform: translate(100px, 100px)</code> 类似的字样。</p>\n<h3 id=\"web-animation\"><a href=\"#web-animation\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Web Animation</h3>\n<p>利用 <code class=\"language-text\">Web Animation API</code> 可以让我们用 JavaScript 更加直观的描述我们需要元素去做的动画，想象一下这个需求如果用 CSS 来做，我们大概会这样去完成这个需求：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> currentImgStyle <span class=\"token operator\">=</span> currentRect<span class=\"token punctuation\">.</span>img<span class=\"token punctuation\">.</span>style\ncurrentImgStyle<span class=\"token punctuation\">.</span>transform <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token string\">`translate(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>invert<span class=\"token punctuation\">.</span>left<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">px, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>invert<span class=\"token punctuation\">.</span>top<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">px)`</span></span>\ncurrentImgStyle<span class=\"token punctuation\">.</span>transitionDuration <span class=\"token operator\">=</span> <span class=\"token string\">\"0s\"</span>\n\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_reflow <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>offsetHeight\n\ncurrentRect<span class=\"token punctuation\">.</span>img<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"move\"</span><span class=\"token punctuation\">)</span>\n\ncurrentImgStyle<span class=\"token punctuation\">.</span>transform <span class=\"token operator\">=</span> currentRect<span class=\"token punctuation\">.</span>img<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>transitionDuration <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n\ncurrentRect<span class=\"token punctuation\">.</span>img<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"transitionend\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  currentRect<span class=\"token punctuation\">.</span>img<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"move\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>这也是 Vue 内部 <code class=\"language-text\">transition-group</code> 组件实现 <code class=\"language-text\">FLIP</code> 动画的大致思路，Vue 应该是为了兼容性和代码体积等一些方面的权衡，还是选择用比较原生的方式去实现 FLIP 动画，这段代码让我觉得不舒服的点在于：</p>\n<ol>\n<li>需要通过 <code class=\"language-text\">class</code> 的增加和删除来和 CSS 来进行交互，整体流程不太符合直觉。</li>\n<li>需要监听动画完成事件，并且做一些清理操作，容易遗漏。</li>\n<li>需要利用 <code class=\"language-text\">document.body.offsetHeight</code> 这样的方式触发 <code class=\"language-text\">强制同步布局</code>，比较 hack 的知识点。</li>\n<li>需要利用 <code class=\"language-text\">this._reflow = document.body.offsetHeight</code> 这样的方式向元素实例上增加一个没有意义的属性，防止被 Rollup 等打包工具 <code class=\"language-text\">tree-shaking</code> 误删。 比较 hack 的知识点 +1。</li>\n</ol>\n<p>而利用 <code class=\"language-text\">Web Animation API</code> 的代码则变得非常符合直觉和易于维护：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> keyframes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    transform<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`translate(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>invert<span class=\"token punctuation\">.</span>left<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">px, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>invert<span class=\"token punctuation\">.</span>top<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">px)`</span></span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> transform<span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">const</span> options <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  duration<span class=\"token punctuation\">:</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span>\n  easing<span class=\"token punctuation\">:</span> <span class=\"token string\">\"cubic-bezier(0,0,0.32,1)\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> animation <span class=\"token operator\">=</span> currentRect<span class=\"token punctuation\">.</span>img<span class=\"token punctuation\">.</span><span class=\"token function\">animate</span><span class=\"token punctuation\">(</span>keyframes<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span></code></pre></div>\n<p>关于兼容性问题，W3C 已经提供了 <a href=\"https://github.com/web-animations/web-animations-js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">Web Animation API Polyfill</code></a>，可以放心大胆的使用。</p>\n<p>期待在不久的未来，我们可以抛弃旧的动画模式，迎接这种更新更好的 API。</p>\n<p>希望这篇文章能让对动画发愁的你有一些收获，谢谢！</p>\n<h2 id=\"️-感谢大家\"><a href=\"#%EF%B8%8F-%E6%84%9F%E8%B0%A2%E5%A4%A7%E5%AE%B6\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>❤️ 感谢大家</h2>\n<p>1.如果本文对你有帮助，就点个赞支持下吧，你的「赞」是我创作的动力。</p>\n<p>2.关注公众号「前端从进阶到入院」即可加我好友，我拉你进「前端进阶交流群」，大家一起共同交流和进步。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/4/5/17149cbcaa96ff26?w=910&#x26;h=436&#x26;f=jpeg&#x26;s=78195\"></p>","timeToRead":11,"frontmatter":{"title":"前端动画必知必会：React 和 Vue 都在用的 FLIP 思想实战","date":"June 03, 2020","spoiler":""},"fields":{"slug":"/629748618/","langKey":"en"}}},"pageContext":{"slug":"/629748618/","previous":{"fields":{"slug":"/628894787/","langKey":"en","directoryName":"628894787"},"frontmatter":{"title":"前端瀑布流布局如何应用动态规划和贪心算法"}},"next":{"fields":{"slug":"/638504573/","langKey":"en","directoryName":"638504573"},"frontmatter":{"title":"前端电商 sku 全排列的递归回溯算法实战"}},"translations":[],"translatedLinks":[]}},"staticQueryHashes":["336482444"]}