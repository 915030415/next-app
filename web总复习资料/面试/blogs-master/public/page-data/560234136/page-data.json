{"componentChunkName":"component---src-templates-blog-post-js","path":"/560234136/","result":{"data":{"site":{"siteMetadata":{"title":"ssh的博客","author":"ssh"}},"markdownRemark":{"id":"2f5f5815-52e1-5e18-9e7c-b5cac67f1493","html":"<p>TypeScript中有一项相当重要的进阶特性：<code class=\"language-text\">conditional types</code>，这个功能出现以后，很多积压已久的TypeScript功能都可以轻而易举的实现了。  </p>\n<p>那么本篇文章就会通过一个简单的功能：把</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">distribute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    type<span class=\"token punctuation\">:</span> <span class=\"token string\">'LOGIN'</span><span class=\"token punctuation\">,</span>\n    email<span class=\"token punctuation\">:</span> string\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>这样的函数调用方式给简化为：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">distribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'LOGIN'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    email<span class=\"token punctuation\">:</span> string\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>没错，它只是节省了几个字符串，但是却是一个非常适合我们深入学习条件类型的实战。</p>\n<h2 id=\"通过这篇文章，你可以学到以下特性在实战中是如何使用的：\"><a href=\"#%E9%80%9A%E8%BF%87%E8%BF%99%E7%AF%87%E6%96%87%E7%AB%A0%EF%BC%8C%E4%BD%A0%E5%8F%AF%E4%BB%A5%E5%AD%A6%E5%88%B0%E4%BB%A5%E4%B8%8B%E7%89%B9%E6%80%A7%E5%9C%A8%E5%AE%9E%E6%88%98%E4%B8%AD%E6%98%AF%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E7%9A%84%EF%BC%9A\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>通过这篇文章，你可以学到以下特性在实战中是如何使用的：</h2>\n<ol>\n<li>🎉TypeScript的高级类型（<a href=\"https://www.typescriptlang.org/docs/handbook/advanced-types.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Advanced Type</a>）</li>\n<li>🎉Conditional Types (条件类型)</li>\n<li>🎉Distributive conditional types (分布条件类型)</li>\n<li>🎉Mapped types（映射类型）</li>\n<li>🎉函数重载  </li>\n</ol>\n<h2 id=\"conditional-types的第一次使用\"><a href=\"#conditional-types%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%BD%BF%E7%94%A8\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>conditional types的第一次使用</h2>\n<p>先简单的看一个条件类型的示例：  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> process<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">string</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>\n  text<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">string</span> <span class=\"token operator\">?</span> string <span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token constant\">A</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">B</span> <span class=\"token operator\">?</span> <span class=\"token constant\">C</span> <span class=\"token punctuation\">:</span> <span class=\"token constant\">D</span></code></pre></div>\n<p>这样的语法就叫做条件类型，<code class=\"language-text\">A</code>, <code class=\"language-text\">B</code>, <code class=\"language-text\">C</code>和<code class=\"language-text\">D</code>可以是任何类型表达式。  </p>\n<h2 id=\"可分配性\"><a href=\"#%E5%8F%AF%E5%88%86%E9%85%8D%E6%80%A7\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>可分配性</h2>\n<p>这个<code class=\"language-text\">extends</code>关键字是条件类型的核心。 <code class=\"language-text\">A extends B</code>恰好意味着可以将类型A的任何值安全地分配给类型B的变量。在类型系统术语中，我们可以说“ A可分配给B”。</p>\n<p>从结构上来讲，我们可以说<code class=\"language-text\">A extends B</code>，就像“ A是B的超集”，或者更确切地说，“ A具有B的所有特性，也许更多”。  </p>\n<p>举个例子来说 <code class=\"language-text\">{ foo: number, bar: string } extends { foo: number }</code>是成立的，因为前者显然是后者的超集，比后者拥有更具体的类型。  </p>\n<h2 id=\"分布条件类型\"><a href=\"#%E5%88%86%E5%B8%83%E6%9D%A1%E4%BB%B6%E7%B1%BB%E5%9E%8B\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>分布条件类型</h2>\n<p>官方文档中，介绍了一种操作，叫 <code class=\"language-text\">Distributive conditional types</code>  </p>\n<p>简单来说，传入给<code class=\"language-text\">T extends U</code>中的<code class=\"language-text\">T</code>如果是一个联合类型<code class=\"language-text\">A | B | C</code>，则这个表达式会被展开成</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(A extends U ? X : Y) | (B extends U ? X : Y) | (C extends U ? X : Y)</code></pre></div>\n<p>条件类型让你可以过滤联合类型的特定成员。 为了说明这一点，假设我们有一个称为Animal的联合类型：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">type Animal = Lion | Zebra | Tiger | Shark</code></pre></div>\n<p>再假设我们要编写一个类型，来过滤出Animal中属于“猫”的那些类型  </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">type ExtractCat&lt;A&gt; = A extends { meow(): void } ? A : never\n\ntype Cat = ExtractCat&lt;Animal&gt;\n// =&gt; Lion | Tiger</code></pre></div>\n<p>接下来，Cat的计算过程会是这样子的：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">type Cat =\n  | ExtractCat&lt;Lion&gt;\n  | ExtractCat&lt;Zebra&gt;\n  | ExtractCat&lt;Tiger&gt;\n  | ExtractCat&lt;Shark&gt;</code></pre></div>\n<p>然后，它被计算成联合类型</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">type Cat = Lion | never | Tiger | never</code></pre></div>\n<p>然后，联合类型中的never没什么意义，所以最后的结果的出来了：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">type Cat = Lion | Tiger</code></pre></div>\n<p>记住这样的计算过程，记住ts这个把联合类型如何分配给条件类型，接下来的实战中会很有用。  </p>\n<h2 id=\"分布条件类型的真实用例\"><a href=\"#%E5%88%86%E5%B8%83%E6%9D%A1%E4%BB%B6%E7%B1%BB%E5%9E%8B%E7%9A%84%E7%9C%9F%E5%AE%9E%E7%94%A8%E4%BE%8B\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>分布条件类型的真实用例</h2>\n<p>举一个类似<code class=\"language-text\">redux</code>中的<code class=\"language-text\">dispatch</code>的例子。  </p>\n<p>首先，我们有一个联合类型<code class=\"language-text\">Action</code>，用来表示所有可以被dispatch接受的参数类型：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">type Action <span class=\"token operator\">=</span>\n  <span class=\"token operator\">|</span> <span class=\"token punctuation\">{</span>\n      type<span class=\"token punctuation\">:</span> <span class=\"token string\">\"INIT\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">|</span> <span class=\"token punctuation\">{</span>\n      type<span class=\"token punctuation\">:</span> <span class=\"token string\">\"SYNC\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">|</span> <span class=\"token punctuation\">{</span>\n      type<span class=\"token punctuation\">:</span> <span class=\"token string\">\"LOG_IN\"</span>\n      emailAddress<span class=\"token punctuation\">:</span> string\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">|</span> <span class=\"token punctuation\">{</span>\n      type<span class=\"token punctuation\">:</span> <span class=\"token string\">\"LOG_IN_SUCCESS\"</span>\n      accessToken<span class=\"token punctuation\">:</span> string\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>然后我们定义这个dispatch方法：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">declare <span class=\"token keyword\">function</span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">:</span> Action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span>\n\n<span class=\"token comment\">// ok</span>\n<span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  type<span class=\"token punctuation\">:</span> <span class=\"token string\">\"INIT\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// ok</span>\n<span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  type<span class=\"token punctuation\">:</span> <span class=\"token string\">\"LOG_IN\"</span><span class=\"token punctuation\">,</span>\n  emailAddress<span class=\"token punctuation\">:</span> <span class=\"token string\">\"david.sheldrick@artsy.net\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// ok</span>\n<span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  type<span class=\"token punctuation\">:</span> <span class=\"token string\">\"LOG_IN_SUCCESS\"</span><span class=\"token punctuation\">,</span>\n  accessToken<span class=\"token punctuation\">:</span> <span class=\"token string\">\"038fh239h923908h\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>这个API是类型安全的，当TS识别到type为<code class=\"language-text\">LOG_IN</code>的时候，它会要求你在参数中传入<code class=\"language-text\">emailAddress</code>这个参数，这样才能完全满足联合类型中的其中一项。  </p>\n<p>到此为止，我们可以去和女朋友约会了，此文完结。  </p>\n<p>等等，我们好像可以让这个api变得更简单一点：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"LOG_IN_SUCCESS\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  accessToken<span class=\"token punctuation\">:</span> <span class=\"token string\">\"038fh239h923908h\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>好，推掉我们的约会，打电话给我们的女朋友！取消！  </p>\n<h2 id=\"参数简化实现\"><a href=\"#%E5%8F%82%E6%95%B0%E7%AE%80%E5%8C%96%E5%AE%9E%E7%8E%B0\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>参数简化实现</h2>\n<p>首先，利用方括号选择出<code class=\"language-text\">Action</code>中的所有<code class=\"language-text\">type</code>，这个技巧很有用。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">type ActionType <span class=\"token operator\">=</span> Action<span class=\"token punctuation\">[</span><span class=\"token string\">\"type\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">// => \"INIT\" | \"SYNC\" | \"LOG_IN\" | \"LOG_IN_SUCCESS\"</span></code></pre></div>\n<p>但是第二个参数的类型取决于第一个参数。 我们可以使用类型变量来对该依赖关系建模。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">declare <span class=\"token keyword\">function</span> dispatch<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ActionType</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>\n  type<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span>\n  args<span class=\"token punctuation\">:</span> ExtractActionParameters<span class=\"token operator\">&lt;</span>Action<span class=\"token punctuation\">,</span> <span class=\"token constant\">T</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span></code></pre></div>\n<p>注意，这里就用到了<code class=\"language-text\">extends</code>语法，规定了我们的入参<code class=\"language-text\">type</code>必须是<code class=\"language-text\">ActionType</code>中一部分。  </p>\n<p>注意这里的第二个参数args，用<code class=\"language-text\">ExtractActionParameters&lt;Action, T&gt;</code>这个类型来把type和args做了关联，  </p>\n<p>来看看<code class=\"language-text\">ExtractActionParameters</code>是如何实现的：  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">type ExtractActionParameters<span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token constant\">A</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">?</span> <span class=\"token constant\">A</span> <span class=\"token punctuation\">:</span> never</code></pre></div>\n<p>在这次实战中，我们第一次运用到了条件类型，<code class=\"language-text\">ExtractActionParameters&lt;Action, T&gt;</code>会按照我们上文提到的<code class=\"language-text\">分布条件类型</code>，把Action中的4项依次去和<code class=\"language-text\">{ type: T }</code>进行比对，找出符合的那一项。  </p>\n<p>来看看如何使用它：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">type Test <span class=\"token operator\">=</span> ExtractActionParameters<span class=\"token operator\">&lt;</span>Action<span class=\"token punctuation\">,</span> <span class=\"token string\">\"LOG_IN\"</span><span class=\"token operator\">></span>\n<span class=\"token comment\">// => { type: \"LOG_IN\", emailAddress: string }</span></code></pre></div>\n<p>这样就筛选出了type匹配的一项。  </p>\n<p>接下来我们要把type去掉，第一个参数已经是type了，因此我们不想再额外声明type了。  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 把类型中key为\"type\"去掉</span>\ntype ExcludeTypeField<span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">K</span> <span class=\"token keyword\">in</span> Exclude<span class=\"token operator\">&lt;</span>keyof <span class=\"token constant\">A</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"type\"</span><span class=\"token operator\">></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">[</span><span class=\"token constant\">K</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>这里利用了<code class=\"language-text\">keyof</code>语法，并且利用内置类型<code class=\"language-text\">Exclude</code>把<code class=\"language-text\">type</code>这个key去掉，因此只会留下额外的参数。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">type Test <span class=\"token operator\">=</span> ExcludeTypeField<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token string\">\"LOG_IN\"</span><span class=\"token punctuation\">,</span> emailAddress<span class=\"token punctuation\">:</span> string <span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n<span class=\"token comment\">// { emailAddress: string }</span></code></pre></div>\n<p>到此为止，我们就可以实现上文中提到的参数简化功能：  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ok</span>\n<span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  type<span class=\"token punctuation\">:</span> <span class=\"token string\">\"LOG_IN\"</span><span class=\"token punctuation\">,</span>\n  emailAddress<span class=\"token punctuation\">:</span> <span class=\"token string\">\"david.sheldrick@artsy.net\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"利用重载进一步优化\"><a href=\"#%E5%88%A9%E7%94%A8%E9%87%8D%E8%BD%BD%E8%BF%9B%E4%B8%80%E6%AD%A5%E4%BC%98%E5%8C%96\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>利用重载进一步优化</h2>\n<p>到了这一步为止，虽然带参数的Action可以完美支持了，但是对于”INIT”这种不需要传参的Action，我们依然要写下面这样代码： </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"INIT\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>这肯定是不能接受的！所以我们要利用TypeScript的函数重载功能。  </p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// 简单参数类型</span>\n<span class=\"token keyword\">function</span> dispatch<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">SimpleActionType</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">type</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span>\n\n<span class=\"token comment\">// 复杂参数类型</span>\n<span class=\"token keyword\">function</span> dispatch<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ComplexActionType</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">type</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span>\n  args<span class=\"token punctuation\">:</span> ExtractActionParameters<span class=\"token operator\">&lt;</span>Action<span class=\"token punctuation\">,</span> <span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span>\n\n<span class=\"token comment\">// 实现</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> payload<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>那么关键点就在于<code class=\"language-text\">SimpleActionType</code>和<code class=\"language-text\">ComplexActionType</code>要如何实现了，  </p>\n<p><code class=\"language-text\">SimpleActionType</code>顾名思义就是除了type以外不需要额外参数的Action类型，  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">type SimpleAction <span class=\"token operator\">=</span> ExtractSimpleAction<span class=\"token operator\">&lt;</span>Action<span class=\"token operator\">></span></code></pre></div>\n<p>我们如何定义这个<code class=\"language-text\">ExtractSimpleAction</code>条件类型？  </p>\n<p>如果我们从这个Action中删除<code class=\"language-text\">type</code>字段，并且结果是一个空的接口，  </p>\n<p>那么这就是一个<code class=\"language-text\">SimpleAction</code>。 所以我们可能会凭直觉写出这样的代码：  </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">type ExtractSimpleAction&lt;A&gt; = ExcludeTypeField&lt;A&gt; extends {} ? A : never</code></pre></div>\n<p>但这样是行不通的，几乎所有的类型都可以extends {}，因为{}太宽泛了。  </p>\n<p>我们应该反过来写：  </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">type ExtractSimpleAction&lt;A&gt; = {} extends ExcludeTypeField&lt;A&gt; ? A : never</code></pre></div>\n<p>现在，如果<code class=\"language-text\">ExcludeTypeField &lt;A&gt;</code>为空，则extends表达式为true，否则为false。  </p>\n<p>但这仍然行不通！ 因为<code class=\"language-text\">分布条件类型</code>仅在extends关键字左侧是<strong>类型变量</strong>时发生。  </p>\n<p>分布条件件类型仅发生在如下场景：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">type Blah&lt;Var&gt; = Var extends Whatever ? A : B</code></pre></div>\n<p>而不是：  </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">type Blah&lt;Var&gt; = Foo&lt;Var&gt; extends Whatever ? A : B\ntype Blah&lt;Var&gt; = Whatever extends Var ? A : B</code></pre></div>\n<p>但是我们可以通过一些小技巧绕过这个限制：  </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">type ExtractSimpleAction&lt;A&gt; = A extends any\n  ? {} extends ExcludeTypeField&lt;A&gt;\n    ? A\n    : never\n  : never</code></pre></div>\n<p><code class=\"language-text\">A extends any</code>是一定成立的，这只是用来绕过ts对于分布条件类型的限制，而我们真正想要做的条件判断被放在了中间，因此Action联合类型中的每一项又能够分布的去匹配了。</p>\n<p>那么我们就可以简单的筛选出所有不需要额外参数的type</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">type SimpleAction = ExtractSimpleAction&lt;Action&gt;\ntype SimpleActionType = SimpleAction[&#39;type&#39;]</code></pre></div>\n<p>再利用Exclude取反，找到复杂类型：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">type ComplexActionType = Exclude&lt;ActionType, SimpleActionType&gt;</code></pre></div>\n<p>到此为止，我们所需要的功能就完美实现了：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 简单参数类型</span>\n<span class=\"token keyword\">function</span> dispatch<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">SimpleActionType</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span>\n<span class=\"token comment\">// 复杂参数类型</span>\n<span class=\"token keyword\">function</span> dispatch<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ComplexActionType</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>\n  type<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span>\n  args<span class=\"token punctuation\">:</span> ExtractActionParameters<span class=\"token operator\">&lt;</span>Action<span class=\"token punctuation\">,</span> <span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span>\n<span class=\"token comment\">// 实现</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">:</span> any<span class=\"token punctuation\">,</span> payload<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> any<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// ok</span>\n<span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SYNC\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// ok</span>\n<span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  type<span class=\"token punctuation\">:</span> <span class=\"token string\">\"LOG_IN\"</span><span class=\"token punctuation\">,</span>\n  emailAddress<span class=\"token punctuation\">:</span> <span class=\"token string\">\"david.sheldrick@artsy.net\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"总结\"><a href=\"#%E6%80%BB%E7%BB%93\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>总结</h2>\n<p>本文的实战示例来自国外大佬的博客，我结合个人的理解整理成了这篇文章。  </p>\n<p>中间涉及到的一些进阶的知识点，如果小伙伴们不太熟悉的话，可以参考各类文档中的定义去反复研究，相信你会对TypeScript有更深一步的了解。</p>\n<h2 id=\"参考资料\"><a href=\"#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>参考资料</h2>\n<p><a href=\"https://artsy.github.io/blog/2018/11/21/conditional-types-in-typescript/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://artsy.github.io/blog/2018/11/21/conditional-types-in-typescript/</a></p>\n<h2 id=\"源码\"><a href=\"#%E6%BA%90%E7%A0%81\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>源码</h2>\n<p><a href=\"https://github.com/sl1673495/typescript-codes/blob/master/src/dispatch-conditional-types-with-builtin-types.ts\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/sl1673495/typescript-codes/blob/master/src/dispatch-conditional-types-with-builtin-types.ts</a></p>","timeToRead":9,"frontmatter":{"title":"TypeScript 参数简化实战（进阶知识点conditional types）","date":"February 05, 2020","spoiler":""},"fields":{"slug":"/560234136/","langKey":"en"}}},"pageContext":{"slug":"/560234136/","previous":{"fields":{"slug":"/557329151/","langKey":"en","directoryName":"557329151"},"frontmatter":{"title":"在React中引入Vue3的reactivity分包来实现最强大的状态管理。"}},"next":{"fields":{"slug":"/584387569/","langKey":"en","directoryName":"584387569"},"frontmatter":{"title":"React Hook + TypeScript 深入浅出实现一个购物车（陷阱、性能优化、自定义hook）"}},"translations":[],"translatedLinks":[]}},"staticQueryHashes":["336482444"]}