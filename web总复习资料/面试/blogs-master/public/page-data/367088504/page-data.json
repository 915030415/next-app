{"componentChunkName":"component---src-templates-blog-post-js","path":"/367088504/","result":{"data":{"site":{"siteMetadata":{"title":"ssh的博客","author":"ssh"}},"markdownRemark":{"id":"7fb073fb-9c49-5975-8236-a067ea26b296","html":"<p>rc-form作为ant-design系列实现表单组件的底层组件， 通用性和强大的功能兼得，这得益于它底层的精妙实现，rc-form是典型的高阶组件（higher-order component）</p>\n<p>下面从一个官方的简单示例说起。 </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createForm<span class=\"token punctuation\">,</span> formShape <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'rc-form'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Form</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> propTypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    form<span class=\"token punctuation\">:</span> formShape<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function-variable function\">submit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>form<span class=\"token punctuation\">.</span><span class=\"token function\">validateFields</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> errors<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> getFieldProps<span class=\"token punctuation\">,</span> getFieldError <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>form<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>input <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token function\">getFieldProps</span><span class=\"token punctuation\">(</span><span class=\"token string\">'normal'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>input <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token function\">getFieldProps</span><span class=\"token punctuation\">(</span><span class=\"token string\">'required'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">onChange</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// have to write original onChange here if you need</span>\n          rules<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>required<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span>errors <span class=\"token operator\">=</span> <span class=\"token function\">getFieldError</span><span class=\"token punctuation\">(</span><span class=\"token string\">'required'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">','</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>submit<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>submit<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token function\">createForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>Form<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>可以看到在最后用createForm这个函数执行返回的函数包裹了Form组件，\n正因为如此在render中才可以从props里拿到from， 这是rc-form提供给我们的，接下来看看这个form是如何注入进去的。</p>\n<h3 id=\"createformjs\"><a href=\"#createformjs\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>createForm.js</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> createBaseForm <span class=\"token keyword\">from</span> <span class=\"token string\">'./createBaseForm'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> mixin <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">getForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      getFieldsValue<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fieldsStore<span class=\"token punctuation\">.</span>getFieldsValue<span class=\"token punctuation\">,</span>\n      getFieldValue<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fieldsStore<span class=\"token punctuation\">.</span>getFieldValue<span class=\"token punctuation\">,</span>\n      getFieldInstance<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>getFieldInstance<span class=\"token punctuation\">,</span>\n      setFieldsValue<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>setFieldsValue<span class=\"token punctuation\">,</span>\n      setFields<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>setFields<span class=\"token punctuation\">,</span>\n      setFieldsInitialValue<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fieldsStore<span class=\"token punctuation\">.</span>setFieldsInitialValue<span class=\"token punctuation\">,</span>\n      getFieldDecorator<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>getFieldDecorator<span class=\"token punctuation\">,</span>\n      getFieldProps<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>getFieldProps<span class=\"token punctuation\">,</span>\n      getFieldsError<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fieldsStore<span class=\"token punctuation\">.</span>getFieldsError<span class=\"token punctuation\">,</span>\n      getFieldError<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fieldsStore<span class=\"token punctuation\">.</span>getFieldError<span class=\"token punctuation\">,</span>\n      isFieldValidating<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fieldsStore<span class=\"token punctuation\">.</span>isFieldValidating<span class=\"token punctuation\">,</span>\n      isFieldsValidating<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fieldsStore<span class=\"token punctuation\">.</span>isFieldsValidating<span class=\"token punctuation\">,</span>\n      isFieldsTouched<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fieldsStore<span class=\"token punctuation\">.</span>isFieldsTouched<span class=\"token punctuation\">,</span>\n      isFieldTouched<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fieldsStore<span class=\"token punctuation\">.</span>isFieldTouched<span class=\"token punctuation\">,</span>\n      isSubmitting<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isSubmitting<span class=\"token punctuation\">,</span>\n      submit<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>submit<span class=\"token punctuation\">,</span>\n      validateFields<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>validateFields<span class=\"token punctuation\">,</span>\n      resetFields<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>resetFields<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">createForm</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">createBaseForm</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>mixin<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> createForm<span class=\"token punctuation\">;</span></code></pre></div>\n<p>这是我们在render中调用的createForm 可以看到mixin中的getForm里的属性和我们使用的很相似，其实这就是最终注入的props.form属性， 对外暴露的createForm方法最终调用了createBaseForm并将mixin传入。</p>\n<h3 id=\"createbaseformjs\"><a href=\"#createbaseformjs\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>createBaseForm.js</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">createBaseForm</span><span class=\"token punctuation\">(</span>option <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> mixins <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n    validateMessages<span class=\"token punctuation\">,</span>\n    onFieldsChange<span class=\"token punctuation\">,</span>\n    onValuesChange<span class=\"token punctuation\">,</span>\n    mapProps <span class=\"token operator\">=</span> identity<span class=\"token punctuation\">,</span>\n    mapPropsToFields<span class=\"token punctuation\">,</span>\n    fieldNameProp<span class=\"token punctuation\">,</span>\n    fieldMetaProp<span class=\"token punctuation\">,</span>\n    fieldDataProp<span class=\"token punctuation\">,</span>\n    formPropName <span class=\"token operator\">=</span> <span class=\"token string\">'form'</span><span class=\"token punctuation\">,</span>\n    name<span class=\"token punctuation\">:</span> formName<span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// @deprecated</span>\n    withRef<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> option<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">decorate</span><span class=\"token punctuation\">(</span>WrappedComponent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> Form <span class=\"token operator\">=</span> <span class=\"token function\">createReactClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      mixins<span class=\"token punctuation\">,</span>\n      <span class=\"token operator\">...</span><span class=\"token operator\">...</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> wrappedComponentRef<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>restProps <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> formProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token punctuation\">[</span>formPropName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>withRef<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span> <span class=\"token operator\">&amp;&amp;</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'test'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">warning</span><span class=\"token punctuation\">(</span>\n              <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n              <span class=\"token string\">'`withRef` is deprecated, please use `wrappedComponentRef` instead. '</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">'See: https://github.com/react-component/form#note-use-wrappedcomponentref-instead-of-withref-after-rc-form140'</span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n          formProps<span class=\"token punctuation\">.</span>ref <span class=\"token operator\">=</span> <span class=\"token string\">'wrappedComponent'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>wrappedComponentRef<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          formProps<span class=\"token punctuation\">.</span>ref <span class=\"token operator\">=</span> wrappedComponentRef<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">const</span> props <span class=\"token operator\">=</span> mapProps<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token operator\">...</span>formProps<span class=\"token punctuation\">,</span>\n          <span class=\"token operator\">...</span>restProps<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>WrappedComponent <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span><span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token function\">argumentContainer</span><span class=\"token punctuation\">(</span>Form<span class=\"token punctuation\">,</span> WrappedComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>可以看出createBaseForm是一个典型的高阶函数，接受options和mixin作为参数，返回一个装饰器decorate函数, 这个decorate函数接受一个react component作为参数，所以我们在外部调用可以使用</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">createForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>Form<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>这样去获得一个注入了props的组件, 接下来看render中的实现</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">        <span class=\"token keyword\">const</span> formProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token punctuation\">[</span>formPropName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>WrappedComponent <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span><span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>formPropName在defaultProps中默认被设置为’form’, getForm是从mixin中注入的，\n其实就相当于注入了</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  form<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      getFieldsValue<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fieldsStore<span class=\"token punctuation\">.</span>getFieldsValue<span class=\"token punctuation\">,</span>\n      getFieldValue<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fieldsStore<span class=\"token punctuation\">.</span>getFieldValue<span class=\"token punctuation\">,</span>\n      getFieldInstance<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>getFieldInstance<span class=\"token punctuation\">,</span>\n      setFieldsValue<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>setFieldsValue<span class=\"token punctuation\">,</span>\n      setFields<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>setFields<span class=\"token punctuation\">,</span>\n      setFieldsInitialValue<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fieldsStore<span class=\"token punctuation\">.</span>setFieldsInitialValue<span class=\"token punctuation\">,</span>\n      getFieldDecorator<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>getFieldDecorator<span class=\"token punctuation\">,</span>\n      getFieldProps<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>getFieldProps<span class=\"token punctuation\">,</span>\n      getFieldsError<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fieldsStore<span class=\"token punctuation\">.</span>getFieldsError<span class=\"token punctuation\">,</span>\n      getFieldError<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fieldsStore<span class=\"token punctuation\">.</span>getFieldError<span class=\"token punctuation\">,</span>\n      isFieldValidating<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fieldsStore<span class=\"token punctuation\">.</span>isFieldValidating<span class=\"token punctuation\">,</span>\n      isFieldsValidating<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fieldsStore<span class=\"token punctuation\">.</span>isFieldsValidating<span class=\"token punctuation\">,</span>\n      isFieldsTouched<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fieldsStore<span class=\"token punctuation\">.</span>isFieldsTouched<span class=\"token punctuation\">,</span>\n      isFieldTouched<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fieldsStore<span class=\"token punctuation\">.</span>isFieldTouched<span class=\"token punctuation\">,</span>\n      isSubmitting<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isSubmitting<span class=\"token punctuation\">,</span>\n      submit<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>submit<span class=\"token punctuation\">,</span>\n      validateFields<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>validateFields<span class=\"token punctuation\">,</span>\n      resetFields<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>resetFields<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>看源码先从主流程看起， 知道了form是如何注入以后，我们就从示例入手， 先看看</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>input <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token function\">getFieldProps</span><span class=\"token punctuation\">(</span><span class=\"token string\">'normal'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n<p>中的getFieldProps是如何实现。</p>\n<h3 id=\"getfieldprops\"><a href=\"#getfieldprops\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>getFieldProps</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">getFieldProps</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> usersFieldOption <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Must call `getFieldProps` with valid name string!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">warning</span><span class=\"token punctuation\">(</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fieldsStore<span class=\"token punctuation\">.</span><span class=\"token function\">isValidNestedFieldName</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'One field name cannot be part of another, e.g. `a` and `a.b`.'</span>\n          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">warning</span><span class=\"token punctuation\">(</span>\n            <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token string\">'exclusive'</span> <span class=\"token keyword\">in</span> usersFieldOption<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'`option.exclusive` of `getFieldProps`|`getFieldDecorator` had been remove.'</span>\n          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">delete</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>clearedFieldMetaCache<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">const</span> fieldOption <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n          name<span class=\"token punctuation\">,</span>\n          trigger<span class=\"token punctuation\">:</span> <span class=\"token constant\">DEFAULT_TRIGGER</span><span class=\"token punctuation\">,</span>\n          valuePropName<span class=\"token punctuation\">:</span> <span class=\"token string\">'value'</span><span class=\"token punctuation\">,</span>\n          validate<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n          <span class=\"token operator\">...</span>usersFieldOption<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n          rules<span class=\"token punctuation\">,</span>\n          trigger<span class=\"token punctuation\">,</span>\n          validateTrigger <span class=\"token operator\">=</span> trigger<span class=\"token punctuation\">,</span>\n          validate<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> fieldOption<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">const</span> fieldMeta <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fieldsStore<span class=\"token punctuation\">.</span><span class=\"token function\">getFieldMeta</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'initialValue'</span> <span class=\"token keyword\">in</span> fieldOption<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          fieldMeta<span class=\"token punctuation\">.</span>initialValue <span class=\"token operator\">=</span> fieldOption<span class=\"token punctuation\">.</span>initialValue<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">const</span> inputProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fieldsStore<span class=\"token punctuation\">.</span><span class=\"token function\">getFieldValuePropValue</span><span class=\"token punctuation\">(</span>fieldOption<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n          ref<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getCacheBind</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">__ref`</span></span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>saveRef<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fieldNameProp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          inputProps<span class=\"token punctuation\">[</span>fieldNameProp<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> formName <span class=\"token operator\">?</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>formName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">_</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span> <span class=\"token punctuation\">:</span> name<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">const</span> validateRules <span class=\"token operator\">=</span> <span class=\"token function\">normalizeValidateRules</span><span class=\"token punctuation\">(</span>validate<span class=\"token punctuation\">,</span> rules<span class=\"token punctuation\">,</span> validateTrigger<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> validateTriggers <span class=\"token operator\">=</span> <span class=\"token function\">getValidateTriggers</span><span class=\"token punctuation\">(</span>validateRules<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        validateTriggers<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>inputProps<span class=\"token punctuation\">[</span>action<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n          inputProps<span class=\"token punctuation\">[</span>action<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getCacheBind</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onCollectValidate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// make sure that the value will be collect</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>trigger <span class=\"token operator\">&amp;&amp;</span> validateTriggers<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>trigger<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          inputProps<span class=\"token punctuation\">[</span>trigger<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getCacheBind</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> trigger<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onCollect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">const</span> meta <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token operator\">...</span>fieldMeta<span class=\"token punctuation\">,</span>\n          <span class=\"token operator\">...</span>fieldOption<span class=\"token punctuation\">,</span>\n          validate<span class=\"token punctuation\">:</span> validateRules<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fieldsStore<span class=\"token punctuation\">.</span><span class=\"token function\">setFieldMeta</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> meta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fieldMetaProp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          inputProps<span class=\"token punctuation\">[</span>fieldMetaProp<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> meta<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fieldDataProp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          inputProps<span class=\"token punctuation\">[</span>fieldDataProp<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fieldsStore<span class=\"token punctuation\">.</span><span class=\"token function\">getField</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> inputProps<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>这个函数接受name，和usersFieldOption两个参数</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> fieldOption <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n          name<span class=\"token punctuation\">,</span>\n          trigger<span class=\"token punctuation\">:</span> <span class=\"token constant\">DEFAULT_TRIGGER</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// onChange</span>\n          valuePropName<span class=\"token punctuation\">:</span> <span class=\"token string\">'value'</span><span class=\"token punctuation\">,</span>\n          validate<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n          <span class=\"token operator\">...</span>usersFieldOption<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token keyword\">const</span> fieldMeta <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fieldsStore<span class=\"token punctuation\">.</span><span class=\"token function\">getFieldMeta</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'initialValue'</span> <span class=\"token keyword\">in</span> fieldOption<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    fieldMeta<span class=\"token punctuation\">.</span>initialValue <span class=\"token operator\">=</span> fieldOption<span class=\"token punctuation\">.</span>initialValue<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span></code></pre></div>\n<p>先是一波简单的合并配置， 将usersFieldOption混入fiedOption中,\n然后从this.fieldsStore中根据name提取出fieldMeta, 将initialValue填入。\nfieldsStore是一个存储类，form组件内部有大量的数据需要存储和读取，所以实现了一个fieldsStore类去处理数据的流转。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">FieldsStore</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>fields<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fields <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">flattenFields</span><span class=\"token punctuation\">(</span>fields<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fieldsMeta <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">...</span>\n  <span class=\"token function\">getFieldMeta</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fieldsMeta<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fieldsMeta<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fieldsMeta<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>因为初始化的this.fieldsStore应该是空的， 所以这里也只是读取到了一个空对象，继续往下走。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> inputProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fieldsStore<span class=\"token punctuation\">.</span><span class=\"token function\">getFieldValuePropValue</span><span class=\"token punctuation\">(</span>fieldOption<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n   ref<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getCacheBind</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">__ref`</span></span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>saveRef<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>inputProps中先是通过fieldsStore实例的getFieldValuePropValue方法传入fieldOption拿到一些属性，\n在初始化的时候其实就是{ value: undefined }</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token function\">getFieldValuePropValue</span><span class=\"token punctuation\">(</span>fieldMeta<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 对应示例中 name: 'normal', valuePropName: 'value'</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">,</span> getValueProps<span class=\"token punctuation\">,</span> valuePropName <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> fieldMeta<span class=\"token punctuation\">;</span>\n   <span class=\"token comment\">// 得到 {  name: 'normal'  }， 初始化的时候fields还为空</span>\n    <span class=\"token keyword\">const</span> field <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getField</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token comment\">// field中没有value， 所以去取initialValue， 示例中未传入，同样为空 </span>\n    <span class=\"token keyword\">const</span> fieldValue <span class=\"token operator\">=</span> <span class=\"token string\">'value'</span> <span class=\"token keyword\">in</span> field <span class=\"token operator\">?</span>\n      field<span class=\"token punctuation\">.</span>value <span class=\"token punctuation\">:</span> fieldMeta<span class=\"token punctuation\">.</span>initialValue<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>getValueProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">getValueProps</span><span class=\"token punctuation\">(</span>fieldValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n   <span class=\"token comment\">// 初始化的时候就返回 { value: undefined }</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>valuePropName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> fieldValue <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">getField</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fields<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      name<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>ref则是通过this.cacheBind的缓存方法去取缓存了的表单元素ref\n此时inputProps = {\nvalue: undefined,\nref: component,\n}</p>\n<p>接下来是处理有关表单验证的逻辑，</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> validateRules <span class=\"token operator\">=</span> <span class=\"token function\">normalizeValidateRules</span><span class=\"token punctuation\">(</span>validate<span class=\"token punctuation\">,</span> rules<span class=\"token punctuation\">,</span> validateTrigger<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> validateTriggers <span class=\"token operator\">=</span> <span class=\"token function\">getValidateTriggers</span><span class=\"token punctuation\">(</span>validateRules<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nvalidateTriggers<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>inputProps<span class=\"token punctuation\">[</span>action<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n   inputProps<span class=\"token punctuation\">[</span>action<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getCacheBind</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onCollectValidate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>normalizeValidateRules方法接受的validate在示例未传入，是空数组，rules是 [{required: true}], validateTrigger是默认的onChange, 看normalizeValidateRules的实现：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">normalizeValidateRules</span><span class=\"token punctuation\">(</span>validate<span class=\"token punctuation\">,</span> rules<span class=\"token punctuation\">,</span> validateTrigger<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> validateRules <span class=\"token operator\">=</span> validate<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> newItem <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token operator\">...</span>item<span class=\"token punctuation\">,</span>\n      trigger<span class=\"token punctuation\">:</span> item<span class=\"token punctuation\">.</span>trigger <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> newItem<span class=\"token punctuation\">.</span>trigger <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      newItem<span class=\"token punctuation\">.</span>trigger <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>newItem<span class=\"token punctuation\">.</span>trigger<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> newItem<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rules<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    validateRules<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      trigger<span class=\"token punctuation\">:</span> validateTrigger <span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>validateTrigger<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      rules<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> validateRules<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>我们发现其实返回了</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">validateRules<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n  trigger<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'onChange'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  rules<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>required<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>在看getValidateTriggers 将上面的数组传入</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getValidateTriggers</span><span class=\"token punctuation\">(</span>validateRules<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> validateRules\n    <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>item <span class=\"token operator\">=></span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span>item<span class=\"token punctuation\">.</span>rules <span class=\"token operator\">&amp;&amp;</span> item<span class=\"token punctuation\">.</span>rules<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>item <span class=\"token operator\">=></span> item<span class=\"token punctuation\">.</span>trigger<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>pre<span class=\"token punctuation\">,</span> curr<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> pre<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>curr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>其实就是简单的把rules为空的项过滤掉, 因为每个rule的trigger可能有多个 所以reduce的目的是拉平成一维数组, 最后返回[‘onChange’]这样的数组</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  validateTriggers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'onChange'</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>最后对validateTriggers进行循环，循环体内</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>inputProps<span class=\"token punctuation\">[</span>action<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\ninputProps<span class=\"token punctuation\">[</span>action<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getCacheBind</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onCollectValidate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>其实就是把onChange: onCollectValidate 这样的校验触发逻辑混入inputProps，关于表单校验的逻辑其实是用了heyiming大大写的async-validator这个库，使用非常广泛，有空的话也可以深入研究一下，可以另开一篇了~</p>\n<p>接下来就是合并新的meta对象，并且存入fieldsStore中对应的name存储空间。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> meta <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token operator\">...</span>fieldMeta<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 初始化不存在</span>\n   <span class=\"token operator\">...</span>fieldOption<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 外部传入和内部默认合并后的options</span>\n   validate<span class=\"token punctuation\">:</span> validateRules<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 上文已经给出示例中结果</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fieldsStore<span class=\"token punctuation\">.</span><span class=\"token function\">setFieldMeta</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> meta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>setFieldMeta实现就是一个简单的赋值，这样fieldStore内部name这个key就可以读取到存储的数据了。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"> <span class=\"token function\">setFieldMeta</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> meta<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fieldsMeta<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> meta<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>最后返回inputProps对象 混入input组件，</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"> <span class=\"token keyword\">return</span> inputProps<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//大概的格式是 </span>\n<span class=\"token punctuation\">{</span>\n   name<span class=\"token punctuation\">:</span> <span class=\"token string\">'required'</span><span class=\"token punctuation\">,</span>\n   <span class=\"token function\">onChange</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> \n   rules<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>required<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>示例中的onSubmit函数调用了validateFields,\n抛开表单校验的逻辑不看，可以看到这个方法内部这句。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fieldsStore<span class=\"token punctuation\">.</span><span class=\"token function\">getFieldsValue</span><span class=\"token punctuation\">(</span>fieldNames<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>最终整合成{\nkey: value\n}\n这样的结果给外部做表单提交。</p>","timeToRead":8,"frontmatter":{"title":"react-component源码学习（1） rc-form","date":"October 05, 2018","spoiler":""},"fields":{"slug":"/367088504/","langKey":"en"}}},"pageContext":{"slug":"/367088504/","previous":null,"next":{"fields":{"slug":"/368466119/","langKey":"en","directoryName":"368466119"},"frontmatter":{"title":"react-component源码学习（2） rc-steps"}},"translations":[],"translatedLinks":[]}},"staticQueryHashes":["336482444"]}