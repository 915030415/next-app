{"componentChunkName":"component---src-templates-blog-post-js","path":"/597722732/","result":{"data":{"site":{"siteMetadata":{"title":"ssh的博客","author":"ssh"}},"markdownRemark":{"id":"ecef5e71-a8dd-5653-813b-d6b3fedf4d96","html":"<h2 id=\"前言\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>很多人提起 Vue 中的 computed，第一反应就是计算属性会缓存，那么它到底是怎么缓存的呢？缓存的到底是什么，什么时候缓存会失效，相信还是有很多人对此很模糊。</p>\n<p>本文以 Vue 2.6.11 版本为基础，就深入原理，带你来看看所谓的缓存到底是什么样的。</p>\n<h2 id=\"注意\"><a href=\"#%E6%B3%A8%E6%84%8F\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>注意</h2>\n<p>本文假定你对 Vue 响应式原理已经有了基础的了解，如果对于 <code class=\"language-text\">Watcher</code>、<code class=\"language-text\">Dep</code>和什么是 <code class=\"language-text\">渲染watcher</code> 等概念还不是很熟悉的话，可以先找一些基础的响应式原理的文章或者教程看一下。视频教程的话推荐黄轶老师的，如果想要看简化实现，也可以先看我写的文章：</p>\n<p><a href=\"https://juejin.im/post/5db6433b51882564912fc30f\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">手把手带你实现一个最精简的响应式系统来学习Vue的data、computed、watch源码</a></p>\n<p>注意，这篇文章里我也写了 computed 的原理，但是这篇文章里的 computed 是基于 Vue 2.5 版本的，和当前 2.6 版本的变化还是非常大的，可以仅做参考。</p>\n<h2 id=\"示例\"><a href=\"#%E7%A4%BA%E4%BE%8B\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>示例</h2>\n<p>按照我的文章惯例，还是以一个最简的示例来演示。</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>app<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>change<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>{{sum}}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>./vue2.6.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\">\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    el<span class=\"token punctuation\">:</span> <span class=\"token string\">\"#app\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        count<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    methods<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">change</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    computed<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>这个例子很简单，刚开始页面上显示数字 <code class=\"language-text\">2</code>，点击数字后变成 <code class=\"language-text\">3</code>。</p>\n<h2 id=\"解析\"><a href=\"#%E8%A7%A3%E6%9E%90\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>解析</h2>\n<h3 id=\"回顾-watcher-的流程\"><a href=\"#%E5%9B%9E%E9%A1%BE-watcher-%E7%9A%84%E6%B5%81%E7%A8%8B\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>回顾 watcher 的流程</h3>\n<p>进入正题，Vue 初次运行时会对 computed 属性做一些初始化处理，首先我们回顾一下 watcher 的概念，它的核心概念是 <code class=\"language-text\">get</code> 求值，和 <code class=\"language-text\">update</code> 更新。</p>\n<ol>\n<li>在求值的时候，它会先把<strong>自身</strong>也就是 watcher 本身赋值给 <code class=\"language-text\">Dep.target</code> 这个全局变量。</li>\n<li>然后求值的过程中，会读取到响应式属性，那么响应式属性的 dep 就会收集到这个 watcher 作为依赖。</li>\n<li>下次响应式属性更新了，就会从 dep 中找出它收集到的 watcher，触发 <code class=\"language-text\">watcher.update()</code> 去更新。</li>\n</ol>\n<p>所以最关键的就在于，这个 <code class=\"language-text\">get</code> 到底用来做什么，这个 <code class=\"language-text\">update</code> 会触发什么样的更新。</p>\n<p>在基本的响应式更新视图的流程中，以上概念的 <code class=\"language-text\">get</code> 求值就是指 Vue 的组件重新渲染的函数，而 <code class=\"language-text\">update</code> 的时候，其实就是重新调用组件的渲染函数去更新视图。</p>\n<p>而 Vue 中很巧妙的一点，就是这套流程也同样适用于 computed 的更新。</p>\n<h3 id=\"初始化-computed\"><a href=\"#%E5%88%9D%E5%A7%8B%E5%8C%96-computed\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>初始化 computed</h3>\n<p>这里先提前剧透一下，Vue 会对 options 中的每个 computed 属性也用 watcher 去包装起来，它的 <code class=\"language-text\">get</code> 函数显然就是要执行用户定义的求值函数，而 <code class=\"language-text\">update</code> 则是一个比较复杂的流程，接下来我会详细讲解。</p>\n<p>首先在组件初始化的时候，会进入到初始化 computed 的函数</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>opts<span class=\"token punctuation\">.</span>computed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">initComputed</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">,</span> opts<span class=\"token punctuation\">.</span>computed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>进入 <code class=\"language-text\">initComputed</code> 看看</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> watchers <span class=\"token operator\">=</span> vm<span class=\"token punctuation\">.</span>_computedWatchers <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 依次为每个 computed 属性定义</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> key <span class=\"token keyword\">in</span> computed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> userDef <span class=\"token operator\">=</span> computed<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n  watchers<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Watcher</span><span class=\"token punctuation\">(</span>\n      vm<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 实例</span>\n      getter<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 用户传入的求值函数 sum</span>\n      noop<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 回调函数 可以先忽视</span>\n      <span class=\"token punctuation\">{</span> lazy<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">// 声明 lazy 属性 标记 computed watcher</span>\n  <span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 用户在调用 this.sum 的时候，会发生的事情</span>\n  <span class=\"token function\">defineComputed</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> userDef<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>首先定义了一个空的对象，用来存放所有计算属性相关的 watcher，后文我们会把它叫做 <code class=\"language-text\">计算watcher</code>。</p>\n<p>然后循环为每个 computed 属性生成了一个 <code class=\"language-text\">计算watcher</code>。</p>\n<p>它的形态保留关键属性简化后是这样的：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n    deps<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    dirty<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    getter<span class=\"token punctuation\">:</span> ƒ <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    lazy<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    value<span class=\"token punctuation\">:</span> undefined\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>可以看到它的 <code class=\"language-text\">value</code> 刚开始是 undefined，<code class=\"language-text\">lazy</code> 是 true，说明它的值是惰性计算的，只有到真正在模板里去读取它的值后才会计算。</p>\n<p>这个 <code class=\"language-text\">dirty</code> 属性其实是缓存的关键，先记住它。</p>\n<p>接下来看看比较关键的 <code class=\"language-text\">defineComputed</code>，它决定了用户在读取 <code class=\"language-text\">this.sum</code> 这个计算属性的值后会发生什么，继续简化，排除掉一些不影响流程的逻辑。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> \n    <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 从刚刚说过的组件实例上拿到 computed watcher</span>\n        <span class=\"token keyword\">const</span> watcher <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_computedWatchers <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_computedWatchers<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>watcher<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// ✨ 注意！这里只有dirty了才会重新求值</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>watcher<span class=\"token punctuation\">.</span>dirty<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 这里会求值 调用 get</span>\n            watcher<span class=\"token punctuation\">.</span><span class=\"token function\">evaluate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">}</span>\n          <span class=\"token comment\">// ✨ 这里也是个关键 等会细讲</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Dep<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            watcher<span class=\"token punctuation\">.</span><span class=\"token function\">depend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">}</span>\n          <span class=\"token comment\">// 最后返回计算出来的值</span>\n          <span class=\"token keyword\">return</span> watcher<span class=\"token punctuation\">.</span>value\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>这个函数需要仔细看看，它做了好几件事，我们以初始化的流程来讲解它：</p>\n<p>首先 <code class=\"language-text\">dirty</code> 这个概念代表脏数据，说明这个数据需要重新调用用户传入的 <code class=\"language-text\">sum</code> 函数来求值了。我们暂且不管更新时候的逻辑，第一次在模板中读取到  <code class=\"language-text\">{{sum}}</code> 的时候它一定是 true，所以初始化就会经历一次求值。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">evaluate</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 调用 get 函数求值</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// 把 dirty 标记为 false</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dirty <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这个函数其实很清晰，它先求值，然后把 <code class=\"language-text\">dirty</code> 置为 false。</p>\n<p>再回头看看我们刚刚那段 <code class=\"language-text\">Object.defineProperty</code> 的逻辑，</p>\n<p>下次没有特殊情况再读取到 <code class=\"language-text\">sum</code> 的时候，发现 <code class=\"language-text\">dirty</code>是false了，是不是直接就返回 <code class=\"language-text\">watcher.value</code> 这个值就可以了，这其实就是<strong>计算属性缓存</strong>的概念。</p>\n<h3 id=\"更新\"><a href=\"#%E6%9B%B4%E6%96%B0\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>更新</h3>\n<p>初始化的流程讲完了，相信大家也对 <code class=\"language-text\">dirty</code> 和 <code class=\"language-text\">缓存</code> 有了个大概的概念（如果没有，再仔细回头看一看）。</p>\n<p>接下来就讲更新的流程，细化到本文的例子中，也就是 <code class=\"language-text\">count</code> 的更新到底是怎么触发 <code class=\"language-text\">sum</code> 在页面上的变更。</p>\n<p>首先回到刚刚提到的 <code class=\"language-text\">evalute</code> 函数里，也就是读取 <code class=\"language-text\">sum</code> 时发现是脏数据的时候做的求值操作。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">evaluate</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 调用 get 函数求值</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// 把 dirty 标记为 false</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dirty <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"deptarget-变更为-渲染watcher\"><a href=\"#deptarget-%E5%8F%98%E6%9B%B4%E4%B8%BA-%E6%B8%B2%E6%9F%93watcher\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dep.target 变更为 渲染watcher</h4>\n<p>这里进入 <code class=\"language-text\">this.get()</code>，首先要明确一点，在模板中读取 <code class=\"language-text\">{{ sum }}</code> 变量的时候，全局的 <code class=\"language-text\">Dep.target</code> 应该是 <code class=\"language-text\">渲染watcher</code>，这里不理解的话可以到我最开始提到的文章里去理解下。</p>\n<p>全局的 <code class=\"language-text\">Dep.target</code> 状态是用一个栈 <code class=\"language-text\">targetStack</code> 来保存，便于前进和回退 <code class=\"language-text\">Dep.target</code>，至于什么时候会回退，接下来的函数里就可以看到。</p>\n<div class=\"gatsby-highlight\" data-language=\"!\"><pre class=\"language-!\"><code class=\"language-!\">此时的 Dep.target 是 渲染watcher，targetStack 是 [ 渲染watcher ] 。</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">get</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">pushTarget</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">let</span> value\n  <span class=\"token keyword\">const</span> vm <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>vm\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    value <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>getter<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">,</span> vm<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">popTarget</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> value\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>首先刚进去就 <code class=\"language-text\">pushTarget</code>，也就是把 <code class=\"language-text\">计算watcher</code> 自身置为 <code class=\"language-text\">Dep.target</code>，等待收集依赖。</p>\n<p>执行完 <code class=\"language-text\">pushTarget(this)</code> 后，</p>\n<h4 id=\"deptarget-变更为-计算watcher\"><a href=\"#deptarget-%E5%8F%98%E6%9B%B4%E4%B8%BA-%E8%AE%A1%E7%AE%97watcher\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dep.target 变更为 计算watcher</h4>\n<div class=\"gatsby-highlight\" data-language=\"!\"><pre class=\"language-!\"><code class=\"language-!\">此时的 Dep.target 是 计算watcher，targetStack 是 [ 渲染watcher，计算watcher ] 。</code></pre></div>\n<p><code class=\"language-text\">getter</code> 函数，上一章的 watcher 形态里已经说明了，其实就是用户传入的 <code class=\"language-text\">sum</code> 函数。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这里在执行的时候，读取到了 <code class=\"language-text\">this.count</code>，注意它是一个响应式的属性，所以冥冥之中它们开始建立了千丝万缕的联系……</p>\n<p>这里会触发 <code class=\"language-text\">count</code> 的 <code class=\"language-text\">get</code> 劫持，简化一下</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 在闭包中，会保留对于 count 这个 key 所定义的 dep</span>\n<span class=\"token keyword\">const</span> dep <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 闭包中也会保留上一次 set 函数所设置的 val</span>\n<span class=\"token keyword\">let</span> val\n\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">get</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span> <span class=\"token function\">reactiveGetter</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> val\n    <span class=\"token comment\">// Dep.target 此时就是计算watcher</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Dep<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 收集依赖</span>\n      dep<span class=\"token punctuation\">.</span><span class=\"token function\">depend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> value\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>那么可以看出，<code class=\"language-text\">count</code> 会收集 <code class=\"language-text\">计算watcher</code> 作为依赖，具体怎么收集呢</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// dep.depend()</span>\n<span class=\"token function\">depend</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Dep<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Dep<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span><span class=\"token function\">addDep</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>其实这里是调用 <code class=\"language-text\">Dep.target.addDep(this)</code> 去收集，又绕回到 <code class=\"language-text\">计算watcher</code> 的 <code class=\"language-text\">addDep</code> 函数上去了，这其实主要是 Vue 内部做了一些去重的优化。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// watcher 的 addDep函数</span>\n<span class=\"token function\">addDep</span> <span class=\"token punctuation\">(</span>dep<span class=\"token punctuation\">:</span> Dep<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 这里做了一系列的去重操作 简化掉 </span>\n  \n  <span class=\"token comment\">// 这里会把 count 的 dep 也存在自身的 deps 上</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>deps<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>dep<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// 又带着 watcher 自身作为参数</span>\n  <span class=\"token comment\">// 回到 dep 的 addSub 函数了</span>\n  dep<span class=\"token punctuation\">.</span><span class=\"token function\">addSub</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>又回到 <code class=\"language-text\">dep</code> 上去了。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dep</span> <span class=\"token punctuation\">{</span>\n  subs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token function\">addSub</span> <span class=\"token punctuation\">(</span>sub<span class=\"token punctuation\">:</span> Watcher<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>subs<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>sub<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这样就保存了 <code class=\"language-text\">计算watcher</code> 作为 <code class=\"language-text\">count</code> 的 dep 里的依赖了。</p>\n<p>经历了这样的一个收集的流程后，此时的一些状态：</p>\n<p><code class=\"language-text\">sum 的计算watcher</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n    deps<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> count的dep <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    dirty<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 求值完了 所以是false</span>\n    value<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 1 + 1 = 2</span>\n    getter<span class=\"token punctuation\">:</span> ƒ <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    lazy<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">count的dep</code>: </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n    subs<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> sum的计算watcher <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>可以看出，计算属性的 watcher 和它所依赖的响应式值的 dep，它们之间互相保留了彼此，相依为命。</p>\n<p>此时求值结束，回到 <code class=\"language-text\">计算watcher</code> 的 <code class=\"language-text\">getter</code> 函数：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">get</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">pushTarget</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">let</span> value\n  <span class=\"token keyword\">const</span> vm <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>vm\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    value <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>getter<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">,</span> vm<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 此时执行到这里了</span>\n    <span class=\"token function\">popTarget</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> value\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>执行到了 <code class=\"language-text\">popTarget</code>，<code class=\"language-text\">计算watcher</code> 出栈。</p>\n<h4 id=\"deptarget-变更为-渲染watcher-1\"><a href=\"#deptarget-%E5%8F%98%E6%9B%B4%E4%B8%BA-%E6%B8%B2%E6%9F%93watcher-1\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dep.target 变更为 渲染watcher</h4>\n<div class=\"gatsby-highlight\" data-language=\"!\"><pre class=\"language-!\"><code class=\"language-!\">此时的 Dep.target 是 渲染watcher，targetStack 是 [ 渲染watcher ] 。</code></pre></div>\n<p>然后函数执行完毕，返回了 <code class=\"language-text\">2</code> 这个 value，此时对于 <code class=\"language-text\">sum</code> 属性的 <code class=\"language-text\">get</code> 访问还没结束。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">,</span> <span class=\"token string\">'sum'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> \n    <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// 此时函数执行到了这里</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Dep<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            watcher<span class=\"token punctuation\">.</span><span class=\"token function\">depend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">}</span>\n          <span class=\"token keyword\">return</span> watcher<span class=\"token punctuation\">.</span>value\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>此时的 <code class=\"language-text\">Dep.target</code> 当然是有值的，就是 <code class=\"language-text\">渲染watcher</code>，所以进入了 <code class=\"language-text\">watcher.depend()</code> 的逻辑，这一步<strong>相当关键</strong>。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// watcher.depend</span>\n<span class=\"token function\">depend</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>deps<span class=\"token punctuation\">.</span>length\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>deps<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">depend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>还记得刚刚的 <code class=\"language-text\">计算watcher</code> 的形态吗？它的 <code class=\"language-text\">deps</code> 里保存了 <code class=\"language-text\">count</code> 的 dep。</p>\n<p>也就是说，又会调用 <code class=\"language-text\">count</code> 上的 <code class=\"language-text\">dep.depend()</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dep</span> <span class=\"token punctuation\">{</span>\n  subs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  \n  <span class=\"token function\">depend</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Dep<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      Dep<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span><span class=\"token function\">addDep</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这次的 <code class=\"language-text\">Dep.target</code> 已经是 <code class=\"language-text\">渲染watcher</code> 了，所以这个 <code class=\"language-text\">count</code> 的 dep 又会把 <code class=\"language-text\">渲染watcher</code> 存放进自身的 <code class=\"language-text\">subs</code> 中。</p>\n<p><code class=\"language-text\">count的dep</code>: </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n    subs<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> sum的计算watcher，渲染watcher <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>那么来到了此题的重点，这时候 <code class=\"language-text\">count</code> 更新了，是如何去触发视图更新的呢？</p>\n<p>再回到 <code class=\"language-text\">count</code> 的响应式劫持逻辑里去：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 在闭包中，会保留对于 count 这个 key 所定义的 dep</span>\n<span class=\"token keyword\">const</span> dep <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 闭包中也会保留上一次 set 函数所设置的 val</span>\n<span class=\"token keyword\">let</span> val\n\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">set</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span> <span class=\"token function\">reactiveSetter</span> <span class=\"token punctuation\">(</span>newVal<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      val <span class=\"token operator\">=</span> newVal\n      <span class=\"token comment\">// 触发 count 的 dep 的 notify</span>\n      dep<span class=\"token punctuation\">.</span><span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>好，这里触发了我们刚刚精心准备的 <code class=\"language-text\">count</code> 的 dep 的 <code class=\"language-text\">notify</code> 函数，感觉离成功越来越近了。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dep</span> <span class=\"token punctuation\">{</span>\n  subs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  \n  <span class=\"token function\">notify</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> l <span class=\"token operator\">=</span> subs<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> l<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      subs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这里的逻辑就很简单了，把 <code class=\"language-text\">subs</code> 里保存的 watcher 依次去调用它们的 <code class=\"language-text\">update</code> 方法，也就是</p>\n<ol>\n<li>调用 <code class=\"language-text\">计算watcher</code> 的 update</li>\n<li>调用 <code class=\"language-text\">渲染watcher</code> 的 update</li>\n</ol>\n<p>拆解来看。</p>\n<h4 id=\"计算watcher-的-update\"><a href=\"#%E8%AE%A1%E7%AE%97watcher-%E7%9A%84-update\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>计算watcher 的 update</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">update</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lazy<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dirty <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>wtf，就这么一句话…… 没错，就仅仅是把 <code class=\"language-text\">计算watcher</code> 的 <code class=\"language-text\">dirty</code> 属性置为 true，静静的等待下次读取即可。</p>\n<h4 id=\"渲染watcher-的-update\"><a href=\"#%E6%B8%B2%E6%9F%93watcher-%E7%9A%84-update\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>渲染watcher 的 update</h4>\n<p>这里其实就是调用 <code class=\"language-text\">vm._update(vm._render())</code> 这个函数，重新根据 <code class=\"language-text\">render</code> 函数生成的 <code class=\"language-text\">vnode</code> 去渲染视图了。</p>\n<p>而在 <code class=\"language-text\">render</code> 的过程中，一定会访问到 <code class=\"language-text\">sum</code> 这个值，那么又回回到 <code class=\"language-text\">sum</code> 定义的 <code class=\"language-text\">get</code> 上：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> \n    <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> watcher <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_computedWatchers <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_computedWatchers<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>watcher<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// ✨上一步中 dirty 已经置为 true, 所以会重新求值</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>watcher<span class=\"token punctuation\">.</span>dirty<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            watcher<span class=\"token punctuation\">.</span><span class=\"token function\">evaluate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">}</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Dep<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            watcher<span class=\"token punctuation\">.</span><span class=\"token function\">depend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">}</span>\n          <span class=\"token comment\">// 最后返回计算出来的值</span>\n          <span class=\"token keyword\">return</span> watcher<span class=\"token punctuation\">.</span>value\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>由于上一步中的响应式属性更新，触发了 <code class=\"language-text\">计算 watcher</code> 的 <code class=\"language-text\">dirty</code> 更新为 true。 所以又会重新调用用户传入的 <code class=\"language-text\">sum</code> 函数计算出最新的值，页面上自然也就显示出了最新的值。</p>\n<p>至此为止，整个计算属性更新的流程就结束了。</p>\n<h2 id=\"缓存生效的情况\"><a href=\"#%E7%BC%93%E5%AD%98%E7%94%9F%E6%95%88%E7%9A%84%E6%83%85%E5%86%B5\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>缓存生效的情况</h2>\n<p>根据上面的总结，只有计算属性依赖的响应式值发生更新的时候，才会把 <code class=\"language-text\">dirty</code> 重置为 true，这样下次读取的时候才会发生真正的计算。</p>\n<p>这样的话，假设 <code class=\"language-text\">sum</code> 函数是一个用户定义的一个比较耗费时间的操作，优化就比较明显了。</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>app<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>change<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>{{sum}}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>changeOther<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>{{other}}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>./vue2.6.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\">\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    el<span class=\"token punctuation\">:</span> <span class=\"token string\">\"#app\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        count<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n        other<span class=\"token punctuation\">:</span> <span class=\"token string\">'Hello'</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    methods<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">change</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function\">changeOther</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>other <span class=\"token operator\">=</span> <span class=\"token string\">'ssh'</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    computed<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 非常耗时的计算属性</span>\n      <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">100000</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            i<span class=\"token operator\">--</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>在这个例子中，<code class=\"language-text\">other</code> 的值和计算属性没有任何关系，如果 <code class=\"language-text\">other</code> 的值触发更新的话，就会重新渲染视图，那么会读取到 <code class=\"language-text\">sum</code>，如果计算属性不做缓存的话，每次都要发生一次很耗费性能的没有必要的计算。</p>\n<p>所以，只有在 <code class=\"language-text\">count</code> 发生变化的时候，<code class=\"language-text\">sum</code> 才会重新计算，这是一个很巧妙的优化。</p>\n<h2 id=\"总结\"><a href=\"#%E6%80%BB%E7%BB%93\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>总结</h2>\n<p>2.6 版本计算属性更新的路径是这样的：</p>\n<ol>\n<li>响应式的值 <code class=\"language-text\">count</code> 更新</li>\n<li>同时通知 <code class=\"language-text\">computed watcher</code> 和 <code class=\"language-text\">渲染 watcher</code> 更新 </li>\n<li><code class=\"language-text\">omputed watcher</code> 把 dirty 设置为 true </li>\n<li>视图渲染读取到 computed 的值，由于 dirty 所以 <code class=\"language-text\">computed watcher</code> 重新求值。</li>\n</ol>\n<p>通过本篇文章，相信你可以完全理解计算属性的缓存到底是什么概念，在什么样的情况下才会生效了吧？</p>\n<p>对于缓存和不缓存的情况，分别是这样的流程：</p>\n<h3 id=\"不缓存：\"><a href=\"#%E4%B8%8D%E7%BC%93%E5%AD%98%EF%BC%9A\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>不缓存：</h3>\n<ol>\n<li><code class=\"language-text\">count</code> 改变，先通知到 <code class=\"language-text\">计算watcher</code> 更新，设置 <code class=\"language-text\">dirty = true</code> </li>\n<li>再通知到 <code class=\"language-text\">渲染watcher</code> 更新，视图重新渲染的时候去 <code class=\"language-text\">计算watcher</code> 中读取值，发现 <code class=\"language-text\">dirty</code> 是 true，重新执行用户传入的函数求值。</li>\n</ol>\n<h3 id=\"缓存：\"><a href=\"#%E7%BC%93%E5%AD%98%EF%BC%9A\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>缓存：</h3>\n<ol>\n<li><code class=\"language-text\">other</code> 改变，直接通知 <code class=\"language-text\">渲染watcher</code> 更新。</li>\n<li>视图重新渲染的时候去 <code class=\"language-text\">计算watcher</code> 中读取值，发现 <code class=\"language-text\">dirty</code> 为 false，直接用缓存值 <code class=\"language-text\">watcher.value</code>，不执行用户传入的函数求值。</li>\n</ol>\n<h2 id=\"展望\"><a href=\"#%E5%B1%95%E6%9C%9B\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>展望</h2>\n<p>事实上这种通过 <code class=\"language-text\">dirty</code> 标志位来实现计算属性缓存的方式，和 Vue3 中的实现原理是一致的。这可能也说明在各种需求和社区反馈的千锤百炼下，尤大目前认为这种方式是实现 computed 缓存的相对最优解了。</p>\n<p>如果对 Vue3 的 computed 实现感兴趣的同学，还可以看我的这篇文章，原理大同小异。只是收集的方式稍有变化。</p>\n<p><a href=\"https://juejin.im/post/5e2fdf29e51d45026866107d\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">深度解析：Vue3如何巧妙的实现强大的computed</a></p>\n<h2 id=\"️感谢大家\"><a href=\"#%EF%B8%8F%E6%84%9F%E8%B0%A2%E5%A4%A7%E5%AE%B6\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>❤️感谢大家</h2>\n<p>1.如果本文对你有帮助，就点个赞支持下吧，你的「赞」是我创作的动力。</p>\n<p>2.关注公众号「前端从进阶到入院」即可加我好友，我拉你进「前端进阶交流群」，大家一起共同交流和进步。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/4/5/17149cbcaa96ff26?w=910&#x26;h=436&#x26;f=jpeg&#x26;s=78195\"></p>","timeToRead":14,"frontmatter":{"title":"Vue 的计算属性真的会缓存吗？（原理揭秘）","date":"April 10, 2020","spoiler":""},"fields":{"slug":"/597722732/","langKey":"en"}}},"pageContext":{"slug":"/597722732/","previous":{"fields":{"slug":"/597005753/","langKey":"en","directoryName":"597005753"},"frontmatter":{"title":"驳《前端常见的Vue面试题目汇总》"}},"next":{"fields":{"slug":"/598849472/","langKey":"en","directoryName":"598849472"},"frontmatter":{"title":"Vue3 的响应式和以前有什么区别，Proxy 无敌？"}},"translations":[],"translatedLinks":[]}},"staticQueryHashes":["336482444"]}