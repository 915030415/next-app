{"componentChunkName":"component---src-templates-blog-post-js","path":"/818779553/","result":{"data":{"site":{"siteMetadata":{"title":"ssh的博客","author":"ssh"}},"markdownRemark":{"id":"564a9910-61df-5407-8683-5af8c51b33f1","html":"<p>在业务需求中，有时候我们需要基于 antd 之类的组件库定制很多功能，本文就以我自己遇到的业务需求为例，一步步实现和优化一个树状表格组件，这个组件会支持：</p>\n<ul>\n<li>✨ 每个层级<strong>缩进指示线</strong></li>\n<li>✨ 远程<strong>懒加载</strong>子节点</li>\n<li>✨ 每个层级支持<strong>分页</strong></li>\n</ul>\n<p>本系列分为两篇文章，这篇只是讲这些业务需求如何实现。</p>\n<p>而下一篇，我会讲解怎么给<strong>组件</strong>也设计一套简单的<strong>插件机制</strong>，来解决代码耦合，难以维护的问题。</p>\n<p>代码已经发布在 <a href=\"https://github.com/sl1673495/react-antd-treetable\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">react-antd-treetable</a>，欢迎 Star~</p>\n<h2 id=\"功能实现\"><a href=\"#%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>功能实现</h2>\n<h3 id=\"层级缩进线\"><a href=\"#%E5%B1%82%E7%BA%A7%E7%BC%A9%E8%BF%9B%E7%BA%BF\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>层级缩进线</h3>\n<p>antd 的 <a href=\"https://3x.ant.design/components/table-cn/#components-table-demo-dynamic-settings\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Table 组件</a> 默认是没有提供这个功能的，它只是支持了树状结构：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> treeData <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    function_name<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`React Tree Reconciliation`</span></span><span class=\"token punctuation\">,</span>\n    count<span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n    children<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        function_name<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`React Tree Reconciliation2`</span></span><span class=\"token punctuation\">,</span>\n        count<span class=\"token punctuation\">:</span> <span class=\"token number\">100</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>展示效果如下：</p>\n<p><img src=\"https://images.gitee.com/uploads/images/2021/0301/164843_ed628f6e_1087321.png\" alt=\"antd-table\" title=\"屏幕截图.png\"></p>\n<p>可以看出，在展示<strong>大量的函数堆栈</strong>的时候，没有缩进线就会很难受了，业务方也确实和我提过这个需求，可惜之前太忙了，就暂时放一边了。😁</p>\n<p>参考 VSCode 中的缩进线效果，可以发现，缩进线是和节点的层级紧密相关的。</p>\n<p><img src=\"https://images.gitee.com/uploads/images/2021/0301/165157_dd33ae27_1087321.png\" alt=\"vscode\" title=\"屏幕截图.png\"></p>\n<p>比如 <code class=\"language-text\">src</code> 目录对应的是第一级，那么它的子级 <code class=\"language-text\">client</code> 和 <code class=\"language-text\">node</code> 就只需要在 td 前面绘制一条垂直线，而 <code class=\"language-text\">node</code> 下的三个目录则绘制两条垂直线。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">第 1 层： | text\n第 2 层： | | text\n第 3 层： | | | text</code></pre></div>\n<p>只需要在自定义渲染单元格元素的时候，得到以下两个信息。</p>\n<ol>\n<li>当前节点的层级信息。</li>\n<li>当前节点的父节点是否是展开状态。</li>\n</ol>\n<p>所以思路就是对数据进行一次<strong>递归处理</strong>，把<strong>层级</strong>写在节点上，并且要把<strong>父节点的引用</strong>也写上，之后再通过传给 <code class=\"language-text\">Table</code> 的 <code class=\"language-text\">expandedRowKeys</code> 属性来维护表格的展开行数据。</p>\n<p>这里我是直接改写了原始数据，如果需要保证原始数据干净的话，也可以参考 React Fiber 的思路，构建一颗替身树进行数据写入，只要保留原始树节点的引用即可。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * 递归树的通用函数\n */</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">traverseTree</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  treeList<span class=\"token punctuation\">,</span>\n  childrenColumnName<span class=\"token punctuation\">,</span>\n  callback\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">traverse</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> parent <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> level <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>treeNode <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>treeNode<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">,</span> level<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>childrenColumnName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> next <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> treeNode<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">,</span> treeNode<span class=\"token punctuation\">,</span> level <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span>treeList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">rewriteTree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> dataSource <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">traverseTree</span><span class=\"token punctuation\">(</span>dataSource<span class=\"token punctuation\">,</span> childrenColumnName<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">,</span> level<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 记录节点的层级</span>\n    node<span class=\"token punctuation\">[</span><span class=\"token constant\">INTERNAL_LEVEL</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> level\n    <span class=\"token comment\">// 记录节点的父节点</span>\n    node<span class=\"token punctuation\">[</span><span class=\"token constant\">INTERNAL_PARENT</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> parent\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>之后利用 Table 组件提供的 <code class=\"language-text\">components</code> 属性，自定义渲染 <code class=\"language-text\">Cell</code> 组件，也就是 td 元素。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> components <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  body<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    cell<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>cellProps<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>TreeTableCell\n        <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>cellProps<span class=\"token punctuation\">}</span>\n        expandedRowKeys<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>expandedRowKeys<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>之后，在自定义渲染的 Cell 中，只需要获取两个信息，只需要根据层级和父节点的展开状态，来决定绘制几条垂直线即可。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> isParentExpanded <span class=\"token operator\">=</span> expandedRowKeys<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>\n  record<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">[</span><span class=\"token constant\">INTERNAL_PARENT</span><span class=\"token punctuation\">]</span><span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">[</span>rowKey<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 只有当前是展示指引线的列 且父节点是展开节点 才会展示缩进指引线</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dataIndex <span class=\"token operator\">!==</span> indentLineDataIndex <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>isParentExpanded<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>td className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>className<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>td<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 只要知道层级 就知道要在 td 中绘制几条垂直指引线 举例来说：</span>\n<span class=\"token comment\">// 第 2 层： | | text</span>\n<span class=\"token comment\">// 第 3 层： | | | text</span>\n<span class=\"token keyword\">const</span> level <span class=\"token operator\">=</span> record<span class=\"token punctuation\">[</span><span class=\"token constant\">INTERNAL_LEVEL</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">const</span> indentLines <span class=\"token operator\">=</span> <span class=\"token function\">renderIndentLines</span><span class=\"token punctuation\">(</span>level<span class=\"token punctuation\">)</span></code></pre></div>\n<p>这里的实现就不再赘述，直接通过绝对定位画几条垂直线，再通过对 <code class=\"language-text\">level</code> 进行循环时的下标 <code class=\"language-text\">index</code> 决定 <code class=\"language-text\">left</code> 的偏移值即可。</p>\n<p>效果如图所示：</p>\n<p><img src=\"https://images.gitee.com/uploads/images/2021/0301/170832_0c4380cd_1087321.png\" alt=\"缩进线\" title=\"屏幕截图.png\"></p>\n<h3 id=\"远程懒加载子节点\"><a href=\"#%E8%BF%9C%E7%A8%8B%E6%87%92%E5%8A%A0%E8%BD%BD%E5%AD%90%E8%8A%82%E7%82%B9\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>远程懒加载子节点</h3>\n<p>这个需求就需要用比较 hack 的手段实现了，首先观察了一下 Table 组件的逻辑，只有在有 <code class=\"language-text\">children</code> 的子节点上才会展示「展开更多」的图标。</p>\n<p>所以思路就是，和后端约定一个字段比如 <code class=\"language-text\">has_next</code>，之后预处理数据的时候先遍历这些节点，加上一个假的占位 <code class=\"language-text\">children</code>。</p>\n<p>之后在点击展开的时候，把节点上的这个假 <code class=\"language-text\">children</code> 删除掉，并且把通过改写节点上一个特殊的 <code class=\"language-text\">is_loading</code> 字段，在自定义渲染 Icon 的代码中判断，并且展示 <code class=\"language-text\">Loading Icon</code>。</p>\n<p>又来到递归树的逻辑中，我们加入这样的一段代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">rewriteTree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> dataSource <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">traverseTree</span><span class=\"token punctuation\">(</span>dataSource<span class=\"token punctuation\">,</span> childrenColumnName<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">,</span> level<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">[</span>hasNextKey<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 树表格组件要求 next 必须是非空数组才会渲染「展开按钮」</span>\n      <span class=\"token comment\">// 所以这里手动添加一个占位节点数组</span>\n      <span class=\"token comment\">// 后续在 onExpand 的时候再加载更多节点 并且替换这个数组</span>\n      node<span class=\"token punctuation\">[</span>childrenColumnName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token function\">generateInternalLoadingNode</span><span class=\"token punctuation\">(</span>rowKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>之后我们要实现一个 <code class=\"language-text\">forceUpdate</code> 函数，驱动组件强制渲染：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>_<span class=\"token punctuation\">,</span> forceUpdate<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>再来到 <code class=\"language-text\">onExpand</code> 的逻辑中：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> onExpand <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>expanded<span class=\"token punctuation\">,</span> record<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>expanded <span class=\"token operator\">&amp;&amp;</span> record<span class=\"token punctuation\">[</span>hasNextKey<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> onLoadMore<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 标识节点的 loading</span>\n    record<span class=\"token punctuation\">[</span><span class=\"token constant\">INTERNAL_IS_LOADING</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n    <span class=\"token comment\">// 移除用来展示展开箭头的假 children</span>\n    record<span class=\"token punctuation\">[</span>childrenColumnName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n    <span class=\"token function\">forceUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> childList <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">onLoadMore</span><span class=\"token punctuation\">(</span>record<span class=\"token punctuation\">)</span>\n    record<span class=\"token punctuation\">[</span>hasNextKey<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n    <span class=\"token function\">addChildList</span><span class=\"token punctuation\">(</span>record<span class=\"token punctuation\">,</span> childList<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  onExpandProp<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>expanded<span class=\"token punctuation\">,</span> record<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">addChildList</span><span class=\"token punctuation\">(</span>record<span class=\"token punctuation\">,</span> childList<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  record<span class=\"token punctuation\">[</span>childrenColumnName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> childList\n  record<span class=\"token punctuation\">[</span><span class=\"token constant\">INTERNAL_IS_LOADING</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n  <span class=\"token function\">rewriteTree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    dataSource<span class=\"token punctuation\">:</span> childList<span class=\"token punctuation\">,</span>\n    parentNode<span class=\"token punctuation\">:</span> record\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">forceUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这里 <code class=\"language-text\">onLoadMore</code> 是用户传入的获取更多子节点的方法，</p>\n<p>流程是这样的：</p>\n<ol>\n<li>节点展开时，先给节点写入一个正在加载的标志，然后把子数据重置为空。这样虽然节点会变成展开状态，但是不会渲染子节点，然后强制渲染。</li>\n<li>在加载完成后赋值了新的子节点 <code class=\"language-text\">record[childrenColumnName] = childList</code> 后，我们又通过 <code class=\"language-text\">forceUpdate</code> 去强制组件重渲染，展示出新的子节点。</li>\n</ol>\n<p>需要注意，我们递归树加入逻辑的所有逻辑都在 <code class=\"language-text\">rewriteTree</code> 中，所以对于加入的新的子节点，也需要通过这个函数递归一遍，加入 <code class=\"language-text\">level</code>, <code class=\"language-text\">parent</code> 等信息。</p>\n<p>新加入的节点的 <code class=\"language-text\">level</code> 需要根据父节点的 <code class=\"language-text\">level</code> 相加得出，不能从 1 开始，否则渲染的缩进线就乱掉了，所以这个函数需要改写，加入 <code class=\"language-text\">parentNode</code> 父节点参数，遍历时写入的 <code class=\"language-text\">level</code> 都要加上父节点已有的 <code class=\"language-text\">level</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">rewriteTree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  dataSource<span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 在动态追加子树节点的时候 需要手动传入 parent 引用</span>\n  parentNode <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 在动态追加子树节点的时候 需要手动传入父节点的 level 否则 level 会从 1 开始计算</span>\n  <span class=\"token keyword\">const</span> startLevel <span class=\"token operator\">=</span> parentNode<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">[</span><span class=\"token constant\">INTERNAL_LEVEL</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token number\">0</span>\n\n  <span class=\"token function\">traverseTree</span><span class=\"token punctuation\">(</span>dataSource<span class=\"token punctuation\">,</span> childrenColumnName<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">,</span> level<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      parent <span class=\"token operator\">=</span> parent <span class=\"token operator\">||</span> parentNode<span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// 记录节点的层级</span>\n      node<span class=\"token punctuation\">[</span><span class=\"token constant\">INTERNAL_LEVEL</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> level <span class=\"token operator\">+</span> startLevel<span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// 记录节点的父节点</span>\n      node<span class=\"token punctuation\">[</span><span class=\"token constant\">INTERNAL_PARENT</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">[</span>hasNextKey<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 树表格组件要求 next 必须是非空数组才会渲染「展开按钮」</span>\n      <span class=\"token comment\">// 所以这里手动添加一个占位节点数组</span>\n      <span class=\"token comment\">// 后续在 onExpand 的时候再加载更多节点 并且替换这个数组</span>\n      node<span class=\"token punctuation\">[</span>childrenColumnName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token function\">generateInternalLoadingNode</span><span class=\"token punctuation\">(</span>rowKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>自定义渲染 <code class=\"language-text\">Loading Icon</code> 就很简单了：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 传入给 Table 组件的 expandIcon 属性即可</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">TreeTableExpandIcon</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  expanded<span class=\"token punctuation\">,</span>\n  expandable<span class=\"token punctuation\">,</span>\n  onExpand<span class=\"token punctuation\">,</span>\n  record\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>record<span class=\"token punctuation\">[</span><span class=\"token constant\">INTERNAL_IS_LOADING</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>IconLoading style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>iconStyle<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>功能完成，看一下效果：</p>\n<p><img src=\"https://images.gitee.com/uploads/images/2021/0301/174811_ef09a28c_1087321.gif\" alt=\"远程懒加载\" title=\"Kapture 2021-03-01 at 17.47.56.gif\"></p>\n<h2 id=\"每个层级支持分页\"><a href=\"#%E6%AF%8F%E4%B8%AA%E5%B1%82%E7%BA%A7%E6%94%AF%E6%8C%81%E5%88%86%E9%A1%B5\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>每个层级支持分页</h2>\n<p>这个功能和上一个功能也有点类似，需要在 <code class=\"language-text\">rewriteTree</code> 的时候根据外部传入的是否开启分页的字段，在符合条件的时候往子节点数组的末尾加入一个<strong>占位 Pagination 节点</strong>。</p>\n<p>之后在 <code class=\"language-text\">column</code> 的 <code class=\"language-text\">render</code> 中改写这个节点的渲染逻辑。</p>\n<p>改写 <code class=\"language-text\">record</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">rewriteTree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  dataSource<span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 在动态追加子树节点的时候 需要手动传入 parent 引用</span>\n  parentNode <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 在动态追加子树节点的时候 需要手动传入父节点的 level 否则 level 会从 1 开始计算</span>\n  <span class=\"token keyword\">const</span> startLevel <span class=\"token operator\">=</span> parentNode<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">[</span><span class=\"token constant\">INTERNAL_LEVEL</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token number\">0</span>\n\n  <span class=\"token function\">traverseTree</span><span class=\"token punctuation\">(</span>dataSource<span class=\"token punctuation\">,</span> childrenColumnName<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">,</span> level<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 加载更多逻辑</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">[</span>hasNextKey<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 树表格组件要求 next 必须是非空数组才会渲染「展开按钮」</span>\n      <span class=\"token comment\">// 所以这里手动添加一个占位节点数组</span>\n      <span class=\"token comment\">// 后续在 onExpand 的时候再加载更多节点 并且替换这个数组</span>\n      node<span class=\"token punctuation\">[</span>childrenColumnName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token function\">generateInternalLoadingNode</span><span class=\"token punctuation\">(</span>rowKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 分页逻辑</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>childrenPagination<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> totalKey <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> childrenPagination<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> nodeChildren <span class=\"token operator\">=</span> node<span class=\"token punctuation\">[</span>childrenColumnName<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>lastChildNode<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nodeChildren<span class=\"token punctuation\">.</span>slice<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// 渲染分页器，先加入占位节点</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n        node<span class=\"token punctuation\">[</span>totalKey<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> nodeChildren<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">&amp;&amp;</span>\n        <span class=\"token comment\">// 防止重复添加分页器占位符</span>\n        <span class=\"token operator\">!</span><span class=\"token function\">isInternalPaginationNode</span><span class=\"token punctuation\">(</span>lastChildNode<span class=\"token punctuation\">,</span> rowKey<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        nodeChildren<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>push<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token function\">generateInternalPaginationNode</span><span class=\"token punctuation\">(</span>rowKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>改写 <code class=\"language-text\">columns</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">rewriteColumns</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/**\n   * 根据占位符 渲染分页组件\n   */</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">rewritePaginationRender</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>column<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    column<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">render</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">ColumnRender</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">,</span> record<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token function\">isInternalPaginationNode</span><span class=\"token punctuation\">(</span>record<span class=\"token punctuation\">,</span> rowKey<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>\n        dataIndex <span class=\"token operator\">===</span> indentLineDataIndex\n      <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>Pagination <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">return</span> render<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">,</span> record<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span><span class=\"token operator\">?</span> text\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  columns<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>column<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">rewritePaginationRender</span><span class=\"token punctuation\">(</span>column<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>来看一下实现的分页效果：\n<img src=\"https://images.gitee.com/uploads/images/2021/0301/181948_efc006a8_1087321.gif\" alt=\"分页\" title=\"Kapture 2021-03-01 at 18.19.38.gif\"></p>\n<h2 id=\"重构和优化\"><a href=\"#%E9%87%8D%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>重构和优化</h2>\n<p>随着编写功能的增多，逻辑被耦合在 Antd Table 的各个回调函数之中，</p>\n<ul>\n<li><strong>指引线</strong>的逻辑分散在 <code class=\"language-text\">rewriteColumns</code>, <code class=\"language-text\">components</code>中。</li>\n<li><strong>分页</strong>的逻辑被分散在 <code class=\"language-text\">rewriteColumns</code> 和 <code class=\"language-text\">rewriteTree</code> 中。</li>\n<li><strong>加载更多</strong>的逻辑被分散在 <code class=\"language-text\">rewriteTree</code> 和 <code class=\"language-text\">onExpand</code> 中</li>\n</ul>\n<p>至此，组件的代码行数也已经来到了 <code class=\"language-text\">300</code> 行，大概看一下代码的结构，已经是比较混乱了：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">TreeTable</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>rawProps<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">rewriteTree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 🎈加载更多逻辑</span>\n    <span class=\"token comment\">// 🔖 分页逻辑</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">rewriteColumns</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 🔖 分页逻辑</span>\n    <span class=\"token comment\">// 🏁 缩进线逻辑</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> components <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 🏁 缩进线逻辑</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> onExpand <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>expanded<span class=\"token punctuation\">,</span> record<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 🎈 加载更多逻辑</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>Table <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>有没有一种机制，可以让代码<strong>按照功能点聚合</strong>，而不是散落在各个函数中？</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 🔖 分页逻辑</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">usePaginationPlugin</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 🎈 加载更多逻辑</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useLazyloadPlugin</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 🏁 缩进线逻辑</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useIndentLinePlugin</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">TreeTable</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>rawProps<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">usePaginationPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">useLazyloadPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">useIndentLinePlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>Table <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>没错，就是很像 <code class=\"language-text\">VueCompositionAPI</code> 和 <code class=\"language-text\">React Hook</code> 在逻辑解耦方面所做的改进，但是在这个回调函数的写法形态下，好像不太容易做到？</p>\n<p>下一篇文章，我会聊聊如何利用自己设计的<strong>插件机制</strong>来优化这个组件的耦合代码。</p>\n<h2 id=\"感谢大家\"><a href=\"#%E6%84%9F%E8%B0%A2%E5%A4%A7%E5%AE%B6\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>感谢大家</h2>\n<p>欢迎关注 ssh，前端潮流趋势、原创面试热点文章应有尽有。</p>\n<p>记得关注后加我好友，我会不定期分享前端知识，行业信息。2021 陪你一起度过。</p>\n<p><img src=\"https://user-images.githubusercontent.com/23615778/108619258-76929d80-745e-11eb-90bf-023abec85d80.png\" alt=\"image\"></p>","timeToRead":9,"frontmatter":{"title":"给  Antd Table 组件编写缩进指引线、子节点懒加载等功能","date":"March 01, 2021","spoiler":""},"fields":{"slug":"/818779553/","langKey":"en"}}},"pageContext":{"slug":"/818779553/","previous":{"fields":{"slug":"/818217827/","langKey":"en","directoryName":"818217827"},"frontmatter":{"title":"TypeScript 中你不一定知道的 top types，在用 any 之前先试试 unknown？"}},"next":{"fields":{"slug":"/819971559/","langKey":"en","directoryName":"819971559"},"frontmatter":{"title":"如何编写神奇的「插件机制」，优化基于 Antd Table 封装表格的混乱代码"}},"translations":[],"translatedLinks":[]}},"staticQueryHashes":["336482444"]}