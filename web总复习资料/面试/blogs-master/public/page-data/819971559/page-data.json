{"componentChunkName":"component---src-templates-blog-post-js","path":"/819971559/","result":{"data":{"site":{"siteMetadata":{"title":"ssh的博客","author":"ssh"}},"markdownRemark":{"id":"1d54feca-9102-5387-a78c-64a09d32a795","html":"<h2 id=\"前言\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>最近在一个业务需求中，我通过在 Antd Table 提供的回调函数等机制中编写代码，实现了这些功能：</p>\n<ul>\n<li>✨ 每个层级<strong>缩进指示线</strong></li>\n<li>✨ 远程<strong>懒加载</strong>子节点</li>\n<li>✨ 每个层级支持<strong>分页</strong></li>\n</ul>\n<p>最后实现的效果大概是这样的：</p>\n<p><img src=\"https://images.gitee.com/uploads/images/2021/0301/181948_efc006a8_1087321.gif\" alt=\"最终效果\" title=\"Kapture 2021-03-01 at 18.19.38.gif\"></p>\n<p>功能虽然已经实现了，也记录在了 <a href=\"https://github.com/sl1673495/blogs/issues/77\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">给 Antd Table 组件编写缩进指引线、子节点懒加载等功能</a> 这篇文章中。不过我个人感觉意义不大，对功能代码不感兴趣的同学完全可以跳过。</p>\n<p>这篇文章我想聊聊我在这个需求中，对<strong>代码解耦</strong>，为组件编写<strong>插件机制</strong>的一些思考。</p>\n<p>代码已经发布在 <a href=\"https://github.com/sl1673495/react-antd-treetable\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">react-antd-treetable</a>，欢迎 Star~</p>\n<h2 id=\"重构思路\"><a href=\"#%E9%87%8D%E6%9E%84%E6%80%9D%E8%B7%AF\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>重构思路</h2>\n<p>随着编写功能的增多，逻辑被耦合在 Antd Table 的各个回调函数之中，</p>\n<ul>\n<li><strong>指引线</strong>的逻辑分散在 <code class=\"language-text\">rewriteColumns</code>, <code class=\"language-text\">components</code>中。</li>\n<li><strong>分页</strong>的逻辑被分散在 <code class=\"language-text\">rewriteColumns</code> 和 <code class=\"language-text\">rewriteTree</code> 中。</li>\n<li><strong>加载更多</strong>的逻辑被分散在 <code class=\"language-text\">rewriteTree</code> 和 <code class=\"language-text\">onExpand</code> 中</li>\n</ul>\n<p>至此，组件的代码行数也已经来到了 <code class=\"language-text\">300</code> 行，大概看一下代码的结构，已经是比较混乱了：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">TreeTable</span> <span class=\"token operator\">=</span> rawProps <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">rewriteTree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 🎈加载更多逻辑</span>\n    <span class=\"token comment\">// 🔖 分页逻辑</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">rewriteColumns</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 🔖 分页逻辑</span>\n    <span class=\"token comment\">// 🏁 缩进线逻辑</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> components <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 🏁 缩进线逻辑</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> onExpand <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>expanded<span class=\"token punctuation\">,</span> record<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 🎈 加载更多逻辑</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>Table <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>这时候缺点就暴露出来了，当我想要改动或者删减其中一个功能的时候变得异常痛苦，经常在各个函数之间跳转查找。</p>\n<p>有没有一种机制，可以让代码<strong>按照功能点聚合</strong>，而不是散落在各个函数中？</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 🔖 分页逻辑</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">usePaginationPlugin</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 🎈 加载更多逻辑</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useLazyloadPlugin</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 🏁 缩进线逻辑</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useIndentLinePlugin</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">TreeTable</span> <span class=\"token operator\">=</span> rawProps <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">usePaginationPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useLazyloadPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useIndentLinePlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>Table <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>没错，就是很像 <code class=\"language-text\">VueCompositionAPI</code> 和 <code class=\"language-text\">React Hook</code> 在逻辑解耦方面所做的改进，但是在这个回调函数的写法形态下，好像不太容易做到？</p>\n<p>这时候，我回想到社区中一些开源框架提供的<strong>插件机制</strong>，好像就可以在<strong>不深入源码</strong>的情况下注入各个<strong>回调时机</strong>的用户逻辑。</p>\n<p>比如 <a href=\"https://cn.vitejs.dev/guide/api-plugin.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Vite 的插件</a>、<a href=\"https://webpack.docschina.org/concepts/plugins/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Webpack 的插件</a> 甚至大家很熟悉的 <a href=\"https://cn.vuejs.org/v2/api/#Vue-use\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Vue.use()</a>，它们本质上就是对外暴露出一些内部的时机和属性，让用户去写一些代码来介入框架运行的各个时机之中。</p>\n<p>那么，我们是否可以考虑把「处理每个节点、<code class=\"language-text\">column</code>、每次 <code class=\"language-text\">onExpand</code>」 的时机暴露出去，这样让用户也可以<strong>介入这些流程</strong>，去改写一些属性，调用一些内部方法，以此实现上面的几个功能呢？</p>\n<p>我们设计插件机制，想要实现这两个目标：</p>\n<ol>\n<li><strong>逻辑解耦</strong>，把每个小功能的代码<strong>整合</strong>到插件文件中去，不和组件耦合起来，增加可维护性。</li>\n<li><strong>用户共建</strong>，内部使用的话方便<strong>同事</strong>共建，开源后方便<strong>社区</strong>共建，当然这要求你编写的插件机制足够完善，文档足够友好。</li>\n</ol>\n<p>不过插件也会带来一些缺点，设计一套完善的插件机制也是非常复杂的，像 Webpack、Rollup、Redux 的插件机制都有设计的非常精良的地方可以参考学习。</p>\n<p>接下来，我会试着实现的一个<strong>最简化版</strong>的插件系统。</p>\n<h2 id=\"源码\"><a href=\"#%E6%BA%90%E7%A0%81\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>源码</h2>\n<p>首先，设计一下插件的接口：</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">TreeTablePlugin</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">:</span> ResolvedProps<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">:</span> TreeTablePluginContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * 可以访问到每一个 column 并修改\n     */</span>\n    onColumn<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>column<span class=\"token punctuation\">:</span> ColumnProps<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/**\n     * 可以访问到每一个节点数据\n     * 在初始化或者新增子节点以后都会执行\n     */</span>\n    onRecord<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>record<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/**\n     * 节点展开的回调函数\n     */</span>\n    onExpand<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>expanded<span class=\"token punctuation\">,</span> record<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/**\n     * 自定义 Table 组件\n     */</span>\n    components<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> TableProps<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token string\">'components'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">TreeTablePluginContext</span> <span class=\"token punctuation\">{</span>\n  forceUpdate<span class=\"token punctuation\">:</span> React<span class=\"token punctuation\">.</span>DispatchWithoutAction<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">replaceChildList</span><span class=\"token punctuation\">(</span>record<span class=\"token punctuation\">,</span> childList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n  expandedRowKeys<span class=\"token punctuation\">:</span> TableProps<span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token string\">'expandedRowKeys'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  setExpandedRowKeys<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span> undefined<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>我把插件设计成一个<strong>函数</strong>，这样每次执行都可以拿到最新的 <code class=\"language-text\">props</code> 和 <code class=\"language-text\">context</code>。</p>\n<p><code class=\"language-text\">context</code> 其实就是组件内一些依赖上下文的工具函数等等，比如 <code class=\"language-text\">forceUpdate</code>, <code class=\"language-text\">replaceChildList</code> 等函数都可以挂在上面。</p>\n<p>接下来，由于插件可能有多个，而且内部可能会有一些解析流程，所以我设计一个运行插件的 hook 函数 <code class=\"language-text\">usePluginContainer</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">usePluginContainer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  props<span class=\"token punctuation\">:</span> ResolvedProps<span class=\"token punctuation\">,</span>\n  context<span class=\"token punctuation\">:</span> TreeTablePluginContext\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> plugins<span class=\"token punctuation\">:</span> rawPlugins <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> plugins <span class=\"token operator\">=</span> rawPlugins<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>usePlugin <span class=\"token operator\">=></span> usePlugin<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> container <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">onColumn</span><span class=\"token punctuation\">(</span>column<span class=\"token punctuation\">:</span> ColumnProps<span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> plugin <span class=\"token keyword\">of</span> plugins<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        plugin<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>onColumn<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>column<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">onRecord</span><span class=\"token punctuation\">(</span>record<span class=\"token punctuation\">,</span> parentRecord<span class=\"token punctuation\">,</span> level<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> plugin <span class=\"token keyword\">of</span> plugins<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        plugin<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>onRecord<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>record<span class=\"token punctuation\">,</span> parentRecord<span class=\"token punctuation\">,</span> level<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">onExpand</span><span class=\"token punctuation\">(</span>expanded<span class=\"token punctuation\">,</span> record<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> plugin <span class=\"token keyword\">of</span> plugins<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        plugin<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>onExpand<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>expanded<span class=\"token punctuation\">,</span> record<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">/**\n     * 暂时只做 components 的 deepmerge\n     * 不处理自定义组件的冲突 后定义的 Cell 会覆盖前者\n     */</span>\n    <span class=\"token function\">mergeComponents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> components<span class=\"token punctuation\">:</span> TableProps<span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token string\">'components'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>components <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> plugin <span class=\"token keyword\">of</span> plugins<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        components <span class=\"token operator\">=</span> deepmerge<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>components<span class=\"token punctuation\">,</span> plugin<span class=\"token punctuation\">.</span>components <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">return</span> components<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> container<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>目前的流程很简单，只是把每个 <code class=\"language-text\">plugin</code> 函数调用一下，然后提供对外的包装接口。<code class=\"language-text\">mergeComponent</code> 使用<a href=\"https://github.com/TehShrike/deepmerge\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">deepmerge</a> 这个库来合并用户传入的 <code class=\"language-text\">components</code> 和 插件中的 <code class=\"language-text\">components</code>，暂时不做冲突处理。</p>\n<p>接着就可以在组件中调用这个函数，生成 <code class=\"language-text\">pluginContainer</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> TreeTable <span class=\"token operator\">=</span>  React<span class=\"token punctuation\">.</span><span class=\"token function\">forwardRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>props， ref<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>_<span class=\"token punctuation\">,</span> forceUpdate<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>expandedRowKeys<span class=\"token punctuation\">,</span> setExpandedRowKeys<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> useState<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> pluginContext <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    forceUpdate<span class=\"token punctuation\">,</span>\n    replaceChildList<span class=\"token punctuation\">,</span>\n    expandedRowKeys<span class=\"token punctuation\">,</span>\n    setExpandedRowKeys\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 对外暴露工具方法给用户使用</span>\n  <span class=\"token function\">useImperativeHandle</span><span class=\"token punctuation\">(</span>ref<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    replaceChildList<span class=\"token punctuation\">,</span>\n    setNodeLoading<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 这里拿到了 pluginContainer</span>\n  <span class=\"token keyword\">const</span> pluginContainer <span class=\"token operator\">=</span> <span class=\"token function\">usePluginContainer</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token operator\">...</span>props<span class=\"token punctuation\">,</span>\n      plugins<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token operator\">...</span>props<span class=\"token punctuation\">.</span>plugins<span class=\"token punctuation\">,</span>\n        usePaginationPlugin<span class=\"token punctuation\">,</span>\n        useLazyloadPlugin<span class=\"token punctuation\">,</span>\n        useIndentLinePlugin<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    pluginContext\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>之后，在各个流程的相应位置，都通过 <code class=\"language-text\">pluginContainer</code> 执行相应的钩子函数即可：</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> TreeTable <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">forwardRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">,</span> ref<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 省略上一部分代码……</span>\n\n  <span class=\"token comment\">// 这里拿到了 pluginContainer</span>\n  <span class=\"token keyword\">const</span> pluginContainer <span class=\"token operator\">=</span> <span class=\"token function\">usePluginContainer</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token operator\">...</span>props<span class=\"token punctuation\">,</span>\n      plugins<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token operator\">...</span>props<span class=\"token punctuation\">.</span>plugins<span class=\"token punctuation\">,</span>\n        usePaginationPlugin<span class=\"token punctuation\">,</span>\n        useLazyloadPlugin<span class=\"token punctuation\">,</span>\n        useIndentLinePlugin<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    pluginContext\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 递归遍历整个数据 调用钩子</span>\n  <span class=\"token keyword\">const</span> rewriteTree <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    dataSource<span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 在动态追加子树节点的时候 需要手动传入 parent 引用</span>\n    parentNode <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    pluginContainer<span class=\"token punctuation\">.</span><span class=\"token function\">onRecord</span><span class=\"token punctuation\">(</span>parentNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">traverseTree</span><span class=\"token punctuation\">(</span>dataSource<span class=\"token punctuation\">,</span> childrenColumnName<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">,</span> level<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 这里执行插件的 onRecord 钩子</span>\n      pluginContainer<span class=\"token punctuation\">.</span><span class=\"token function\">onRecord</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">,</span> level<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> rewrittenColumns <span class=\"token operator\">=</span> columns<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>rawColumn <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//  这里把浅拷贝过后的 column 暴露出去</span>\n    <span class=\"token comment\">//  防止污染原始值</span>\n    <span class=\"token keyword\">const</span> column <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> rawColumn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    pluginContainer<span class=\"token punctuation\">.</span><span class=\"token function\">onColumn</span><span class=\"token punctuation\">(</span>column<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> column<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> onExpand <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>expanded<span class=\"token punctuation\">,</span> record<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 这里执行插件的 onExpand 钩子</span>\n    pluginContainer<span class=\"token punctuation\">.</span><span class=\"token function\">onExpand</span><span class=\"token punctuation\">(</span>expanded<span class=\"token punctuation\">,</span> record<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 这里获取合并后的 components 传递给 Table</span>\n  <span class=\"token keyword\">const</span> components <span class=\"token operator\">=</span> pluginContainer<span class=\"token punctuation\">.</span><span class=\"token function\">mergeComponents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>之后，我们就可以把之前<strong>分页相关</strong>的逻辑直接抽象成 <code class=\"language-text\">usePaginationPlugin</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> usePaginationPlugin<span class=\"token punctuation\">:</span> <span class=\"token function-variable function\">TreeTablePlugin</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  props<span class=\"token punctuation\">:</span> ResolvedProps<span class=\"token punctuation\">,</span>\n  context<span class=\"token punctuation\">:</span> TreeTablePluginContext\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> forceUpdate<span class=\"token punctuation\">,</span> replaceChildList <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> context<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n    childrenPagination<span class=\"token punctuation\">,</span>\n    childrenColumnName<span class=\"token punctuation\">,</span>\n    rowKey<span class=\"token punctuation\">,</span>\n    indentLineDataIndex<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handlePagination</span> <span class=\"token operator\">=</span> node <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 先加入渲染分页器占位节点</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">rewritePaginationRender</span> <span class=\"token operator\">=</span> column <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 改写 column 的 render</span>\n    <span class=\"token comment\">// 渲染分页器</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    onRecord<span class=\"token punctuation\">:</span> handlePagination<span class=\"token punctuation\">,</span>\n    onColumn<span class=\"token punctuation\">:</span> rewritePaginationRender<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>也许机智的你已经发现，这里的插件是以 <code class=\"language-text\">use</code> 开头的，这是<strong>自定义 hook</strong>的标志。</p>\n<p>没错，它既是一个插件，同时也是一个 <strong>自定义 Hook</strong>。所以你可以使用 <strong>React Hook 的一切能力</strong>，同时也可以在插件中引入各种社区的第三方 Hook 来加强能力。</p>\n<p>这是因为我们是在 <code class=\"language-text\">usePluginContainer</code> 中通过函数调用执行各个 <code class=\"language-text\">usePlugin</code>，完全符合 React Hook 的调用规则。</p>\n<p>而<strong>懒加载节点</strong>相关的逻辑也可以抽象成 <code class=\"language-text\">useLazyloadPlugin</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> useLazyloadPlugin<span class=\"token punctuation\">:</span> <span class=\"token function-variable function\">TreeTablePlugin</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  props<span class=\"token punctuation\">:</span> ResolvedProps<span class=\"token punctuation\">,</span>\n  context<span class=\"token punctuation\">:</span> TreeTablePluginContext\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> childrenColumnName<span class=\"token punctuation\">,</span> rowKey<span class=\"token punctuation\">,</span> hasNextKey<span class=\"token punctuation\">,</span> onLoadMore <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> replaceChildList<span class=\"token punctuation\">,</span> expandedRowKeys<span class=\"token punctuation\">,</span> setExpandedRowKeys <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> context<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 处理懒加载占位节点逻辑</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleNextLevelLoader</span> <span class=\"token operator\">=</span> node <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> onExpand <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>expanded<span class=\"token punctuation\">,</span> record<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>expanded <span class=\"token operator\">&amp;&amp;</span> record<span class=\"token punctuation\">[</span>hasNextKey<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> onLoadMore<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 处理懒加载逻辑</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    onRecord<span class=\"token punctuation\">:</span> handleNextLevelLoader<span class=\"token punctuation\">,</span>\n    onExpand<span class=\"token punctuation\">:</span> onExpand<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>而缩进线相关的逻辑则抽取成 <code class=\"language-text\">useIndentLinePlugin</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> useIndentLinePlugin<span class=\"token punctuation\">:</span> <span class=\"token function-variable function\">TreeTablePlugin</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  props<span class=\"token punctuation\">:</span> ResolvedProps<span class=\"token punctuation\">,</span>\n  context<span class=\"token punctuation\">:</span> TreeTablePluginContext\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> expandedRowKeys <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> context<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onColumn</span> <span class=\"token operator\">=</span> column <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    column<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onCell</span> <span class=\"token operator\">=</span> record <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        record<span class=\"token punctuation\">,</span>\n        <span class=\"token operator\">...</span>column<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> components <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    body<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      cell<span class=\"token punctuation\">:</span> cellProps <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>IndentCell\n          <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>cellProps<span class=\"token punctuation\">}</span>\n          expandedRowKeys<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>expandedRowKeys<span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    components<span class=\"token punctuation\">,</span>\n    onColumn<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>至此，主函数被精简到 <code class=\"language-text\">150</code> 行左右，新功能相关的函数全部被移到插件目录中去了，无论是想要新增或者删减、开关功能都变的非常容易。</p>\n<p>此时的目录结构：</p>\n<p><img src=\"https://images.gitee.com/uploads/images/2021/0302/202947_5e9f5a4f_1087321.png\" alt=\"目录结构\" title=\"屏幕截图.png\"></p>\n<h2 id=\"总结\"><a href=\"#%E6%80%BB%E7%BB%93\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>总结</h2>\n<p>本系列通过讲述扩展 <code class=\"language-text\">Table</code> 组件的如下功能：</p>\n<ul>\n<li>✨ 每个层级<strong>缩进指示线</strong></li>\n<li>✨ 远程<strong>懒加载</strong>子节点</li>\n<li>✨ 每个层级支持<strong>分页</strong> </li>\n</ul>\n<p>以及开发过程中出现代码的耦合，难以维护问题，进而延伸探索<strong>插件机制</strong>在组件中的设计和使用，虽然本文设计的插件还是最简陋的版本，但是原理大致上如此，希望能够对你有所启发。</p>\n<p>代码已经发布在 <a href=\"https://github.com/sl1673495/react-antd-treetable\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">react-antd-treetable</a>，欢迎 Star~</p>\n<h2 id=\"感谢大家\"><a href=\"#%E6%84%9F%E8%B0%A2%E5%A4%A7%E5%AE%B6\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>感谢大家</h2>\n<p>欢迎关注 ssh，前端潮流趋势、原创面试热点文章应有尽有。</p>\n<p>记得关注后加我好友，我会不定期分享前端知识，行业信息。2021 陪你一起度过。</p>\n<p><img src=\"https://user-images.githubusercontent.com/23615778/108619258-76929d80-745e-11eb-90bf-023abec85d80.png\" alt=\"image\"></p>","timeToRead":8,"frontmatter":{"title":"如何编写神奇的「插件机制」，优化基于 Antd Table 封装表格的混乱代码","date":"March 02, 2021","spoiler":""},"fields":{"slug":"/819971559/","langKey":"en"}}},"pageContext":{"slug":"/819971559/","previous":{"fields":{"slug":"/818779553/","langKey":"en","directoryName":"818779553"},"frontmatter":{"title":"给  Antd Table 组件编写缩进指引线、子节点懒加载等功能"}},"next":{"fields":{"slug":"/830777874/","langKey":"en","directoryName":"830777874"},"frontmatter":{"title":"打破 React Hook 必须按顺序、不能在条件语句中调用的枷锁"}},"translations":[],"translatedLinks":[]}},"staticQueryHashes":["336482444"]}