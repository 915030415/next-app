{"componentChunkName":"component---src-templates-blog-post-js","path":"/383686801/","result":{"data":{"site":{"siteMetadata":{"title":"ssh的博客","author":"ssh"}},"markdownRemark":{"id":"1aa3fb96-f3e8-5d05-aee9-b29ef3c9cba1","html":"<p>vue在视图更新的时候是异步更新，这个很多人已经知道了，这么做的好处有很多，今天我们就来看看vue是如何调度这个异步更新队列去优化性能的。</p>\n<p>src/core/util/next-tick.js</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/* @flow */</span>\n<span class=\"token comment\">/* globals MessageChannel */</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> noop <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'shared/util'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> handleError <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./error'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> isIOS<span class=\"token punctuation\">,</span> isNative <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./env'</span>\n\n<span class=\"token keyword\">const</span> callbacks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">let</span> pending <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">flushCallbacks</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  pending <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n  <span class=\"token keyword\">const</span> copies <span class=\"token operator\">=</span> callbacks<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  callbacks<span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> copies<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    copies<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Here we have async deferring wrappers using both microtasks and (macro) tasks.</span>\n<span class=\"token comment\">// In &lt; 2.4 we used microtasks everywhere, but there are some scenarios where</span>\n<span class=\"token comment\">// microtasks have too high a priority and fire in between supposedly</span>\n<span class=\"token comment\">// sequential events (e.g. #4521, #6690) or even between bubbling of the same</span>\n<span class=\"token comment\">// event (#6566). However, using (macro) tasks everywhere also has subtle problems</span>\n<span class=\"token comment\">// when state is changed right before repaint (e.g. #6813, out-in transitions).</span>\n<span class=\"token comment\">// Here we use microtask by default, but expose a way to force (macro) task when</span>\n<span class=\"token comment\">// needed (e.g. in event handlers attached by v-on).</span>\n<span class=\"token keyword\">let</span> microTimerFunc\n<span class=\"token keyword\">let</span> macroTimerFunc\n<span class=\"token keyword\">let</span> useMacroTask <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n\n<span class=\"token comment\">// Determine (macro) task defer implementation.</span>\n<span class=\"token comment\">// Technically setImmediate should be the ideal choice, but it's only available</span>\n<span class=\"token comment\">// in IE. The only polyfill that consistently queues the callback after all DOM</span>\n<span class=\"token comment\">// events triggered in the same loop is by using MessageChannel.</span>\n<span class=\"token comment\">/* istanbul ignore if */</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> setImmediate <span class=\"token operator\">!==</span> <span class=\"token string\">'undefined'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isNative</span><span class=\"token punctuation\">(</span>setImmediate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">macroTimerFunc</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setImmediate</span><span class=\"token punctuation\">(</span>flushCallbacks<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> MessageChannel <span class=\"token operator\">!==</span> <span class=\"token string\">'undefined'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token function\">isNative</span><span class=\"token punctuation\">(</span>MessageChannel<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n  <span class=\"token comment\">// PhantomJS</span>\n  MessageChannel<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'[object MessageChannelConstructor]'</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> channel <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MessageChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> port <span class=\"token operator\">=</span> channel<span class=\"token punctuation\">.</span>port2\n  channel<span class=\"token punctuation\">.</span>port1<span class=\"token punctuation\">.</span>onmessage <span class=\"token operator\">=</span> flushCallbacks\n  <span class=\"token function-variable function\">macroTimerFunc</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    port<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* istanbul ignore next */</span>\n  <span class=\"token function-variable function\">macroTimerFunc</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>flushCallbacks<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Determine microtask defer implementation.</span>\n<span class=\"token comment\">/* istanbul ignore next, $flow-disable-line */</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> Promise <span class=\"token operator\">!==</span> <span class=\"token string\">'undefined'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isNative</span><span class=\"token punctuation\">(</span>Promise<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function-variable function\">microTimerFunc</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    p<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>flushCallbacks<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// in problematic UIWebViews, Promise.then doesn't completely break, but</span>\n    <span class=\"token comment\">// it can get stuck in a weird state where callbacks are pushed into the</span>\n    <span class=\"token comment\">// microtask queue but the queue isn't being flushed, until the browser</span>\n    <span class=\"token comment\">// needs to do some other work, e.g. handle a timer. Therefore we can</span>\n    <span class=\"token comment\">// \"force\" the microtask queue to be flushed by adding an empty timer.</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isIOS<span class=\"token punctuation\">)</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>noop<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// fallback to macro</span>\n  microTimerFunc <span class=\"token operator\">=</span> macroTimerFunc\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Wrap a function so that if any code inside triggers state change,\n * the changes are queued using a (macro) task instead of a microtask.\n */</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">withMacroTask</span> <span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">:</span> Function<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Function <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> fn<span class=\"token punctuation\">.</span>_withTask <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">_withTask</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    useMacroTask <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n    <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> fn<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span>\n    useMacroTask <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n    <span class=\"token keyword\">return</span> res\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">nextTick</span> <span class=\"token punctuation\">(</span>cb<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> Function<span class=\"token punctuation\">,</span> ctx<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> Object<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> _resolve\n  callbacks<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cb<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        cb<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">handleError</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">,</span> <span class=\"token string\">'nextTick'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_resolve<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">_resolve</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pending<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    pending <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>useMacroTask<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">macroTimerFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">microTimerFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// $flow-disable-line</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>cb <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> Promise <span class=\"token operator\">!==</span> <span class=\"token string\">'undefined'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span>resolve <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      _resolve <span class=\"token operator\">=</span> resolve\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>首先这个文件的开头定义了两个全局变量</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> callbacks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">let</span> pending <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span></code></pre></div>\n<p>callbacks用来存放我们需要异步执行的函数队列，\npending用来标记是否已经命令callbacks在下个tick全部执行，防止多次调用。</p>\n<h3 id=\"入口\"><a href=\"#%E5%85%A5%E5%8F%A3\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>入口</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">nextTick</span> <span class=\"token punctuation\">(</span>cb<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> Function<span class=\"token punctuation\">,</span> ctx<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> Object<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> _resolve\n  callbacks<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cb<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        cb<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">handleError</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">,</span> <span class=\"token string\">'nextTick'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_resolve<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">_resolve</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pending<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    pending <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>useMacroTask<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">macroTimerFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">microTimerFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// $flow-disable-line</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>cb <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> Promise <span class=\"token operator\">!==</span> <span class=\"token string\">'undefined'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span>resolve <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      _resolve <span class=\"token operator\">=</span> resolve\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>我们在外部调用都是nextTick(() => { // doSth })\n这样子去使用， 把一个cb函数传入nextTick函数中，\nnextTick函数首先</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">callbacks<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cb<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        cb<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">handleError</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">,</span> <span class=\"token string\">'nextTick'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_resolve<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">_resolve</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>把我们的cb函数包装了一层，做了判断，这是为了nextTick可以用then方法，我们就暂且当做直接把cb函数push进callbacks队列吧。</p>\n<p>我们需要知道的是microTask是在同步方法完成的末尾去执行， macroTask则是直接是到下一个task了，task之间又可能会包含浏览器的重渲染，setTimeout默认的4ms延迟等等…从性能和时效性来看都是microTask更为优先。</p>\n<p>关于macroTask和microTask的区别不是本文的重点，如果有需要的小伙伴可以去查阅一下浏览器的eventLoop相关的知识点。</p>\n<p>随后如果pending的标志位还没有置为true，就把pending置为true，\n并且开始根据useMacroTask这个标志判断 nextTick是通过macroTask实现还是microTask实现，\n并且去调用这个task，这样在下一个tick就会去把callbacks里的方法全部执行。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pending<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    pending <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>useMacroTask<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">macroTimerFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">microTimerFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"判断macrotask和microtask该用什么api\"><a href=\"#%E5%88%A4%E6%96%ADmacrotask%E5%92%8Cmicrotask%E8%AF%A5%E7%94%A8%E4%BB%80%E4%B9%88api\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>判断macroTask和microTask该用什么api</h3>\n<p>回到这个文件的上半部分 </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> microTimerFunc\n<span class=\"token keyword\">let</span> macroTimerFunc\n<span class=\"token keyword\">let</span> useMacroTask <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span></code></pre></div>\n<p>首先定义了3个全局变量， 可以看到useMacroTask默认为false，接下来就要开始根据浏览器的api兼容性判断，用什么来实现microTimerFunc和macroTimerFunc</p>\n<p>接下来vue开始判断如何实现macroTimerFunc</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> setImmediate <span class=\"token operator\">!==</span> <span class=\"token string\">'undefined'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isNative</span><span class=\"token punctuation\">(</span>setImmediate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">macroTimerFunc</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setImmediate</span><span class=\"token punctuation\">(</span>flushCallbacks<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> MessageChannel <span class=\"token operator\">!==</span> <span class=\"token string\">'undefined'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token function\">isNative</span><span class=\"token punctuation\">(</span>MessageChannel<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n  <span class=\"token comment\">// PhantomJS</span>\n  MessageChannel<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'[object MessageChannelConstructor]'</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> channel <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MessageChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> port <span class=\"token operator\">=</span> channel<span class=\"token punctuation\">.</span>port2\n  channel<span class=\"token punctuation\">.</span>port1<span class=\"token punctuation\">.</span>onmessage <span class=\"token operator\">=</span> flushCallbacks\n  <span class=\"token function-variable function\">macroTimerFunc</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    port<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* istanbul ignore next */</span>\n  <span class=\"token function-variable function\">macroTimerFunc</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>flushCallbacks<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这段方法就是判断macroTask优先去使用setImmediate， 其次是MessageChannel，最次是setTimeout。</p>\n<p>接下来去判断microTask</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> Promise <span class=\"token operator\">!==</span> <span class=\"token string\">'undefined'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isNative</span><span class=\"token punctuation\">(</span>Promise<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function-variable function\">microTimerFunc</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    p<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>flushCallbacks<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isIOS<span class=\"token punctuation\">)</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>noop<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  microTimerFunc <span class=\"token operator\">=</span> macroTimerFunc\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>microTask只有Promise一个选项，如果浏览器没有提供promise的api 就只能降级为上面判断的macroTimerFunc了。</p>\n<h3 id=\"在下个tick执行异步队列\"><a href=\"#%E5%9C%A8%E4%B8%8B%E4%B8%AAtick%E6%89%A7%E8%A1%8C%E5%BC%82%E6%AD%A5%E9%98%9F%E5%88%97\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>在下个tick执行异步队列</h3>\n<p>无论是microTask还是macroTask 传入的方法都是flushCallbacks，那这个肯定就是执行callbacks的方法了，我们来看看这个方法的定义</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">flushCallbacks</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  pending <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n  <span class=\"token keyword\">const</span> copies <span class=\"token operator\">=</span> callbacks<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  callbacks<span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> copies<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    copies<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这个方法很简短，\n把pendding置为false，把callbacks拷贝一份并且把callbacks清空\n这是为了在nextTick的方法里再次调用nextTick，能够新开一个异步队列，\n然后循环这个拷贝callbacks里的函数， 一次性执行完毕，</p>\n<p>vue的异步队列调度就是这样实现的，\n希望在大家在工作中也能运用这种思想， 把影响性能而且能合并的方法异步合并执行。</p>","timeToRead":5,"frontmatter":{"title":"Vue源码学习 nextTick","date":"November 23, 2018","spoiler":""},"fields":{"slug":"/383686801/","langKey":"en"}}},"pageContext":{"slug":"/383686801/","previous":{"fields":{"slug":"/381488634/","langKey":"en","directoryName":"381488634"},"frontmatter":{"title":"cube-ui源码学习 swipe组件"}},"next":{"fields":{"slug":"/383707716/","langKey":"en","directoryName":"383707716"},"frontmatter":{"title":"关于如何触发浏览器重绘的一些尝试。"}},"translations":[],"translatedLinks":[]}},"staticQueryHashes":["336482444"]}