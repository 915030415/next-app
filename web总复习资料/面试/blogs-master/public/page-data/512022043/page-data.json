{"componentChunkName":"component---src-templates-blog-post-js","path":"/512022043/","result":{"data":{"site":{"siteMetadata":{"title":"ssh的博客","author":"ssh"}},"markdownRemark":{"id":"8c215b76-8941-562c-adc0-5f3d54ea2bac","html":"<p>大家都用过Vue-CLI创建vue应用，在开发的时候我们修改了vue文件，保存了文件，浏览器上就自动更新出我们写的组件内容，非常的顺滑流畅，大大提高了开发效率。想知道这背后是怎么实现的吗，其实代码并不复杂。  </p>\n<p>这个功能的实现底层用了<a href=\"https://github.com/vuejs/vue-hot-reload-api\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">vue-hot-load-api</a>这个库，得益于vue的良好设计，热更新的实现总共就一个js文件，200行代码，绰绰有余。  </p>\n<p>而在这个库里涉及到的技巧又非常适合我们去深入了解vue内部的一些机制，所以赶快来和我一起学习吧。</p>\n<h2 id=\"提要\"><a href=\"#%E6%8F%90%E8%A6%81\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>提要</h2>\n<p>本文单纯的从<code class=\"language-text\">vue-hot-load-api</code>这个库出发，在浏览器的环境运行Vue的热更新示例，主要测试的组件是普通的vue组件而不是functional等特殊组件，以最简单的流程搞懂热更新的原理。<br>\n在源码解析中贴出的代码会省略掉一些不太相关的流程，更便于理解。</p>\n<h2 id=\"示例\"><a href=\"#%E7%A4%BA%E4%BE%8B\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>示例</h2>\n<p>学习一个库当然还是先从示例看起，github页面上的示例结合了webpack的一些机制，有点偏离本文的重点，所以我简化了一个例子，先给大家饱饱眼福，使用起来就是这么简单。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> api <span class=\"token keyword\">from</span> <span class=\"token string\">'vue-hot-reload-api'</span>\n<span class=\"token keyword\">import</span> Vue <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span>\n\n<span class=\"token comment\">// 初始化</span>\napi<span class=\"token punctuation\">.</span><span class=\"token function\">install</span><span class=\"token punctuation\">(</span>Vue<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 建立一个vue组件</span>\n<span class=\"token keyword\">const</span> appOptions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  render<span class=\"token punctuation\">:</span> h <span class=\"token operator\">=></span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 建立一个id -> vue组件映射</span>\n<span class=\"token comment\">// my-app是这个组件的唯一id</span>\napi<span class=\"token punctuation\">.</span><span class=\"token function\">createRecord</span><span class=\"token punctuation\">(</span><span class=\"token string\">'my-app'</span><span class=\"token punctuation\">,</span> appOptions<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span>appOptions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">$mount</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#app'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 2秒后热更新这个组件</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  api<span class=\"token punctuation\">.</span><span class=\"token function\">rerender</span><span class=\"token punctuation\">(</span><span class=\"token string\">'my-app'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    render<span class=\"token punctuation\">:</span> h <span class=\"token operator\">=></span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"解析\"><a href=\"#%E8%A7%A3%E6%9E%90\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>解析</h2>\n<h3 id=\"从github仓库示例入手\"><a href=\"#%E4%BB%8Egithub%E4%BB%93%E5%BA%93%E7%A4%BA%E4%BE%8B%E5%85%A5%E6%89%8B\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>从github仓库示例入手</h3>\n<p>进入了这个github仓库以后，最先开始看的肯定是Readme的里的示例，在看示例的时候作者给出的注释就非常重要了，他会标注出每一个重要的环节。并且我们要结合自己的一些经验排除掉和这个库无关的代码。（在这个示例中，webpack的相关代码就可以先不去过多关注）</p>\n<p>第一步需要调用<code class=\"language-text\">install</code>方法，传入Vue构造函数，根据注释来看，这一步是要知道这个库与Vue版本之间是否兼容。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token comment\">// make the API aware of the Vue that you are using.</span>\n  <span class=\"token comment\">// also checks compatibility.</span>\n  api<span class=\"token punctuation\">.</span><span class=\"token function\">install</span><span class=\"token punctuation\">(</span>Vue<span class=\"token punctuation\">)</span></code></pre></div>\n<p>接下来的这段注释告诉我们，每个需要热更新的组件选项对象，我们都需要为它建立一个独一无二的id，并且这段代码需要在初始化的时候完成。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>初始化<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// for each component option object to be hot-reloaded,</span>\n    <span class=\"token comment\">// you need to create a record for it with a unique id.</span>\n    <span class=\"token comment\">// do this once on startup.</span>\n    api<span class=\"token punctuation\">.</span><span class=\"token function\">createRecord</span><span class=\"token punctuation\">(</span><span class=\"token string\">'very-unique-id'</span><span class=\"token punctuation\">,</span> myComponentOptions<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>最后就是激动人心的热更新时间了，<br>\n根据注释来看，这个库的使用分为两种情况。</p>\n<ul>\n<li><code class=\"language-text\">rerender</code> 只有template或者render函改变的情况下使用。</li>\n<li><code class=\"language-text\">reload</code> 如果template或者render为改变，则这个函数需要调用reload方法先销毁然后重新创建（包括它的子组件）。</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token comment\">// if a component has only its template or render function changed,</span>\n    <span class=\"token comment\">// you can force a re-render for all its active instances without</span>\n    <span class=\"token comment\">// destroying/re-creating them. This keeps all current app state intact.</span>\n    api<span class=\"token punctuation\">.</span><span class=\"token function\">rerender</span><span class=\"token punctuation\">(</span><span class=\"token string\">'very-unique-id'</span><span class=\"token punctuation\">,</span> myComponentOptions<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// --- OR ---</span>\n\n    <span class=\"token comment\">// if a component has non-template/render options changed,</span>\n    <span class=\"token comment\">// it needs to be fully reloaded. This will destroy and re-create all its</span>\n    <span class=\"token comment\">// active instances (and their children).</span>\n    api<span class=\"token punctuation\">.</span><span class=\"token function\">reload</span><span class=\"token punctuation\">(</span><span class=\"token string\">'very-unique-id'</span><span class=\"token punctuation\">,</span> myComponentOptions<span class=\"token punctuation\">)</span></code></pre></div>\n<p>从这个简单的示例里面可以看出，这个库的核心流程就是：</p>\n<ol>\n<li><code class=\"language-text\">api.install</code> 检测兼容性。</li>\n<li><code class=\"language-text\">api.createRecord</code> 为组件对象通过一个独一无二的id建立一个记录。</li>\n<li><code class=\"language-text\">api.rerender</code> 或<code class=\"language-text\">api.reload</code> 进行组件的热更新。</li>\n</ol>\n<p>什么，Readme的示例到此就结束了？这个very-unique-id到底是个什么东西，myComponentOptions又是什么样的。  </p>\n<p>因为这个仓库可能并不是面向广大开发者的，所以它的文档写的非常的简略。其实看完了这个简短的示例，大家肯定还是一脸懵逼的。  </p>\n<p>在看一个你没有熟练使用的库的源码的时候，其实还有一个很关键的步骤，那就是看测试用例。</p>\n<h3 id=\"探索测试用例\"><a href=\"#%E6%8E%A2%E7%B4%A2%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>探索测试用例</h3>\n<p><a href=\"https://github.com/vuejs/vue-hot-reload-api/blob/master/test/test.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">测试用例</a>  </p>\n<p>上面我们总结出两个关键api <code class=\"language-text\">rerender</code> 和 <code class=\"language-text\">reload</code> 之后，就带着目的性的去看测试用例。  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> Vue <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'vue'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> api <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../src'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 初始化</span>\napi<span class=\"token punctuation\">.</span><span class=\"token function\">install</span><span class=\"token punctuation\">(</span>Vue<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 这个方法接受id和组件选项对象，</span>\n<span class=\"token comment\">// 通过createRecord去记录组件</span>\n<span class=\"token comment\">// 然后返回一个vue组件实例。</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">prepare</span> <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> Comp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  api<span class=\"token punctuation\">.</span><span class=\"token function\">createRecord</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> Comp<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    render<span class=\"token punctuation\">:</span> h <span class=\"token operator\">=></span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span>Comp<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"rerender用例\"><a href=\"#rerender%E7%94%A8%E4%BE%8B\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>rerender用例</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> id0 <span class=\"token operator\">=</span> <span class=\"token string\">'rerender: mounted'</span>\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span>id0<span class=\"token punctuation\">,</span> done <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  \n  <span class=\"token comment\">// 用'rerender: mounted'作为这个组件对象的id，</span>\n  <span class=\"token comment\">// 这个组件的内容应该是 &lt;div>foo&lt;/div></span>\n  <span class=\"token comment\">// 调用$mount生成dom节点</span>\n  <span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">prepare</span><span class=\"token punctuation\">(</span>id0<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    render<span class=\"token punctuation\">:</span> h <span class=\"token operator\">=></span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">$mount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  \n  <span class=\"token comment\">// $el就是组件生成的dom元素，期望textContent文字内容为foo</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span>textContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// rerender 后dom节点变成 &lt;div>bar&lt;/div></span>\n  api<span class=\"token punctuation\">.</span><span class=\"token function\">rerender</span><span class=\"token punctuation\">(</span>id0<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    render<span class=\"token punctuation\">:</span> h <span class=\"token operator\">=></span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  \n  <span class=\"token comment\">// 通过nextTick保证dom节点已经更新</span>\n  <span class=\"token comment\">// 期望textContent文字内容为bar</span>\n  Vue<span class=\"token punctuation\">.</span><span class=\"token function\">nextTick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span>textContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bar'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h4 id=\"reload用例\"><a href=\"#reload%E7%94%A8%E4%BE%8B\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>reload用例</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> id1 <span class=\"token operator\">=</span> <span class=\"token string\">'reload: mounted'</span>\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span>id1<span class=\"token punctuation\">,</span> done <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 通过一个count来计数</span>\n  <span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  \n  <span class=\"token comment\">// app组件会在created的时候让count + 1</span>\n  <span class=\"token comment\">// destroyed的时候让count - 1</span>\n  <span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">prepare</span><span class=\"token punctuation\">(</span>id1<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">created</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      count<span class=\"token operator\">++</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">destroyed</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      count<span class=\"token operator\">--</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    data<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> msg<span class=\"token punctuation\">:</span> <span class=\"token string\">'foo'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">render</span> <span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>msg<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">$mount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// 确保内容正确</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span>textContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// 确保created周期执行 此时的count是1</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 调用created 传入新组件的created时 count会-1</span>\n  api<span class=\"token punctuation\">.</span><span class=\"token function\">reload</span><span class=\"token punctuation\">(</span>id1<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">created</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      count<span class=\"token operator\">--</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    data<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> msg<span class=\"token punctuation\">:</span> <span class=\"token string\">'bar'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">render</span> <span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>msg<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  \n  Vue<span class=\"token punctuation\">.</span><span class=\"token function\">nextTick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 确保内容正确</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span>textContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bar'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 在reload之前 count是1</span>\n    <span class=\"token comment\">// 调用reload之后 会先调用前一个组件的destory生命周期 此时count是0</span>\n    <span class=\"token comment\">// 接下来调用新组建的created生命周期 此时count是-1</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>具体流程已经在注释里分析了，果然和示例代码的注释里写的一样，而且现在我们也更清楚这个api到底该怎么用了。</p>\n<p>总结一个最简单的可用demo</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> api <span class=\"token keyword\">from</span> <span class=\"token string\">'vue-hot-reload-api'</span>\n<span class=\"token keyword\">import</span> Vue <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span>\n\n<span class=\"token comment\">// 初始化</span>\napi<span class=\"token punctuation\">.</span><span class=\"token function\">install</span><span class=\"token punctuation\">(</span>Vue<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> appOptions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  render<span class=\"token punctuation\">:</span> h <span class=\"token operator\">=></span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\napi<span class=\"token punctuation\">.</span><span class=\"token function\">createRecord</span><span class=\"token punctuation\">(</span><span class=\"token string\">'my-app'</span><span class=\"token punctuation\">,</span> appOptions<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span>appOptions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">$mount</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#app'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  api<span class=\"token punctuation\">.</span><span class=\"token function\">rerender</span><span class=\"token punctuation\">(</span><span class=\"token string\">'my-app'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    render<span class=\"token punctuation\">:</span> h <span class=\"token operator\">=></span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>这个demo（<a href=\"https://github.com/sl1673495/vue-hot-reload-demo\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">源码</a>）是直接在浏览器可用的，效果如下：\n<img src=\"https://user-gold-cdn.xitu.io/2019/10/24/16dfce575a505f3a?w=376&#x26;h=76&#x26;f=gif&#x26;s=3199\" alt=\"效果\"></p>\n<h3 id=\"源码分析\"><a href=\"#%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>源码分析</h3>\n<p><a href=\"https://github.com/vuejs/vue-hot-reload-api/blob/master/src/index.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">源码地址</a></p>\n<h4 id=\"全局变量\"><a href=\"#%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>全局变量</h4>\n<p>进入js文件的入口，首先定义了一些变量</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Vue构造函数</span>\n<span class=\"token keyword\">let</span> Vue <span class=\"token comment\">// late bind</span>\n<span class=\"token comment\">// Vue版本</span>\n<span class=\"token keyword\">let</span> version\n<span class=\"token comment\">// createRecord方法保存id -> 组件映射关系的对象</span>\n<span class=\"token keyword\">const</span> map <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> window <span class=\"token operator\">!==</span> <span class=\"token string\">'undefined'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 将map对象存储在window上</span>\n  window<span class=\"token punctuation\">.</span>__VUE_HOT_MAP__ <span class=\"token operator\">=</span> map\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 是否已经安装过</span>\n<span class=\"token keyword\">let</span> installed <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n<span class=\"token comment\">// 这个变量暂时没用</span>\n<span class=\"token keyword\">let</span> isBrowserify <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n<span class=\"token comment\">// 初始化生命周期的名字 默认是Vue的beforeCreate生命周期</span>\n<span class=\"token keyword\">let</span> initHookName <span class=\"token operator\">=</span> <span class=\"token string\">'beforeCreate'</span></code></pre></div>\n<p>其实看到window对象的出现，我们就已经可以确定这个api可以在浏览器端调用。  </p>\n<h4 id=\"install\"><a href=\"#install\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>install</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">exports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">install</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>vue<span class=\"token punctuation\">,</span> browserify<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 如果安装过了就不再重复安装</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>installed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">}</span>\n  installed <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n  \n  <span class=\"token comment\">// 兼容es modules模块</span>\n  Vue <span class=\"token operator\">=</span> vue<span class=\"token punctuation\">.</span>__esModule <span class=\"token operator\">?</span> vue<span class=\"token punctuation\">.</span><span class=\"token keyword\">default</span> <span class=\"token punctuation\">:</span> vue\n  <span class=\"token comment\">// 把vue的版本如2.6.3分隔成[2, 6, 3] 这样的数组</span>\n  version <span class=\"token operator\">=</span> Vue<span class=\"token punctuation\">.</span>version<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>Number<span class=\"token punctuation\">)</span>\n  isBrowserify <span class=\"token operator\">=</span> browserify\n\n  <span class=\"token comment\">// compat with &lt; 2.0.0-alpha.7</span>\n  <span class=\"token comment\">// 兼容2.0.0-alpha.7以下版本</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Vue<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>_lifecycleHooks<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'init'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    initHookName <span class=\"token operator\">=</span> <span class=\"token string\">'init'</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 只有Vue在2.0以上的版本才支持这个库。</span>\n  exports<span class=\"token punctuation\">.</span>compatible <span class=\"token operator\">=</span> version<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> <span class=\"token number\">2</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>exports<span class=\"token punctuation\">.</span>compatible<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span>\n      <span class=\"token string\">'[HMR] You are using a version of vue-hot-reload-api that is '</span> <span class=\"token operator\">+</span>\n        <span class=\"token string\">'only compatible with Vue.js core ^2.0.0.'</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>可以看出install方法很简单，就是帮你看一下Vue的版本是否在2.0以上，确认一下兼容性，关于初始化生命周期，在这篇文章里我们就不考虑2.0.0-alpha.7以下版本，可以认为这个库的初始化工作就是在beforeCreate这个生命周期进行。  </p>\n<h4 id=\"createrecord\"><a href=\"#createrecord\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>createRecord</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * Create a record for a hot module, which keeps track of its constructor\n * and instances\n *\n * @param {String} id\n * @param {Object} options\n */</span>\n\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">createRecord</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 如果已经存储过了就return</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 关键流程 下一步解析</span>\n  <span class=\"token function\">makeOptionsHot</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span>\n  \n  <span class=\"token comment\">// 将记录存储在map中</span>\n  <span class=\"token comment\">// instances变量应该不难猜出是vue的实例对象。</span>\n  map<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    options<span class=\"token punctuation\">:</span> options<span class=\"token punctuation\">,</span>\n    instances<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这一步在把id和对应的options对象存进map后，就没做啥了，关键步骤肯定在于<code class=\"language-text\">makeOptionsHot</code>这个方法。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * Make a Component options object hot.\n * 让一个组件对象变得性感...哦不，是支持热更新。\n *\n * @param {String} id\n * @param {Object} options\n */</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">makeOptionsHot</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// options 就是我们传入的组件对象</span>\n    <span class=\"token comment\">// initHookName 就是'beforeCreate'</span>\n    <span class=\"token function\">injectHook</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">,</span> initHookName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 在这个函数内部</span>\n      <span class=\"token comment\">// this已经是vue的实例对象了</span>\n      <span class=\"token comment\">// 想象一下平时写vue在生命周期里调用this</span>\n      <span class=\"token keyword\">const</span> record <span class=\"token operator\">=</span> map<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>record<span class=\"token punctuation\">.</span>Ctor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 把组件的构造函数赋值给record的Ctor属性。</span>\n        record<span class=\"token punctuation\">.</span>Ctor <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>constructor\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token comment\">// 在instances里存储这个实例。</span>\n      record<span class=\"token punctuation\">.</span>instances<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 在组件销毁的时候把上面存储的instance删除掉。</span>\n    <span class=\"token function\">injectHook</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">,</span> <span class=\"token string\">'beforeDestroy'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> instances <span class=\"token operator\">=</span> map<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>instances\n      instances<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>instances<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 往生命周期里注入某个方法</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">injectHook</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> hook<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> existing <span class=\"token operator\">=</span> options<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span>\n  options<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> existing\n    <span class=\"token operator\">?</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>existing<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> existing<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>hook<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>existing<span class=\"token punctuation\">,</span> hook<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>hook<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>看完了这几个函数以后，我们对createRecord应该有个清晰的认识了。<br>\n比如上面我们的例子中这段代码</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> appOptions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  render<span class=\"token punctuation\">:</span> h <span class=\"token operator\">=></span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\napi<span class=\"token punctuation\">.</span><span class=\"token function\">createRecord</span><span class=\"token punctuation\">(</span><span class=\"token string\">'my-app'</span><span class=\"token punctuation\">,</span> appOptions<span class=\"token punctuation\">)</span></code></pre></div>\n<ol>\n<li>\n<p>在map中创建一个记录，这个记录有<code class=\"language-text\">options</code>字段也就是上面传入的组件对象，还有<code class=\"language-text\">instances</code>用于记录活动组件的实例，<code class=\"language-text\">Ctor</code>用来记录组件的构造函数。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// map</span>\n<span class=\"token punctuation\">{</span>\nmy<span class=\"token operator\">-</span>app<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    options<span class=\"token punctuation\">:</span> appOptions<span class=\"token punctuation\">,</span>\n    instances<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    Ctor<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>在appOptions中，混入生命周期方法beforeCreate，在组件的这个生命周期中，把组件自身的示例push到map里对应instances数组中，并且记录自己的构造函数在Ctor字段上。\nbeforeCreate执行完了以后的map对象长这样。\n<img src=\"https://user-gold-cdn.xitu.io/2019/10/24/16dfd2dd9b0301df?w=628&#x26;h=328&#x26;f=png&#x26;s=117059\" alt=\"map\">  </li>\n</ol>\n<p>其中Ctor我们暂时也不需要去具体关心，因为正常情况下的组件的构造函数都是Vue函数。  </p>\n<p>接下来进入关键的rerender函数。</p>\n<h4 id=\"rerender\"><a href=\"#rerender\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>rerender</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">exports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">rerender</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> record <span class=\"token operator\">=</span> map<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>options<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 如果没传第二个参数 就把所有实例调用$forceUpdate</span>\n    record<span class=\"token punctuation\">.</span>instances<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>instance <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      instance<span class=\"token punctuation\">.</span><span class=\"token function\">$forceUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span>\n  <span class=\"token punctuation\">}</span>\n  record<span class=\"token punctuation\">.</span>instances<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>instance <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 将实例上的$options上的render直接替换为新传入的render函数</span>\n    instance<span class=\"token punctuation\">.</span>$options<span class=\"token punctuation\">.</span>render <span class=\"token operator\">=</span> options<span class=\"token punctuation\">.</span>render\n    <span class=\"token comment\">// 执行$forceUpdate更新视图</span>\n    instance<span class=\"token punctuation\">.</span><span class=\"token function\">$forceUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>其实这个原函数很长，但是简化以后核心的更改视图的方法就是这些，平常我们在写vue单文件组件的时候都会像下面这样写：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>template<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>span<span class=\"token operator\">></span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> msg <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span>\n\n<span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n          msg<span class=\"token punctuation\">:</span> <span class=\"token string\">'Hello World'</span>\n      <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></code></pre></div>\n<p>这样的.vue文件，会被vue-loader编译成单个的组件选项对象，template中的部分会被编译成render函数挂到组件上，最终生成的对象是类似于：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n          msg<span class=\"token punctuation\">:</span> <span class=\"token string\">'Hello World'</span>\n      <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token string\">'span'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>msg<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>而在运行时，组件实例（也就是生命周期或者methods中访问的this对象）会通过$option保存render这个函数，而通过上面的源码我们不难猜出vue在渲染组件的时候也是通过调用$option.render去实现的。我们可以去vue的源码里验证一下我们的猜想。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/10/24/16dfd75a7429b3fc?w=657&#x26;h=560&#x26;f=png&#x26;s=59709\" alt=\"_render\"></p>\n<p>而在$forceUpdate的时候，vue内部会重新调用_render这个方法去生成vnode，然后patch到界面上，在此之前rerender把$options.render给替换成新的render方法了，这个时候再调用$forceUpdate，不就渲染新传入的render了吗？这个运行时的偷天换日我不得不佩服~</p>\n<h4 id=\"reload\"><a href=\"#reload\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>reload</h4>\n<p>reload的讲解我们基于这样一个示例：<br>\n一开始会显示foo的文本，一秒以后会显示成bar。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">prepare</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> Comp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  api<span class=\"token punctuation\">.</span><span class=\"token function\">createRecord</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> Comp<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    render<span class=\"token punctuation\">:</span> h <span class=\"token operator\">=></span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span>Comp<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> id1 <span class=\"token operator\">=</span> <span class=\"token string\">'reload: mounted'</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">prepare</span><span class=\"token punctuation\">(</span>id1<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  data<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> msg<span class=\"token punctuation\">:</span> <span class=\"token string\">'foo'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>msg<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">$mount</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#app'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// reload</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  api<span class=\"token punctuation\">.</span><span class=\"token function\">reload</span><span class=\"token punctuation\">(</span>id1<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    data<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> msg<span class=\"token punctuation\">:</span> <span class=\"token string\">'bar'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>msg<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>reload的情况会更加复杂，涉及到很多Vue内部的运行原理，这里只能简单的描述一下。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">exports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">reload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> record <span class=\"token operator\">=</span> map<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// reload的情况下 传入的options会当做一个新的组件</span>\n    <span class=\"token comment\">// 所以要用makeOptionsHot重新做一下记录</span>\n    <span class=\"token function\">makeOptionsHot</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> newCtor <span class=\"token operator\">=</span> record<span class=\"token punctuation\">.</span>Ctor<span class=\"token punctuation\">.</span><span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span>\n    \n    newCtor<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>_Ctor <span class=\"token operator\">=</span> record<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>_Ctor\n    record<span class=\"token punctuation\">.</span>Ctor<span class=\"token punctuation\">.</span>options <span class=\"token operator\">=</span> newCtor<span class=\"token punctuation\">.</span>options\n    record<span class=\"token punctuation\">.</span>Ctor<span class=\"token punctuation\">.</span>cid <span class=\"token operator\">=</span> newCtor<span class=\"token punctuation\">.</span>cid\n    record<span class=\"token punctuation\">.</span>Ctor<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> newCtor<span class=\"token punctuation\">.</span>prototype\n  <span class=\"token punctuation\">}</span>\n  record<span class=\"token punctuation\">.</span>instances<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    instance<span class=\"token punctuation\">.</span>$vnode<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">$forceUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这段代码关键的点开始于</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> newCtor <span class=\"token operator\">=</span> record<span class=\"token punctuation\">.</span>Ctor<span class=\"token punctuation\">.</span><span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span></code></pre></div>\n<p>利用新传入的配置生成了一个新的组件构造函数\n然后对record上的Ctor进行了一系列的赋值</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"> newCtor<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>_Ctor <span class=\"token operator\">=</span> record<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>_Ctor\n record<span class=\"token punctuation\">.</span>Ctor<span class=\"token punctuation\">.</span>options <span class=\"token operator\">=</span> newCtor<span class=\"token punctuation\">.</span>options\n record<span class=\"token punctuation\">.</span>Ctor<span class=\"token punctuation\">.</span>cid <span class=\"token operator\">=</span> newCtor<span class=\"token punctuation\">.</span>cid\n record<span class=\"token punctuation\">.</span>Ctor<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> newCtor<span class=\"token punctuation\">.</span>prototype</code></pre></div>\n<p>注意第一次调用reload时，这里的record.Ctor还是最初传入的Ctor，是由</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">prepare</span><span class=\"token punctuation\">(</span>id1<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  data<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> msg<span class=\"token punctuation\">:</span> <span class=\"token string\">'foo'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>msg<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">$mount</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#app'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>这个配置对象所生成的构造函数，但是构造函数的options、cid和prototype被替换成了由</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">api<span class=\"token punctuation\">.</span><span class=\"token function\">reload</span><span class=\"token punctuation\">(</span>id1<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    data<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> msg<span class=\"token punctuation\">:</span> <span class=\"token string\">'bar'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>msg<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>这个配置对象所生成的构造函数上的options、cid和prototype，此时的cid肯定是不同的。</p>\n<p>也就是说，<strong>构造函数的cid变了！</strong>，这个点记住后面要考！</p>\n<p>继续看源码</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  record<span class=\"token punctuation\">.</span>instances<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    instance<span class=\"token punctuation\">.</span>$vnode<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">$forceUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>此时的instance只有一个，就是在reload之前运行的那个msg为foo的实例，它的$vnode.context是什么呢？\n<img src=\"https://user-gold-cdn.xitu.io/2019/10/24/16dfe1d930810fc1?w=890&#x26;h=924&#x26;f=png&#x26;s=112698\" alt=\"context\"><br>\n直接在放上控制台打印出来的截图，这个context是一个vue实例，注意这个options里的render函数，是不是非常眼熟，没错，这个vue实例其实就是我们的prepare函数中</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  render<span class=\"token punctuation\">:</span> h <span class=\"token operator\">=></span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span>Comp<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>返回的vm实例。</p>\n<p>那么这个函数的$forceUpdate必然会触发 <code class=\"language-text\">render: h =&gt; h(Comp)</code> 这个函数，看到此时我们似乎还是没看出来这些操作为什么会销毁旧组件，创建新组件。那么此时只能探究一下这个h到底做了什么，这个h就是对应着 $createElement方法。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/10/24/16dfe2664b0c5fb4?w=598&#x26;h=76&#x26;f=png&#x26;s=7694\" alt=\"$createElement方法\"></p>\n<p>$createElement在创建vnode的时候，最底层会调用一个createComponent方法，  </p>\n<p>这个方法把Comp对象当做Ctor，然后调用Vue.extend这个api创造出构造函数，  </p>\n<p>默认情况下第一次h(Comp) 会生成类似于vue-component-${cid}作为组件的tag，  </p>\n<p>在本例中最开始渲染msg为foo的组件时，tag为vue-component-1，  </p>\n<p>并且会把这个构造函数缓存在_Ctor这个变量上，这样下次渲染再执行到createComponent的时候就不需要重新生成一次构造函数了，  </p>\n<p>Vue在选择更新策略时调用一个<code class=\"language-text\">sameVnode</code>方法  </p>\n<p>来决定是要进行打补丁，还是彻底销毁重建，这个<code class=\"language-text\">sameVnode</code>如下：  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">sameVnode</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n   <span class=\"token comment\">// 省略其他...</span>\n    a<span class=\"token punctuation\">.</span>tag <span class=\"token operator\">===</span> b<span class=\"token punctuation\">.</span>tag\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>其中很关键的一个对比就是<code class=\"language-text\">a.tag === b.tag</code></p>\n<p>但是reload方法偷梁换柱把Ctor的cid换成了2，</p>\n<p>生成的vnode的tag是就vue-component-2  </p>\n<p>后续再调用context.$forceUpdate的时候，会发现两个组件的tag不一样，所以就走了销毁 -> 重新创建的流程。</p>\n<h2 id=\"总结\"><a href=\"#%E6%80%BB%E7%BB%93\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>总结</h2>\n<p>这个库里面还是能看出很多尤大的编程风格，很适合进行学习，只是reload方法必须要深入了解Vue源码才有可能搞懂生效的原理。  </p>\n<p><code class=\"language-text\">rerender</code>这个方法相对来说还是比较好理解的，但是<code class=\"language-text\">reload</code>方法是怎么生效的就非常让人难以理解了，我一步一步断点调试了大概六七个小时，才渐渐得出结论，只能说好用的api后面潜藏着作者用心良苦的设计啊！想要彻底深入的理解vue的原理，强烈推荐黄轶老师的这门课程：</p>\n<p><a href=\"https://coding.imooc.com/class/228.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Vue.js源码全方位深入解析 （含Vue3.0源码分析）</a></p>","timeToRead":13,"frontmatter":{"title":"Vue项目的热更新怎么辣么好用啊？原来200行代码就搞定（深度解析）","date":"October 24, 2019","spoiler":""},"fields":{"slug":"/512022043/","langKey":"en"}}},"pageContext":{"slug":"/512022043/","previous":{"fields":{"slug":"/505706239/","langKey":"en","directoryName":"505706239"},"frontmatter":{"title":"中文技术文章阅读"}},"next":{"fields":{"slug":"/516924175/","langKey":"en","directoryName":"516924175"},"frontmatter":{"title":"通过实现一个最精简的响应式系统来学习Vue的data、computed、watch。"}},"translations":[],"translatedLinks":[]}},"staticQueryHashes":["336482444"]}