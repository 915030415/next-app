{"componentChunkName":"component---src-templates-blog-post-js","path":"/818217827/","result":{"data":{"site":{"siteMetadata":{"title":"ssh的博客","author":"ssh"}},"markdownRemark":{"id":"107f5f5a-d33b-5133-8ad9-bcb8a0de6aa0","html":"<h2 id=\"来源\"><a href=\"#%E6%9D%A5%E6%BA%90\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>来源</h2>\n<p>最近发现了一本 TS 相关的电子书，<a href=\"https://exploringjs.com/tackling-ts/ch_any-unknown.html#typescripts-two-top-types\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Tackling TypeScript</a>。随便翻看了一下，就发现了自己很感兴趣的一个问题，并且也经常听说在国内面试中出现。</p>\n<p>加上国内的相关资料确实不多，花了点时间翻译了下这一章节。</p>\n<p>英文基础好的同学可以直接去电子书地址阅读，如果觉得有帮助的话，可以买下这本书，或者捐助作者。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/92fcc564764d4f8a8bfdd145c06d44b9~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"输入图片说明\" title=\"屏幕截图.png\"></p>\n<h2 id=\"前言\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>在 TypeScript 中，<code class=\"language-text\">any</code> 和 <code class=\"language-text\">unknown</code> 是包含了所有值的类型。</p>\n<p>本文会详细介绍它们是什么，用在哪儿。</p>\n<h2 id=\"ts-中的两个-top-types\"><a href=\"#ts-%E4%B8%AD%E7%9A%84%E4%B8%A4%E4%B8%AA-top-types\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TS 中的两个 top types</h2>\n<p><code class=\"language-text\">any</code> 和 <code class=\"language-text\">unknown</code> 是 TypeScript 中欧所谓的 <code class=\"language-text\">top types</code>，详见 <a href=\"https://en.wikipedia.org/wiki/Top_type\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Wikipedia</a>：</p>\n<blockquote>\n<p>The top type […] is the universal type, sometimes called the universal supertype as all other types in any given type system are subtypes […]. In most cases it is the type which contains every possible [value] in the type system of interest.</p>\n</blockquote>\n<p>简单翻译过来就是说，<code class=\"language-text\">top type</code> 又称作通用父类型，基本上涵盖了类型系统中所有可能的值。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/519b8b7f671748108ad5c7fc9f927c88~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"输入图片说明\" title=\"屏幕截图.png\"></p>\n<h2 id=\"top-type-any\"><a href=\"#top-type-any\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>top type <code class=\"language-text\">any</code></h2>\n<p>如果一个值是 any 类型，几乎对它做任何操作都没问题。</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 可以做数字操作</span>\n  <span class=\"token number\">5</span> <span class=\"token operator\">*</span> value<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 可以假设一定有 propName 属性</span>\n  value<span class=\"token punctuation\">.</span>propName<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 可以假设数字索引存在</span>\n  value<span class=\"token punctuation\">[</span><span class=\"token number\">123</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>每种类型都可赋值给any类型:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> storageLocation<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n\nstorageLocation <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\nstorageLocation <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\nstorageLocation <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>any类型也可赋值给任何类型：</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> a<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> b<span class=\"token punctuation\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> c<span class=\"token punctuation\">:</span> object <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>一旦用了 any，我们就失去了 TypeScript 静态类型系统提供的所有保护。</p>\n<p>更好的选择是：</p>\n<ol>\n<li>使用更具体的类型</li>\n<li>使用 unknown</li>\n</ol>\n<p>总而言之，使用 any 是最下策。</p>\n<h3 id=\"例子：jsonparse\"><a href=\"#%E4%BE%8B%E5%AD%90%EF%BC%9Ajsonparse\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>例子：<code class=\"language-text\">JSON.parse()</code></h3>\n<p><code class=\"language-text\">JSON.parse()</code> 的结果根据输入而动态的改变，所以只能用 any 类型（我从类型签名中移除了参数 <code class=\"language-text\">reviver</code>）</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">JSON.parse()</code> 是在 unknown 类型出现之前被添加到 TypeScript 系统中的，否则它的返回类型应该是 unknown。</p>\n<h3 id=\"例子：string\"><a href=\"#%E4%BE%8B%E5%AD%90%EF%BC%9Astring\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>例子：<code class=\"language-text\">String()</code></h3>\n<p>函数 <code class=\"language-text\">String()</code> 可以将任意类型的值转为字符串，所以具有以下类型签名：</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">StringConstructor</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">(</span>value<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ···</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"top-type-unknown\"><a href=\"#top-type-unknown\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Top type <code class=\"language-text\">unknown</code></h2>\n<p>unknown 类型是安全版本的 any，每当你想用 any 的时候，先试试用 unknown。</p>\n<p>any 允许你做几乎所有操作，unknown 的限制性则更多。</p>\n<p>当我们对 unknown 类型的值做任何操作之前，我们必须先这样缩窄它的类型：</p>\n<ul>\n<li><a href=\"https://exploringjs.com/tackling-ts/ch_type-assertions.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Type assertions</a>:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">:</span> unknown<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// @ts-expect-error: Object is of type 'unknown'.</span>\n  value<span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Type assertion:</span>\n  <span class=\"token punctuation\">(</span>value <span class=\"token keyword\">as</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>Equality:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">:</span> unknown<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// @ts-expect-error: </span>\n  <span class=\"token comment\">// Object is of type 'unknown'.</span>\n  value <span class=\"token operator\">*</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">===</span> <span class=\"token number\">123</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// equality</span>\n    <span class=\"token comment\">// 推断出类型: 123</span>\n    value<span class=\"token punctuation\">;</span>\n\n    value <span class=\"token operator\">*</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li><a href=\"https://exploringjs.com/tackling-ts/ch_type-guards-assertion-functions.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Type guards</a>:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">:</span> unknown<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// @ts-expect-error:</span>\n  <span class=\"token comment\">// Object is of type 'unknown'.</span>\n  value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n  \n  <span class=\"token comment\">// type guard</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> value <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n    <span class=\"token comment\">// 推断出类型: string</span>\n    value<span class=\"token punctuation\">;</span>\n\n    value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li><a href=\"https://exploringjs.com/tackling-ts/ch_type-guards-assertion-functions.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Assertion functions</a>:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">:</span> unknown<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// @ts-expect-error: </span>\n  <span class=\"token comment\">// Object is of type 'unknown'.</span>\n  value<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'abc'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">assertIsRegExp</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 推断出类型: RegExp</span>\n  value<span class=\"token punctuation\">;</span>\n\n  value<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'abc'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/** An assertion function */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">assertIsRegExp</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">:</span> unknown<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> asserts arg is RegExp <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span> <span class=\"token punctuation\">(</span>arg <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeError</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Not a RegExp: '</span> <span class=\"token operator\">+</span> arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"感谢大家\"><a href=\"#%E6%84%9F%E8%B0%A2%E5%A4%A7%E5%AE%B6\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>感谢大家</h2>\n<p>欢迎关注 ssh，前端潮流趋势、原创面试热点文章应有尽有。</p>\n<p>记得关注后加我好友，我会不定期分享前端知识，行业信息。2021 陪你一起度过。</p>\n<p><img src=\"https://user-images.githubusercontent.com/23615778/108619258-76929d80-745e-11eb-90bf-023abec85d80.png\" alt=\"image\"></p>","timeToRead":4,"frontmatter":{"title":"TypeScript 中你不一定知道的 top types，在用 any 之前先试试 unknown？","date":"February 28, 2021","spoiler":""},"fields":{"slug":"/818217827/","langKey":"en"}}},"pageContext":{"slug":"/818217827/","previous":{"fields":{"slug":"/812799294/","langKey":"en","directoryName":"812799294"},"frontmatter":{"title":"浅谈 Vite 2.0 原理，依赖预编译，插件机制是如何兼容 Rollup 的？"}},"next":{"fields":{"slug":"/818779553/","langKey":"en","directoryName":"818779553"},"frontmatter":{"title":"给  Antd Table 组件编写缩进指引线、子节点懒加载等功能"}},"translations":[],"translatedLinks":[]}},"staticQueryHashes":["336482444"]}