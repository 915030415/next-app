{"componentChunkName":"component---src-templates-blog-post-js","path":"/694055470/","result":{"data":{"site":{"siteMetadata":{"title":"ssh的博客","author":"ssh"}},"markdownRemark":{"id":"4ed90f67-0a56-5951-bceb-9a148fc9c719","html":"<h2 id=\"前言\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>前几天，TypeScript 发布了一项 4.1 版本的新特性，字符串模板类型，还没有了解过的小伙伴可以先去这篇看一下：<a href=\"https://juejin.im/post/6867785919693832200\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">TypeScript 4.1 新特性：字符串模板类型，Vuex 终于有救了？</a>。</p>\n<p>本文就利用这个特性，简单实现下 Vuex 在 <code class=\"language-text\">modules</code> 嵌套情况下的 <code class=\"language-text\">dispatch</code> 字符串类型推断，先看下效果，我们有这样结构的 <code class=\"language-text\">store</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">Vuex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  mutations<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">root</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  modules<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    cart<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      mutations<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    user<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      mutations<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      modules<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        admin<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n          mutations<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>需要实现这样的效果，在 <code class=\"language-text\">dispatch</code> 的时候可选的 <code class=\"language-text\">action</code> 字符串类型要可以被提示出来：</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">store<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\nstore<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cart/add'</span><span class=\"token punctuation\">)</span>\nstore<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'user/login'</span><span class=\"token punctuation\">)</span>\nstore<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'user/admin/login'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bcf91dd55baa425faed6fcc6f95757b6~tplv-k3u1fbpfcp-zoom-1.image\"></p>\n<h2 id=\"实现\"><a href=\"#%E5%AE%9E%E7%8E%B0\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>实现</h2>\n<h3 id=\"定义函数骨架\"><a href=\"#%E5%AE%9A%E4%B9%89%E5%87%BD%E6%95%B0%E9%AA%A8%E6%9E%B6\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>定义函数骨架</h3>\n<p>首先先定义好 Vuex 这个函数，用两个泛型把 <code class=\"language-text\">mutations</code> 和 <code class=\"language-text\">modules</code> 通过反向推导给拿到：</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> Store<span class=\"token operator\">&lt;</span>Mutations<span class=\"token punctuation\">,</span> Modules<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 下文会实现这个 Action 类型</span>\n  <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">:</span> Action<span class=\"token operator\">&lt;</span>Mutations<span class=\"token punctuation\">,</span> Modules<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> VuexOptions<span class=\"token operator\">&lt;</span>Mutations<span class=\"token punctuation\">,</span> Modules<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  mutations<span class=\"token punctuation\">:</span> Mutations\n  modules<span class=\"token punctuation\">:</span> Modules\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">function</span> Vuex<span class=\"token operator\">&lt;</span>Mutations<span class=\"token punctuation\">,</span> Modules<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>\n  options<span class=\"token punctuation\">:</span> VuexOptions<span class=\"token operator\">&lt;</span>Mutations<span class=\"token punctuation\">,</span> Modules<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Store<span class=\"token operator\">&lt;</span>Mutations<span class=\"token punctuation\">,</span> Modules<span class=\"token operator\">></span></code></pre></div>\n<h3 id=\"实现-action\"><a href=\"#%E5%AE%9E%E7%8E%B0-action\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>实现 Action</h3>\n<p>那么接下来的重点就是实现 <code class=\"language-text\">dispatch(action: Action&lt;Mutations, Modules&gt;): void</code> 中的 <code class=\"language-text\">Action</code> 了，我们的目标是把他推断成一个 <code class=\"language-text\">&#39;root&#39; | &#39;cart/add&#39; | &#39;user/login&#39; | &#39;user/admin/login&#39;</code> 这样的联合类型，这样用户在调用 <code class=\"language-text\">dispatch</code> 的时候，就可以智能提示了。</p>\n<p><code class=\"language-text\">Action</code> 里首先可以简单的先把 <code class=\"language-text\">keyof Mutations</code> 拿到，因为根 <code class=\"language-text\">store</code> 下的 <code class=\"language-text\">mutations</code> 不需要做任何的拼接，</p>\n<p>重头戏在于，我们需要根据 <code class=\"language-text\">Modules</code> 这个泛型，也就是对应结构：</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">modules<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n   cart<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      mutations<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n         <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n         <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n   user<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      mutations<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n         <span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      modules<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n         admin<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            mutations<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n               <span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n         <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>来拿到 <code class=\"language-text\">modules</code> 中的所有拼接后的 <code class=\"language-text\">key</code>。</p>\n<h3 id=\"推断-modules-keys\"><a href=\"#%E6%8E%A8%E6%96%AD-modules-keys\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>推断 Modules Keys</h3>\n<p>先提前和大伙同步好，后续泛型里的：</p>\n<ul>\n<li><code class=\"language-text\">Modules</code> 代表 <code class=\"language-text\">{ cart: { modules: {} }, user: { modules: {} }</code> 这种多个 <code class=\"language-text\">Module</code> 组合的对象结构。</li>\n<li><code class=\"language-text\">Module</code> 代表单个子模块，比如 <code class=\"language-text\">cart</code> 。</li>\n</ul>\n<p>利用</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> Values<span class=\"token operator\">&lt;</span>Modules<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span><span class=\"token constant\">K</span> <span class=\"token keyword\">in</span> keyof Modules<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> Modules<span class=\"token punctuation\">[</span><span class=\"token constant\">K</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">[</span>keyof Modules<span class=\"token punctuation\">]</span></code></pre></div>\n<p>这种方式，可以轻松的把对象里的所有<strong>值</strong> 类型给展开，比如</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> Obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token punctuation\">:</span> <span class=\"token string\">'foo'</span>\n  b<span class=\"token punctuation\">:</span> <span class=\"token string\">'bar'</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T</span> <span class=\"token operator\">=</span> Values<span class=\"token operator\">&lt;</span>Obj<span class=\"token operator\">></span> <span class=\"token comment\">// 'foo' | 'bar'</span></code></pre></div>\n<p>由于我们要拿到的是 <code class=\"language-text\">cart</code>、<code class=\"language-text\">user</code> 对应的值里提取出来的 <code class=\"language-text\">key</code>，</p>\n<p>所以利用上面的知识，我们编写 <code class=\"language-text\">GetModulesMutationKeys</code> 来获取 <code class=\"language-text\">Modules</code> 下的所有 <code class=\"language-text\">key</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> GetModulesMutationKeys<span class=\"token operator\">&lt;</span>Modules<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span><span class=\"token constant\">K</span> <span class=\"token keyword\">in</span> keyof Modules<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> GetModuleMutationKeys<span class=\"token operator\">&lt;</span>Modules<span class=\"token punctuation\">[</span><span class=\"token constant\">K</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">K</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">[</span>keyof Modules<span class=\"token punctuation\">]</span></code></pre></div>\n<p>首先利用 <code class=\"language-text\">K in keyof Modules</code> 来拿到所有的 key，这样我们就可以拿到 <code class=\"language-text\">cart</code>、<code class=\"language-text\">user</code> 这种单个 <code class=\"language-text\">Module</code>，并且传入给 <code class=\"language-text\">GetModuleMutationKeys</code> 这个类型，<code class=\"language-text\">K</code> 也要一并传入进去，因为我们需要利用 <code class=\"language-text\">cart</code>、<code class=\"language-text\">user</code> 这些 <code class=\"language-text\">key</code> 来拼接在最终得到的类型前面。</p>\n<h3 id=\"推断单个-module-keys\"><a href=\"#%E6%8E%A8%E6%96%AD%E5%8D%95%E4%B8%AA-module-keys\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>推断单个 Module Keys</h3>\n<p>接下来实现 <code class=\"language-text\">GetModuleMutationKeys</code>，分解一下需求，首先单个 <code class=\"language-text\">Module</code> 是这样子的：</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">cart<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n   mutations<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>那么拿到它的 <code class=\"language-text\">Mutations</code> 后，我们只需要去拼接 <code class=\"language-text\">cart/add</code>、<code class=\"language-text\">cart/remove</code> 即可，那么如何拿到一个对象类型中的 <code class=\"language-text\">mutations</code>？</p>\n<p>我们用 <code class=\"language-text\">infer</code> 来取：</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> GetMutations<span class=\"token operator\">&lt;</span>Module<span class=\"token operator\">></span> <span class=\"token operator\">=</span> Module <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">{</span> mutations<span class=\"token punctuation\">:</span> infer <span class=\"token constant\">M</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">?</span> <span class=\"token constant\">M</span> <span class=\"token punctuation\">:</span> never</code></pre></div>\n<p>然后通过 <code class=\"language-text\">keyof GetMutations&lt;Module&gt;</code>，即可轻松拿到 <code class=\"language-text\">&#39;add&#39; | &#39;remove&#39;</code> 这个类型，我们再实现一个拼接 <code class=\"language-text\">Key</code> 的类型，注意这里就用到了 TS 4.1 的字符串模板类型了</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> AddPrefix<span class=\"token operator\">&lt;</span>Prefix<span class=\"token punctuation\">,</span> Keys<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Prefix<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Keys<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span></code></pre></div>\n<p>这里会自动把联合类型展开并分配，<code class=\"language-text\">${&#39;cart&#39;}/${&#39;add&#39; | &#39;remove&#39;}</code> 会被推断成 <code class=\"language-text\">&#39;cart/add&#39; | &#39;cart/remove&#39;</code>，不过由于我们传入的是 <code class=\"language-text\">keyof GetMutations&lt;Module&gt;</code> 它还有可能是 <code class=\"language-text\">symbol | number</code> 类型，所以用 <code class=\"language-text\">Keys &amp; string</code> 来取其中的 <code class=\"language-text\">string</code> 类型，这个技巧也是老爷子在 <a href=\"https://github.com/microsoft/TypeScript/pull/40336?from=groupmessage\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Template string types MR</a> 中提到的：</p>\n<blockquote>\n<p>Above, a keyof T &#x26; string intersection is required because keyof T could contain symbol types that cannot be transformed using template string types.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> AddPrefix<span class=\"token operator\">&lt;</span>Prefix<span class=\"token punctuation\">,</span> Keys<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Prefix <span class=\"token operator\">&amp;</span> <span class=\"token builtin\">string</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Keys <span class=\"token operator\">&amp;</span> <span class=\"token builtin\">string</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span></code></pre></div>\n<p>那么，利用 <code class=\"language-text\">AddPrefix&lt;Key, keyof GetMutations&lt;Module&gt;&gt;</code> 就可以轻松的把 <code class=\"language-text\">cart</code> 模块下的 <code class=\"language-text\">mutations</code> 拼接出来了。</p>\n<h3 id=\"推断嵌套-module-keys\"><a href=\"#%E6%8E%A8%E6%96%AD%E5%B5%8C%E5%A5%97-module-keys\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>推断嵌套 Module Keys</h3>\n<p><code class=\"language-text\">cart</code> 模块下还可能有别的 <code class=\"language-text\">Modules</code>，比如这样：</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">cart<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n   mutations<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span>\n   modules<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      subCart<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      \tmutations<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>其实很简单，我们刚刚已经定义好了从 <code class=\"language-text\">Modules</code> 中提取 <code class=\"language-text\">Keys</code> 的工具类型，也就是 <code class=\"language-text\">GetModulesMutationKeys</code>，只需要递归调用即可，不过这里我们需要做一层预处理，把 <code class=\"language-text\">modules</code> 不存在的情况给排除掉：</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> GetModuleMutationKeys<span class=\"token operator\">&lt;</span>Module<span class=\"token punctuation\">,</span> Key<span class=\"token operator\">></span> <span class=\"token operator\">=</span>\n  <span class=\"token comment\">// 这里直接拼接 key/mutation</span>\n  <span class=\"token operator\">|</span> AddPrefix<span class=\"token operator\">&lt;</span>Key<span class=\"token punctuation\">,</span> keyof GetMutations<span class=\"token operator\">&lt;</span>Module<span class=\"token operator\">>></span>\n  <span class=\"token comment\">// 这里对子 modules 做 keys 的提取</span>\n  <span class=\"token operator\">|</span> GetSubModuleKeys<span class=\"token operator\">&lt;</span>Module<span class=\"token punctuation\">,</span> Key<span class=\"token operator\">></span></code></pre></div>\n<p>利用 extends 去判断类型结构，对不存在 <code class=\"language-text\">modules</code> 的结构直接返回 never，再用 infer 去提取出 Modules 的结构，并且把前一个模块的 <code class=\"language-text\">key</code> 拼接在刚刚写好的 <code class=\"language-text\">GetModulesMutationKeys</code> 返回的结果之前：</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> GetSubModuleKeys<span class=\"token operator\">&lt;</span>Module<span class=\"token punctuation\">,</span> Key<span class=\"token operator\">></span> <span class=\"token operator\">=</span> Module <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">{</span> modules<span class=\"token punctuation\">:</span> infer SubModules <span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">?</span> AddPrefix<span class=\"token operator\">&lt;</span>Key<span class=\"token punctuation\">,</span> GetModulesMutationKeys<span class=\"token operator\">&lt;</span>SubModules<span class=\"token operator\">>></span>\n  <span class=\"token punctuation\">:</span> never</code></pre></div>\n<p>以这个 <code class=\"language-text\">cart</code> 模块为例，分解一下每个工具类型得到的结果：</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">cart<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n   mutations<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span>\n   modules<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      subCart<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      \tmutations<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n<span class=\"token keyword\">type</span> GetModuleMutationKeys<span class=\"token operator\">&lt;</span>Module<span class=\"token punctuation\">,</span> Key<span class=\"token operator\">></span> <span class=\"token operator\">=</span>\n    <span class=\"token comment\">// 'cart/add' | 'cart | remove'</span>\n    AddPrefix<span class=\"token operator\">&lt;</span>Key<span class=\"token punctuation\">,</span> keyof GetMutations<span class=\"token operator\">&lt;</span>Module<span class=\"token operator\">>></span> <span class=\"token operator\">|</span>\n    <span class=\"token comment\">// 'cart/subCart/add'</span>\n    GetSubModuleKeys<span class=\"token operator\">&lt;</span>Module<span class=\"token punctuation\">,</span> Key<span class=\"token operator\">></span>\n\n<span class=\"token keyword\">type</span> GetSubModuleKeys<span class=\"token operator\">&lt;</span>Module<span class=\"token punctuation\">,</span> Key<span class=\"token operator\">></span> <span class=\"token operator\">=</span> Module <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">{</span> modules<span class=\"token punctuation\">:</span> infer SubModules <span class=\"token punctuation\">}</span>\n   <span class=\"token operator\">?</span> AddPrefix<span class=\"token operator\">&lt;</span>\n       <span class=\"token comment\">// 'cart'</span>\n       Key<span class=\"token punctuation\">,</span>\n       <span class=\"token comment\">// 'subCart/add'</span>\n       GetModulesMutationKeys<span class=\"token operator\">&lt;</span>SubModules<span class=\"token operator\">></span>\n   <span class=\"token operator\">></span>\n   <span class=\"token punctuation\">:</span> never</code></pre></div>\n<p>这样，就巧妙的利用递归把无限层级的 <code class=\"language-text\">modules</code> 拼接实现了。</p>\n<h2 id=\"完整代码\"><a href=\"#%E5%AE%8C%E6%95%B4%E4%BB%A3%E7%A0%81\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>完整代码</h2>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> GetMutations<span class=\"token operator\">&lt;</span>Module<span class=\"token operator\">></span> <span class=\"token operator\">=</span> Module <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">{</span> mutations<span class=\"token punctuation\">:</span> infer <span class=\"token constant\">M</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">?</span> <span class=\"token constant\">M</span> <span class=\"token punctuation\">:</span> never\n\n<span class=\"token keyword\">type</span> AddPrefix<span class=\"token operator\">&lt;</span>Prefix<span class=\"token punctuation\">,</span> Keys<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Prefix <span class=\"token operator\">&amp;</span> <span class=\"token builtin\">string</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Keys <span class=\"token operator\">&amp;</span> <span class=\"token builtin\">string</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span>\n\n<span class=\"token keyword\">type</span> GetSubModuleKeys<span class=\"token operator\">&lt;</span>Module<span class=\"token punctuation\">,</span> Key<span class=\"token operator\">></span> <span class=\"token operator\">=</span> Module <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">{</span> modules<span class=\"token punctuation\">:</span> infer SubModules <span class=\"token punctuation\">}</span>\n   <span class=\"token operator\">?</span> AddPrefix<span class=\"token operator\">&lt;</span>Key<span class=\"token punctuation\">,</span> GetModulesMutationKeys<span class=\"token operator\">&lt;</span>SubModules<span class=\"token operator\">>></span>\n   <span class=\"token punctuation\">:</span> never\n\n<span class=\"token keyword\">type</span> GetModuleMutationKeys<span class=\"token operator\">&lt;</span>Module<span class=\"token punctuation\">,</span> Key<span class=\"token operator\">></span> <span class=\"token operator\">=</span> AddPrefix<span class=\"token operator\">&lt;</span>Key<span class=\"token punctuation\">,</span> keyof GetMutations<span class=\"token operator\">&lt;</span>Module<span class=\"token operator\">>></span> <span class=\"token operator\">|</span> GetSubModuleKeys<span class=\"token operator\">&lt;</span>Module<span class=\"token punctuation\">,</span> Key<span class=\"token operator\">></span>\n\n<span class=\"token keyword\">type</span> GetModulesMutationKeys<span class=\"token operator\">&lt;</span>Modules<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token punctuation\">[</span><span class=\"token constant\">K</span> <span class=\"token keyword\">in</span> keyof Modules<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> GetModuleMutationKeys<span class=\"token operator\">&lt;</span>Modules<span class=\"token punctuation\">[</span><span class=\"token constant\">K</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">K</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">[</span>keyof Modules<span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">type</span> Action<span class=\"token operator\">&lt;</span>Mutations<span class=\"token punctuation\">,</span> Modules<span class=\"token operator\">></span> <span class=\"token operator\">=</span> keyof Mutations <span class=\"token operator\">|</span> GetModulesMutationKeys<span class=\"token operator\">&lt;</span>Modules<span class=\"token operator\">></span>\n\n<span class=\"token keyword\">type</span> Store<span class=\"token operator\">&lt;</span>Mutations<span class=\"token punctuation\">,</span> Modules<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">:</span> Action<span class=\"token operator\">&lt;</span>Mutations<span class=\"token punctuation\">,</span> Modules<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> VuexOptions<span class=\"token operator\">&lt;</span>Mutations<span class=\"token punctuation\">,</span> Modules<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n   mutations<span class=\"token punctuation\">:</span> Mutations<span class=\"token punctuation\">,</span>\n   modules<span class=\"token punctuation\">:</span> Modules\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">function</span> Vuex<span class=\"token operator\">&lt;</span>Mutations<span class=\"token punctuation\">,</span> Modules<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">:</span> VuexOptions<span class=\"token operator\">&lt;</span>Mutations<span class=\"token punctuation\">,</span> Modules<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Store<span class=\"token operator\">&lt;</span>Mutations<span class=\"token punctuation\">,</span> Modules<span class=\"token operator\">></span>\n\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">Vuex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n   mutations<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">root</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n   modules<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      cart<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n         mutations<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n         <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      user<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n         mutations<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n         <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n         modules<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            admin<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n               mutations<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n                  <span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n               <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span>\n         <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nstore<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">)</span>\nstore<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cart/add\"</span><span class=\"token punctuation\">)</span>\nstore<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user/login\"</span><span class=\"token punctuation\">)</span>\nstore<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user/admin/login\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>前往 <a href=\"https://www.typescriptlang.org/play?ts=4.1.0-pr-40336-8#code/C4TwDgpgBA4hwFkCuwCGwCWB7AdgZwB4EsATJAGwgD4oBeKYsyqCAD2AhxLygG8oAtinTZ8ALigYcAMwgAnBlAC+UAPyKJOCADd5AKD2hIUAIIkSABTkRpGVgSs27AGigBpCCDw16AAwAkvI62rFAAZFB4wHJSAOZKAPSBHl7hkdFxSr4GRtBwwADKSABGjBQQKYRllK4pPgyk5SzsnNx8go2UeBJSsgpFpZ0QPCp6UOPqZpbWIQQprvnVw8homLiVBANL3jRj45o6+obgefBLKyLrnlVDtZ71U8F2c56uANaeWNKwZ8Jr+EQhlQaAAfH6FEpLDZLO4gKg5E7g7YXf7QobeOh8PZQADabkkOCgHxAXwaTGGAF0JIshijRGjyXg8RTavClDjiaTthSEcYTABjf5EP6iPCubb1TnfOm4HhgmmMmU4Bnlby86AFYBYazC1ai8Xo+q8bEkDB4MDofkACwAFKhBaIJAKhUqxWTVVQAJQSbRYDAkPRKdVQABqSDYAHkwP8qiLZQbGUbsUI9bKJK7nMn0en0YGDCQIPzyKhrFBpEgcA7cKHw-YM+6ulQbVho6KJGHI63ZbrLvgEx7vVBNdqID2Y-3GwZ+bLgOkR5iO6wbcbxoI4+IsavV3IsFhgDbPe0lJnV8es4yJCut1B+SXgJfsde16mN1en1vUOYD0eT++t9YBCwXRv34IM-2UR9xjPJ8kDweQH3AlNe26TdwPGcgsFiKQQIg8DoL-QCL1QtDPwEKQELQrckJjCjKOvDCsJwHCwLoqDfzQlj30409sSDJRPQMKIRwAOlNc1LVtAAiHc90kgShOsUSzQtYBrRtSTbzkYAEk-Eg5L0BSICU8TVKk2D5ASBipH0wzjJUtTJPMuQdJIMicEszDrM9IA\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">TypeScript Playground</a> 体验。</p>\n<h2 id=\"结语\"><a href=\"#%E7%BB%93%E8%AF%AD\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>结语</h2>\n<p>这个新特性给 TS 库开发的作者带来了无限可能性，有人用它实现了 <a href=\"https://www.zhihu.com/question/418792736/answer/1448844286\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">URL Parser 和 HTML parser</a>，有人用它实现了 <code class=\"language-text\">JSON parse</code> 甚至有人用它实现了<a href=\"https://www.typescriptlang.org/play?ts=4.1.0-pr-40336-8#code/C4TwDgpgBAggNmAFgQygXigImZqAfLAI1wMwGMSsATSzCWgM1oHNbFaBLWgK1oGtacWgFtaAO1oB7WmFoBHWgCdaAZ1rBaAV1oA3WgHdaAD1ohaAL0wBYAFC3QkKAEkVAMWRwVEADwAVKBBGwBBiVCpQDB5eAHzoUL629uDQvgDCkmJkyMDeADIANFAASrEYAN62UFVQZBlZwAD6cBAMwABcUAWV1bWZ2Q2KHMyI7cW2AL6JNg4pAKpiHBl5hSVxFTbVUJoLGU0to10b1duLYgNDIx1FE1Mz8alwkiqaij4AaqVQ65tkj8+vDR0Hk0EA6bxudmmyXiAAVkK8xN4PmtulUwPCQoDgaCoOCbJNIXc0ihFCokZ9vj0SSosXAQWCIUlHLk4Qi4pgABTWQnQoqskLsgCU3KZ0AAysB4eyAFQiqGOABCUowmDwcruMLp4RVAGp1dDXBw4MFFABRYRgUAwUIAOQgOggij8n38gWCoXCAG0OGIGI7ihBnsbCj6-YoAypgABdKAAfgjwACQRCYSwuHjRUDmmNUA6Ynt-rzBcUt2hrK8qRJ3glikKqQAEjBVhgG02k+7U5HBmJmHGoDX2ynwgADAAkZVbRXG49D-szkfGw77nsnK0D0dzUHzDvDRZ3pcc5YgAFlkGIQNXgLX4vDmBBE26h1Auz7mIUYa8dIOPc+r6-2ZgpSov2V7fqmmDplAnofvahQQTGbTAQOj4-mOZS+Le97TmUs7hvOwCLnGSGgShqZobhUCVth+GEfGlZgeEL49n2R6nue3j4YUGGKHewCFGhME6NhVHDrEe6Fluxa5sB0GfoUNZRgA3Ae0BHpW8K5BwkaXoonysWeF41oU8BIMgcGASpUBqdSOl6fCFYkpp2k1rEpFehRYohr6c7rjG8aesS9nVtEa6Rghkn7jyh72RA-KIi56AydZ8I6YULIYmI0Qxm5UHbo6fkRRJyVOkZnRxa5yY-t63nhiyXlhmV+F+UlMXzKceQwvhWUMblxYFXlu5Wa1OyIiyXU9dVDVvNi9X+m8TVEUcVTQTF6lOvN64rOV2WVamnoDf1UkdMVSKccU5UTRRfKzXhnW+cuvhxUi2IhedC2IUthWDQNm4DcpUWqTF7hkMAkglVeQGfStpIQGtqVlRl3U5ftfWLZs0MOSlpUmSgSO7V6B19j9x2rTZCUfZsR5PS5-2ikNMMPE8Lw+AlGAYxAwOg+Duk7R2BOo-GxP014nNg7Zl01Z0N2dAtsYtQzVa5GdErwnjfO9TuBWegUMv3STCspUrm0garEsNZ5UAebLUFpH8zN5K9YrvcBQt-ZZal1Nk4toPLFZ268tm80+KOa0TR3C7D-ssxDZv+jrFFG2FaPVOzcOJ3xVlamrweE-5Ovp+FJ3p++Wex+GqTS6ksu+7Dns5FX67Z1VudfZuHt9PX43I1d0tFNbAXpB3yzFK9fd6y74eu8WtPyoDMNtUsrM14P9SBxNLdC+3q8Jd3kvx3v1dQ0XZ1Kjz68C1B+fvRHacn6bu8Naf0sKof6NHgviIv43QfNxfm-De1L+kYKrq0mnOXu-dfAf2HiUFYztPpTx3L9ae7sYreygIaY0jpzSWhANaKgdodzeHfiNWy0RLKnmAGQRANZ4ZrRUJDTYyF8ZpjDkgim1R6E9UCqSbwFFkTxjeD1JivZ4zMPVmhN42ErrrlogmZB7DW7iUUDPO4lDqHQNKh-T4H9uHQITr3WI8Z1GIHhrkWIBATHw1WMo1R0ITEry9qVRxwBGHVHEU+CCbDCzARcdwlxfC96GL7FYqxpVzErDEl9Ch2RqGM3+NHa88TmZuKqB4n8Xj4xeI4VUZJrx-FR0CQ1VIRioAOMKWEq8dZXp5IgFEgaMSqGIGplU+mIQ7Jshyo9DKRT-QwlKZU68-SFGOjsY4QZXFXh1MSp9XwUz-E2QMgM2JNCrzwzmRAaZOT4jzK6U9JZISVktOvBsrZwFTl6NIQZQoBzjErM0a005Ylzm7JYWkOu3hrlQFuWUlZATSpPOkrM156tbZMwDj88p4LEmTM2c8hBKCAaWxUDaSQwBCGOmdHEAKP89ot0iJ4aAHQrwgjplpHBoAayvixRgV0LDMlQBJUSiIUQIBjOgC4ExEAqA0uRai9FxYsU5SZX2clFpKV-h7EKlhIr4wio6ASrwm5FUQDJSoOZII-A9SZS6Syrw7xGAAIxxCPN4bAOoOSEB1GQPAEBBR4BoNEf6dxgiRmNRgLSGqfCcpWdy7wVjsCEAoIUfVgRDXRAjc66ErrgAACY4iesUJqn1TS-UBuQPQENEADXhsjXTGNABmBN6qk3epUFynl6ag2YCzTmiNTr83rgACzFq9d4FN1C00rLNTQWtYb63sqgKGow8aMCms5MgHUhA8BkEFLKBts9GXrgAKyttLe28tvrK3dsDcgYgfaR0DsbZGAAbGu5Nm7U3bqaWasgwah3ZsCLGo9NggA\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">简单的正则</a>，这个特性让类型体操的爱好者以及框架的库作者可以进一步的大展身手，期待他们写出更加强大的类型库来方便业务开发的童鞋吧~</p>\n<h2 id=\"感谢大家\"><a href=\"#%E6%84%9F%E8%B0%A2%E5%A4%A7%E5%AE%B6\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>感谢大家</h2>\n<p>关注公众号「前端从进阶到入院」，关注第一手干货资讯，还可以获取『高级前端进阶指南』和『前端算法零基础进阶指南』。</p>","timeToRead":14,"frontmatter":{"title":"利用 TS 4.1 新特性实现 Vuex 无限层级命名空间的 dispatch 类型推断。","date":"September 05, 2020","spoiler":""},"fields":{"slug":"/694055470/","langKey":"en"}}},"pageContext":{"slug":"/694055470/","previous":{"fields":{"slug":"/690780892/","langKey":"en","directoryName":"690780892"},"frontmatter":{"title":"TypeScript 4.1 新特性：字符串模板类型，Vuex 终于有救了？"}},"next":{"fields":{"slug":"/702742757/","langKey":"en","directoryName":"702742757"},"frontmatter":{"title":"深入探索前端路由，手写 react-mini-router"}},"translations":[],"translatedLinks":[]}},"staticQueryHashes":["336482444"]}