{"componentChunkName":"component---src-templates-blog-post-js","path":"/592778801/","result":{"data":{"site":{"siteMetadata":{"title":"ssh的博客","author":"ssh"}},"markdownRemark":{"id":"f1ea6e15-03bd-5124-a7ae-213c8894a75a","html":"<h2 id=\"前言\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>Vue 中的 key 是用来做什么的？为什么不推荐使用 index 作为 key？常常听说这样的问题，本篇文章带你从原理来一探究竟。</p>\n<p>另外本文的结论对于性能的毁灭是针对列表子元素顺序会交换的情况，提前说明清楚，喷子绕道。</p>\n<h2 id=\"示例\"><a href=\"#%E7%A4%BA%E4%BE%8B\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>示例</h2>\n<p>以这样一个列表为例：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span><span class=\"token number\">1</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span><span class=\"token number\">2</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span></code></pre></div>\n<p>那么它的 <code class=\"language-text\">vnode</code> 也就是虚拟 dom 节点大概是这样的。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  tag<span class=\"token punctuation\">:</span> <span class=\"token string\">'ul'</span><span class=\"token punctuation\">,</span>\n  children<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span> tag<span class=\"token punctuation\">:</span> <span class=\"token string\">'li'</span><span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">{</span> vnode<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> text<span class=\"token punctuation\">:</span> <span class=\"token string\">'1'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> tag<span class=\"token punctuation\">:</span> <span class=\"token string\">'li'</span><span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">{</span> vnode<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> text<span class=\"token punctuation\">:</span> <span class=\"token string\">'2'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>假设更新以后，我们把子节点的顺序调换了一下：</p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\">{\n  tag: 'ul',\n  children: [\n<span class=\"token inserted\">+   { tag: 'li', children: [ { vnode: { text: '2' }}]  },</span>\n<span class=\"token inserted\">+   { tag: 'li', children: [ { vnode: { text: '1' }}]  },</span>\n  ]\n}</code></pre></div>\n<p>很显然，这里的 <code class=\"language-text\">children</code> 部分是我们本文 <code class=\"language-text\">diff</code> 算法要讲的重点（敲黑板）。</p>\n<p>首先响应式数据更新后，触发了 <code class=\"language-text\">渲染 Watcher</code>  的回调函数 <code class=\"language-text\">vm._update(vm._render())</code>去驱动视图更新，</p>\n<p><code class=\"language-text\">vm._render()</code> 其实生成的就是 <code class=\"language-text\">vnode</code>，而 <code class=\"language-text\">vm._update</code> 就会带着新的 <code class=\"language-text\">vnode</code> 去走触发 <code class=\"language-text\">__patch__</code> 过程。</p>\n<p>我们直接进入 <code class=\"language-text\">ul</code> 这个 <code class=\"language-text\">vnode</code> 的 <code class=\"language-text\">patch</code> 过程。</p>\n<p>对比新旧节点是否是相同类型的节点： </p>\n<h2 id=\"1-不是相同节点：\"><a href=\"#1-%E4%B8%8D%E6%98%AF%E7%9B%B8%E5%90%8C%E8%8A%82%E7%82%B9%EF%BC%9A\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 不是相同节点：</h2>\n<p><code class=\"language-text\">isSameNode</code>为false的话，直接销毁旧的 <code class=\"language-text\">vnode</code>，渲染新的 <code class=\"language-text\">vnode</code>。这也解释了为什么 <code class=\"language-text\">diff</code> 是同层对比。</p>\n<h2 id=\"2-是相同节点，要尽可能的做节点的复用（都是-ul，进入）。\"><a href=\"#2-%E6%98%AF%E7%9B%B8%E5%90%8C%E8%8A%82%E7%82%B9%EF%BC%8C%E8%A6%81%E5%B0%BD%E5%8F%AF%E8%83%BD%E7%9A%84%E5%81%9A%E8%8A%82%E7%82%B9%E7%9A%84%E5%A4%8D%E7%94%A8%EF%BC%88%E9%83%BD%E6%98%AF-ul%EF%BC%8C%E8%BF%9B%E5%85%A5%EF%BC%89%E3%80%82\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 是相同节点，要尽可能的做节点的复用（都是 <code class=\"language-text\">ul</code>，进入👈）。</h2>\n<p>会调用<code class=\"language-text\">src/core/vdom/patch.js</code>下的<code class=\"language-text\">patchVNode</code>方法。 </p>\n<h3 id=\"如果新-vnode-是文字-vnode\"><a href=\"#%E5%A6%82%E6%9E%9C%E6%96%B0-vnode-%E6%98%AF%E6%96%87%E5%AD%97-vnode\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>如果新 vnode 是文字 vnode</h3>\n<p>就直接调用浏览器的 <code class=\"language-text\">dom api</code> 把节点的直接替换掉文字内容就好。</p>\n<h3 id=\"如果新-vnode-不是文字-vnode\"><a href=\"#%E5%A6%82%E6%9E%9C%E6%96%B0-vnode-%E4%B8%8D%E6%98%AF%E6%96%87%E5%AD%97-vnode\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>如果新 vnode 不是文字 vnode</h3>\n<h4 id=\"如果有新-children-而没有旧-children\"><a href=\"#%E5%A6%82%E6%9E%9C%E6%9C%89%E6%96%B0-children-%E8%80%8C%E6%B2%A1%E6%9C%89%E6%97%A7-children\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>如果有新 children 而没有旧 children</h4>\n<p>说明是新增 children，直接 <code class=\"language-text\">addVnodes</code> 添加新子节点。</p>\n<h4 id=\"如果有旧-children-而没有新-children\"><a href=\"#%E5%A6%82%E6%9E%9C%E6%9C%89%E6%97%A7-children-%E8%80%8C%E6%B2%A1%E6%9C%89%E6%96%B0-children\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>如果有旧 children 而没有新 children</h4>\n<p>说明是删除 children，直接 <code class=\"language-text\">removeVnodes</code> 删除旧子节点</p>\n<h4 id=\"如果新旧-children-都存在（都存在-li-子节点列表，进入）\"><a href=\"#%E5%A6%82%E6%9E%9C%E6%96%B0%E6%97%A7-children-%E9%83%BD%E5%AD%98%E5%9C%A8%EF%BC%88%E9%83%BD%E5%AD%98%E5%9C%A8-li-%E5%AD%90%E8%8A%82%E7%82%B9%E5%88%97%E8%A1%A8%EF%BC%8C%E8%BF%9B%E5%85%A5%EF%BC%89\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>如果新旧 children 都存在（都存在 <code class=\"language-text\">li 子节点列表</code>，进入👈）</h4>\n<p>那么就是我们 <code class=\"language-text\">diff算法</code> 想要考察的最核心的点了，也就是新旧节点的 <code class=\"language-text\">diff</code> 过程。</p>\n<p>通过</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token comment\">// 旧首节点</span>\n  <span class=\"token keyword\">let</span> oldStartIdx <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token comment\">// 新首节点</span>\n  <span class=\"token keyword\">let</span> newStartIdx <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token comment\">// 旧尾节点</span>\n  <span class=\"token keyword\">let</span> oldEndIdx <span class=\"token operator\">=</span> oldCh<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n  <span class=\"token comment\">// 新尾节点</span>\n  <span class=\"token keyword\">let</span> newEndIdx <span class=\"token operator\">=</span> newCh<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span></code></pre></div>\n<p>这些变量分别指向<code class=\"language-text\">旧节点的首尾</code>、<code class=\"language-text\">新节点的首尾</code>。</p>\n<p>根据这些指针，在一个 <code class=\"language-text\">while</code> 循环中不停的对新旧节点的两端的进行对比，直到没有节点可以对比。</p>\n<p>在讲对比过程之前，要讲一个比较重要的函数：<code class=\"language-text\">sameVnode</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">sameVnode</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    a<span class=\"token punctuation\">.</span>key <span class=\"token operator\">===</span> b<span class=\"token punctuation\">.</span>key <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token punctuation\">(</span>\n        a<span class=\"token punctuation\">.</span>tag <span class=\"token operator\">===</span> b<span class=\"token punctuation\">.</span>tag <span class=\"token operator\">&amp;&amp;</span>\n        a<span class=\"token punctuation\">.</span>isComment <span class=\"token operator\">===</span> b<span class=\"token punctuation\">.</span>isComment <span class=\"token operator\">&amp;&amp;</span>\n        <span class=\"token function\">isDef</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token function\">isDef</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>\n        <span class=\"token function\">sameInputType</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>它是用来判断节点是否可用的关键函数，可以看到，判断是否是 <code class=\"language-text\">sameVnode</code>，传递给节点的 <code class=\"language-text\">key</code> 是关键。</p>\n<p>然后我们接着进入 <code class=\"language-text\">diff</code> 过程，每一轮都是同样的对比，其中某一项命中了，就递归的进入 <code class=\"language-text\">patchVnode</code> 针对单个 <code class=\"language-text\">vnode</code> 进行的过程（如果这个 <code class=\"language-text\">vnode</code> 又有 <code class=\"language-text\">children</code>，那么还会来到这个 <code class=\"language-text\">diff children</code> 的过程 ）：</p>\n<ol>\n<li>旧首节点和新首节点用 <code class=\"language-text\">sameNode</code> 对比。</li>\n<li>旧尾节点和新首节点用 <code class=\"language-text\">sameNode</code> 对比</li>\n<li>旧首节点和新尾节点用 <code class=\"language-text\">sameNode</code> 对比</li>\n<li>旧尾节点和新尾节点用 <code class=\"language-text\">sameNode</code> 对比</li>\n<li>如果以上逻辑都匹配不到，再把所有旧子节点的 <code class=\"language-text\">key</code> 做一个映射表，然后用新 <code class=\"language-text\">vnode</code> 的 <code class=\"language-text\">key</code> 去找出在旧节点中可以复用的位置。</li>\n</ol>\n<p>然后不停的把匹配到的指针向内部收缩，直到新旧节点有一端的指针相遇（说明这个端的节点都被patch过了）。</p>\n<p>在指针相遇以后，还有两种比较特殊的情况：</p>\n<ol>\n<li>有新节点需要加入。\n如果更新完以后，<code class=\"language-text\">oldStartIdx &gt; oldEndIdx</code>，说明旧节点都被 <code class=\"language-text\">patch</code> 完了，但是有可能还有新的节点没有被处理到。接着会去判断是否要新增子节点。</li>\n<li>有旧节点需要删除。\n如果新节点先patch完了，那么此时会走 <code class=\"language-text\">newStartIdx &gt; newEndIdx</code>  的逻辑，那么就会去删除多余的旧子节点。</li>\n</ol>\n<h2 id=\"为什么不要以index作为key？\"><a href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E8%A6%81%E4%BB%A5index%E4%BD%9C%E4%B8%BAkey%EF%BC%9F\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>为什么不要以index作为key？</h2>\n<h3 id=\"节点reverse场景\"><a href=\"#%E8%8A%82%E7%82%B9reverse%E5%9C%BA%E6%99%AF\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>节点reverse场景</h3>\n<p>假设我们有这样的一段代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>app<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>item</span>\n          <span class=\"token attr-name\">:key</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>index<span class=\"token punctuation\">\"</span></span>\n          <span class=\"token attr-name\">v-for</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>(num, index) in nums<span class=\"token punctuation\">\"</span></span>\n          <span class=\"token attr-name\">:num</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>num<span class=\"token punctuation\">\"</span></span>\n          <span class=\"token attr-name\">:class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>`item${num}`<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>item</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>change<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>改变<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>./vue.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\">\n      <span class=\"token keyword\">var</span> vm <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"parent\"</span><span class=\"token punctuation\">,</span>\n        el<span class=\"token punctuation\">:</span> <span class=\"token string\">\"#app\"</span><span class=\"token punctuation\">,</span>\n        data<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n          nums<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        methods<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">change</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        components<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n          item<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            props<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"num\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            template<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`\n                    &lt;div>\n                       {{num}}\n                    &lt;/div>\n                `</span></span><span class=\"token punctuation\">,</span>\n            name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"child\"</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>其实是一个很简单的列表组件，渲染出来 <code class=\"language-text\">1 2 3</code> 三个数字。我们先以 <code class=\"language-text\">index</code> 作为key，来跟踪一下它的更新。</p>\n<p>我们接下来只关注 <code class=\"language-text\">item</code> 列表节点的更新，在首次渲染的时候，我们的虚拟节点列表 <code class=\"language-text\">oldChildren</code> 粗略表示是这样的：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[\n  {\n    tag: &quot;item&quot;,\n    key: 0,\n    props: {\n      num: 1\n    }\n  },\n  {\n    tag: &quot;item&quot;,\n    key: 1,\n    props: {\n      num: 2\n    }\n  },\n  {\n    tag: &quot;item&quot;,\n    key: 2,\n    props: {\n      num: 3\n    }\n  }\n];</code></pre></div>\n<p>在我们点击按钮的时候，会对数组做 <code class=\"language-text\">reverse</code> 的操作。那么我们此时生成的 <code class=\"language-text\">newChildren</code> 列表是这样的：</p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\">[\n  {\n    tag: \"item\",\n    key: 0,\n    props: {\n<span class=\"token inserted\">+     num: 3</span>\n    }\n  },\n  {\n    tag: \"item\",\n    key: 1,\n    props: {\n<span class=\"token inserted\">+     num: 2</span>\n    }\n  },\n  {\n    tag: \"item\",\n    key: 2,\n    props: {\n<span class=\"token inserted\">+     num: 1</span>\n    }\n  }\n];</code></pre></div>\n<p>发现什么问题没有？key的顺序没变，传入的值完全变了。这会导致一个什么问题？</p>\n<p>本来按照最合理的逻辑来说，<code class=\"language-text\">旧的第一个vnode</code> 是应该直接完全复用 <code class=\"language-text\">新的第三个vnode</code>的，因为它们本来就应该是同一个vnode，自然所有的属性都是相同的。</p>\n<p>但是在进行子节点的 <code class=\"language-text\">diff</code> 过程中，会在 <code class=\"language-text\">旧首节点和新首节点用</code>sameNode<code class=\"language-text\">对比。</code> 这一步命中逻辑，因为现在<code class=\"language-text\">新旧两次首部节点</code> 的 <code class=\"language-text\">key</code> 都是 <code class=\"language-text\">0</code>了，</p>\n<p>然后把旧的节点中的第一个 <code class=\"language-text\">vnode</code> 和 新的节点中的第一个 <code class=\"language-text\">vnode</code> 进行 <code class=\"language-text\">patchVnode</code> 操作。</p>\n<p>这会发生什么呢？我可以大致给你列一下：\n首先，正如我之前的文章<a href=\"https://juejin.im/post/5e854a32518825736c5b807f#heading-8\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">props的更新如何触发重渲染？</a>里所说，在进行 <code class=\"language-text\">patchVnode</code> 的时候，会去检查 <code class=\"language-text\">props</code> 有没有变更，如果有的话，会通过 <code class=\"language-text\">_props.num = 3</code> 这样的逻辑去更新这个响应式的值，触发 <code class=\"language-text\">dep.notify</code>，触发子组件视图的重新渲染等一套很重的逻辑。</p>\n<p>然后，还会额外的触发以下几个钩子，假设我们的组件上定义了一些dom的属性或者类名、样式、指令，那么都会被全量的更新。</p>\n<ol>\n<li>updateAttrs </li>\n<li>updateClass </li>\n<li>updateDOMListeners</li>\n<li>updateDOMProps</li>\n<li>updateStyle</li>\n<li>updateDirectives</li>\n</ol>\n<p>而这些所有重量级的操作（虚拟dom发明的其中一个目的不就是为了减少真实dom的操作么？），都可以通过直接复用 <code class=\"language-text\">第三个vnode</code> 来避免，是因为我们偷懒写了 <code class=\"language-text\">index</code> 作为 <code class=\"language-text\">key</code>，而导致所有的优化失效了。</p>\n<h3 id=\"节点删除场景\"><a href=\"#%E8%8A%82%E7%82%B9%E5%88%A0%E9%99%A4%E5%9C%BA%E6%99%AF\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>节点删除场景</h3>\n<p>另外，除了会导致性能损耗以外，在<code class=\"language-text\">删除子节点</code>的场景下还会造成更严重的错误，</p>\n<p>可以看<a href=\"https://juejin.im/user/584a7760128fe1006c7b17f9\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">sea_ljf</a>同学提供的这个<a href=\"https://codesandbox.io/s/ancient-moon-427u7\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">demo</a>。</p>\n<p>假设我们有这样的一段代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>app<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">v-for</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>(value, index) in arr<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">:key</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>index<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>test</span> <span class=\"token punctuation\">/></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>handleDelete<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>delete<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\">\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"App\"</span><span class=\"token punctuation\">,</span>\n    el<span class=\"token punctuation\">:</span> <span class=\"token string\">'#app'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        arr<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    methods<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">handleDelete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    components<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      test<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        template<span class=\"token punctuation\">:</span> <span class=\"token string\">\"&lt;li>{{Math.random()}}&lt;/li>\"</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>那么一开始的 <code class=\"language-text\">vnode列表</code>是：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    tag<span class=\"token punctuation\">:</span> <span class=\"token string\">\"li\"</span><span class=\"token punctuation\">,</span>\n    key<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 这里其实子组件对应的是第一个 假设子组件的text是1</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    tag<span class=\"token punctuation\">:</span> <span class=\"token string\">\"li\"</span><span class=\"token punctuation\">,</span>\n    key<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 这里其实子组件对应的是第二个 假设子组件的text是2</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    tag<span class=\"token punctuation\">:</span> <span class=\"token string\">\"li\"</span><span class=\"token punctuation\">,</span>\n    key<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 这里其实子组件对应的是第三个 假设子组件的text是3</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>有一个细节需要注意，正如我上一篇文章中所提到的<a href=\"https://juejin.im/post/5e854a32518825736c5b807f#heading-7\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">为什么说 Vue 的响应式更新比 React 快？</a>，Vue 对于组件的 <code class=\"language-text\">diff</code> 是不关心子组件内部实现的，它只会看你在模板上声明的传递给子组件的一些属性是否有更新。</p>\n<p>也就是和v-for平级的那部分，回顾一下判断 <code class=\"language-text\">sameNode</code> 的时候，只会判断<code class=\"language-text\">key</code>、 <code class=\"language-text\">tag</code>、<code class=\"language-text\">是否有data的存在（不关心内部具体的值）</code>、<code class=\"language-text\">是否是注释节点</code>、<code class=\"language-text\">是否是相同的input type</code>，来判断是否可以复用这个节点。</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">v-for</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>(value, index) in arr<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">:key</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>index<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> // 这里声明的属性\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>test</span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>有了这些前置知识以后，我们来看看，点击删除子元素后，<code class=\"language-text\">vnode 列表</code> 变成什么样了。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">[</span>\n  <span class=\"token comment\">// 第一个被删了</span>\n  <span class=\"token punctuation\">{</span>\n    tag<span class=\"token punctuation\">:</span> <span class=\"token string\">\"li\"</span><span class=\"token punctuation\">,</span>\n    key<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 这里其实上一轮子组件对应的是第二个 假设子组件的text是2</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    tag<span class=\"token punctuation\">:</span> <span class=\"token string\">\"li\"</span><span class=\"token punctuation\">,</span>\n    key<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 这里其实子组件对应的是第三个 假设子组件的text是3</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>虽然在注释里我们自己清楚的知道，第一个 <code class=\"language-text\">vnode</code> 被删除了，但是对于 Vue 来说，它是感知不到子组件里面到底是什么样的实现（它不会深入子组件去对比文本内容），那么这时候 Vue 会怎么 <code class=\"language-text\">patch</code> 呢？</p>\n<p>由于对应的 <code class=\"language-text\">key</code>使用了 <code class=\"language-text\">index</code>导致的错乱，它会把 </p>\n<ol>\n<li><code class=\"language-text\">原来的第一个节点text: 1</code>直接复用。</li>\n<li><code class=\"language-text\">原来的第二个节点text: 2</code>直接复用。</li>\n<li>然后发现新节点里少了一个，直接把多出来的第三个节点<code class=\"language-text\">text: 3</code> 丢掉。</li>\n</ol>\n<p>至此为止，我们本应该把 <code class=\"language-text\">text: 1</code>节点删掉，然后<code class=\"language-text\">text: 2</code>、<code class=\"language-text\">text: 3</code> 节点复用，就变成了错误的把 <code class=\"language-text\">text: 3</code> 节点给删掉了。</p>\n<h2 id=\"为什么不要用随机数作为key？\"><a href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E8%A6%81%E7%94%A8%E9%9A%8F%E6%9C%BA%E6%95%B0%E4%BD%9C%E4%B8%BAkey%EF%BC%9F\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>为什么不要用随机数作为key？</h2>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>item</span>\n  <span class=\"token attr-name\">:key</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Math.random()<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">v-for</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>(num, index) in nums<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">:num</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>num<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">:class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>`item${num}`<span class=\"token punctuation\">\"</span></span>\n<span class=\"token punctuation\">/></span></span></code></pre></div>\n<p>其实我听过一种说法，既然官方要求一个 <code class=\"language-text\">唯一的key</code>，是不是可以用 <code class=\"language-text\">Math.random()</code> 作为 <code class=\"language-text\">key</code> 来偷懒？这是一个很鸡贼的想法，看看会发生什么吧。</p>\n<p>首先 <code class=\"language-text\">oldVnode</code> 是这样的：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[\n  {\n    tag: &quot;item&quot;,\n    key: 0.6330715699108844,\n    props: {\n      num: 1\n    }\n  },\n  {\n    tag: &quot;item&quot;,\n    key: 0.25104533240710514,\n    props: {\n      num: 2\n    }\n  },\n  {\n    tag: &quot;item&quot;,\n    key: 0.4114769152411637,\n    props: {\n      num: 3\n    }\n  }\n];</code></pre></div>\n<p>更新以后是：</p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\">[\n  {\n    tag: \"item\",\n<span class=\"token inserted\">+   key: 0.11046018699748683,</span>\n    props: {\n<span class=\"token inserted\">+     num: 3</span>\n    }\n  },\n  {\n    tag: \"item\",\n<span class=\"token inserted\">+   key: 0.8549799545696619,</span>\n    props: {\n<span class=\"token inserted\">+     num: 2</span>\n    }\n  },\n  {\n    tag: \"item\",\n<span class=\"token inserted\">+   key: 0.18674467938937478,</span>\n    props: {\n<span class=\"token inserted\">+     num: 1</span>\n    }\n  }\n];</code></pre></div>\n<p>可以看到，<code class=\"language-text\">key</code> 变成了完全全新的 3 个随机数。</p>\n<p>上面说到，<code class=\"language-text\">diff</code> 子节点的首尾对比如果都没有命中，就会进入 <code class=\"language-text\">key</code> 的详细对比过程，简单来说，就是利用旧节点的 <code class=\"language-text\">key -&gt; index</code> 的关系建立一个 <code class=\"language-text\">map</code> 映射表，然后用新节点的 <code class=\"language-text\">key</code> 去匹配，如果没找到的话，就会调用 <code class=\"language-text\">createElm</code> 方法 <strong>重新建立</strong> 一个新节点。</p>\n<p>具体代码在这：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 建立旧节点的 key -> index 映射表</span>\noldKeyToIdx <span class=\"token operator\">=</span> <span class=\"token function\">createKeyToOldIdx</span><span class=\"token punctuation\">(</span>oldCh<span class=\"token punctuation\">,</span> oldStartIdx<span class=\"token punctuation\">,</span> oldEndIdx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 去映射表里找可以复用的 index</span>\nidxInOld <span class=\"token operator\">=</span> <span class=\"token function\">findIdxInOld</span><span class=\"token punctuation\">(</span>newStartVnode<span class=\"token punctuation\">,</span> oldCh<span class=\"token punctuation\">,</span> oldStartIdx<span class=\"token punctuation\">,</span> oldEndIdx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 一定是找不到的，因为新节点的 key 是随机生成的。</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isUndef</span><span class=\"token punctuation\">(</span>idxInOld<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 完全通过 vnode 新建一个真实的子节点</span>\n  <span class=\"token function\">createElm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>也就是说，咱们的这个更新过程可以这样描述：\n<code class=\"language-text\">123</code> -> 前面重新创建三个子组件 -> <code class=\"language-text\">321123</code>  -> 删除、销毁后面三个子组件 -> <code class=\"language-text\">321</code>。</p>\n<p>发现问题了吧？这是毁灭性的灾难，创建新的组件和销毁组件的成本你们晓得的伐……本来仅仅是对组件移动位置就可以完成的更新，被我们毁成这样了。</p>\n<h2 id=\"总结\"><a href=\"#%E6%80%BB%E7%BB%93\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>总结</h2>\n<p>经过这样的一段旅行，<code class=\"language-text\">diff</code> 这个庞大的过程就结束了。</p>\n<p>我们收获了什么？</p>\n<ol>\n<li>用组件唯一的 <code class=\"language-text\">id</code>（一般由后端返回）作为它的 <code class=\"language-text\">key</code>，实在没有的情况下，可以在获取到列表的时候通过某种规则为它们创建一个 <code class=\"language-text\">key</code>，并保证这个 <code class=\"language-text\">key</code> 在组件整个生命周期中都保持稳定。</li>\n<li>如果你的列表顺序会改变，别用 <code class=\"language-text\">index</code> 作为 <code class=\"language-text\">key</code>，和没写基本上没区别，因为不管你数组的顺序怎么颠倒，index 都是 <code class=\"language-text\">0, 1, 2</code> 这样排列，导致 Vue 会复用错误的旧子节点，做很多额外的工作。列表顺序不变也尽量别用，可能会误导新人。</li>\n<li>千万别用随机数作为 <code class=\"language-text\">key</code>，不然旧节点会被全部删掉，新节点重新创建，你的老板会被你气死。</li>\n</ol>","timeToRead":13,"frontmatter":{"title":"为什么 Vue 中不要用 index 作为 key？（diff 算法详解）","date":"April 02, 2020","spoiler":""},"fields":{"slug":"/592778801/","langKey":"en"}}},"pageContext":{"slug":"/592778801/","previous":{"fields":{"slug":"/591974262/","langKey":"en","directoryName":"591974262"},"frontmatter":{"title":"Vue 和 React 对于组件的更新粒度有什么区别？"}},"next":{"fields":{"slug":"/593881324/","langKey":"en","directoryName":"593881324"},"frontmatter":{"title":"Vue 的生命周期之间到底做了什么事清？（源码详解）"}},"translations":[],"translatedLinks":[]}},"staticQueryHashes":["336482444"]}