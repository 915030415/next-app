{"componentChunkName":"component---src-templates-blog-post-js","path":"/812799294/","result":{"data":{"site":{"siteMetadata":{"title":"ssh的博客","author":"ssh"}},"markdownRemark":{"id":"245165ef-1919-522e-91ea-09c58d376e12","html":"<p><img src=\"https://images.gitee.com/uploads/images/2021/0217/222137_7c85515f_1087321.png\" alt=\"Vite\" title=\"屏幕截图.png\"></p>\n<p>前几天，尤雨溪在各个社交平台宣布 Vite 2.0 发布了。</p>\n<p>看得出他对 Vite 倾注了很多感情，甚至都冷落了 Vue3，停更了两个多月。</p>\n<p><img src=\"https://images.gitee.com/uploads/images/2021/0218/200622_06d60673_1087321.png\" alt=\"Vue3\" title=\"屏幕截图.png\"></p>\n<p>相关的中文公告已经有翻译了，可以在<a href=\"https://zhuanlan.zhihu.com/p/351147547\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">尤雨溪的知乎文章：Vite 2.0 发布了</a>中查看。</p>\n<p>这篇文章来谈谈 Vite 2.0 的发布中，几个让我比较感兴趣的技术点。</p>\n<h2 id=\"vite-原理\"><a href=\"#vite-%E5%8E%9F%E7%90%86\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Vite 原理</h2>\n<p>为什么会出现 Vite？在过去的 Webpack、Rollup 等构建工具的时代，我们所写的代码一般都是基于 ES Module 规范，在文件之间通过 <code class=\"language-text\">import</code> 和 <code class=\"language-text\">export</code> 形成一个很大的依赖图。</p>\n<p>这些构建工具在本地开发调试的时候，也都会<strong>提前把你的模块</strong>先打包成浏览器可读取的 js bundle，虽然有诸如路由懒加载等优化手段，但懒加载并不代表懒构建，Webpack 还是需要把你的异步路由用到的模块提前构建好。</p>\n<p>当你的项目越来越大的时候，启动也难免变的越来越慢，甚至可能达到分钟级别。而 <code class=\"language-text\">HMR</code> 热更新也会达到好几秒的耗时。</p>\n<p>Vite 则别出心裁的利用了<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">浏览器的原生 ES Module 支持</a>，直接在 html 文件里写诸如这样的代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">// index.html\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>app<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>module<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\">\n  <span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createApp <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span>\n  <span class=\"token keyword\">import</span> Main <span class=\"token keyword\">from</span> <span class=\"token string\">'./Main.vue'</span>\n\n  <span class=\"token function\">createApp</span><span class=\"token punctuation\">(</span>Main<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#app'</span><span class=\"token punctuation\">)</span>\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Vite 会在本地帮你启动一个服务器，当浏览器读取到这个 html 文件之后，会在执行到 import 的时候才去向服务端发送 <code class=\"language-text\">Main.vue</code> 模块的请求，Vite 此时在利用内部的一系列黑魔法，包括 Vue 的 template 解析，代码的编译等等，解析成浏览器可以执行的 js 文件返回到浏览器端。</p>\n<p>这就保证了只有在真正使用到这个模块的时候，浏览器才会请求并且解析这个模块，最大程度的做到了按需加载。</p>\n<p>用 Vite 官网上的图来解释，传统的 bundle 模式是这样的：</p>\n<p><img src=\"https://images.gitee.com/uploads/images/2021/0221/134955_717f9a0a_1087321.png\" alt=\"传统 bundle\" title=\"屏幕截图.png\"></p>\n<p>而基于 ESM 的构建模式则是这样的：</p>\n<p><img src=\"https://images.gitee.com/uploads/images/2021/0221/135014_e69e1022_1087321.png\" alt=\"基于 ESM\" title=\"屏幕截图.png\"></p>\n<p>灰色部分是暂时没有用到的路由，甚至完全不会参与构建过程，随着项目里的路由越来越多，构建速度也不会变慢。</p>\n<h2 id=\"依赖预编译\"><a href=\"#%E4%BE%9D%E8%B5%96%E9%A2%84%E7%BC%96%E8%AF%91\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>依赖预编译</h2>\n<p>依赖预编译，其实是 Vite 2.0 在为用户启动开发服务器之前，先用 <code class=\"language-text\">esbuild</code> 把检测到的依赖预先构建了一遍。</p>\n<p>也许你会疑惑，不是一直说好的 no-bundle 吗，怎么还是走启动时编译这条路线了？尤老师这么做当然是有理由的，我们先以导入 <code class=\"language-text\">lodash-es</code> 这个包为例。</p>\n<p>当你用 <code class=\"language-text\">import { debounce } from &#39;lodash&#39;</code> 导入一个命名函数的时候，可能你理想中的场景就是浏览器去下载只包含这个函数的文件。但其实没那么理想，<code class=\"language-text\">debounce</code> 函数的模块内部又依赖了很多其他函数，形成了一个依赖图。</p>\n<p>当浏览器请求 <code class=\"language-text\">debounce</code> 的模块时，又会发现内部有 2 个 <code class=\"language-text\">import</code>，再这样延伸下去，这个函数内部竟然带来了 600 次请求，耗时会在 1s 左右。</p>\n<p><img src=\"https://images.gitee.com/uploads/images/2021/0221/155744_89195130_1087321.png\" alt=\"lodash 请求依赖链路\" title=\"屏幕截图.png\"></p>\n<p>这当然是不可接受的，于是尤老师想了个折中的办法，正好利用 <a href=\"https://github.com/evanw/esbuild\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Esbuild</a> 接近无敌的构建速度，让你在没有感知的情况下在启动的时候预先帮你把 <code class=\"language-text\">debounce</code> 所用到的所有内部模块全部打包成一个传统的 <code class=\"language-text\">js bundle</code>。</p>\n<p><code class=\"language-text\">Esbuild</code> 使用 Go 编写，并且比以 JavaScript 编写的打包器预构建依赖快 10-100 倍。</p>\n<p><img src=\"https://images.gitee.com/uploads/images/2021/0221/125137_cee193c2_1087321.png\" alt=\"Esbuild 的速度\" title=\"屏幕截图.png\"></p>\n<p>在 <code class=\"language-text\">httpServer.listen</code> 启动开发服务器之前，会先把这个函数劫持改写，放入依赖预构建的前置步骤，<a href=\"https://github.com/vitejs/vite/blob/main/packages/vite/src/node/server/index.ts\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Vite 启动服务器相关代码</a>。</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// server/index.ts</span>\n<span class=\"token keyword\">const</span> listen <span class=\"token operator\">=</span> httpServer<span class=\"token punctuation\">.</span>listen<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>httpServer<span class=\"token punctuation\">)</span>\nhttpServer<span class=\"token punctuation\">.</span>listen <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> container<span class=\"token punctuation\">.</span><span class=\"token function\">buildStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 这里会进行依赖的预构建</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">runOptimize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    httpServer<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">any</span></code></pre></div>\n<p>而 <code class=\"language-text\">runOptimize</code> 相关的代码则在 <a href=\"https://github.com/vitejs/vite/blob/main/packages/vite/src/node/optimizer/index.ts\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Github optimizer</a> 中。</p>\n<p>首先会根据本次运行的入口，来扫描其中的依赖：</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> deps<span class=\"token punctuation\">:</span> Record<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> missing<span class=\"token punctuation\">:</span> Record<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>newDeps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> deps<span class=\"token punctuation\">,</span> missing <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">scanImports</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">scanImports</code> 其实就是利用 <code class=\"language-text\">Esbuild</code> 构建时提供的钩子去扫描文件中的依赖，收集到 <code class=\"language-text\">deps</code> 变量里，在扫描到入口文件（比如 <code class=\"language-text\">index.html</code>）中依赖的模块后，形成类似这样的依赖路径数据结构：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"lodash-es\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"node_modules/lodash-es\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>之后再根据分析出来的依赖，使用 <code class=\"language-text\">Esbuild</code> 把它们提前打包成单文件的 bundle。</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> esbuildService <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">ensureService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">await</span> esbuildService<span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  entryPoints<span class=\"token punctuation\">:</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>flatIdDeps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  bundle<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  format<span class=\"token punctuation\">:</span> <span class=\"token string\">'esm'</span><span class=\"token punctuation\">,</span>\n  external<span class=\"token punctuation\">:</span> config<span class=\"token punctuation\">.</span>optimizeDeps<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>exclude<span class=\"token punctuation\">,</span>\n  logLevel<span class=\"token punctuation\">:</span> <span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span>\n  splitting<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  sourcemap<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  outdir<span class=\"token punctuation\">:</span> cacheDir<span class=\"token punctuation\">,</span>\n  treeShaking<span class=\"token punctuation\">:</span> <span class=\"token string\">'ignore-annotations'</span><span class=\"token punctuation\">,</span>\n  metafile<span class=\"token punctuation\">:</span> esbuildMetaPath<span class=\"token punctuation\">,</span>\n  define<span class=\"token punctuation\">,</span>\n  plugins<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token function\">esbuildDepPlugin</span><span class=\"token punctuation\">(</span>flatIdDeps<span class=\"token punctuation\">,</span> flatIdToExports<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>在浏览器请求相关模块时，返回这个预构建好的模块。这样，当浏览器请求 <code class=\"language-text\">lodash-es</code> 中的 <code class=\"language-text\">debounce</code> 模块的时候，就可以保证只发生一次接口请求了。</p>\n<p>你可以理解为，这一步和 <code class=\"language-text\">Webpack</code> 所做的构建一样，只不过速度快了几十倍。</p>\n<p>在预构建这个步骤中，还会对 <code class=\"language-text\">CommonJS</code> 模块进行分析，方便后面需要统一处理成浏览器可以执行的 <code class=\"language-text\">ES Module</code>。</p>\n<h2 id=\"插件机制\"><a href=\"#%E6%8F%92%E4%BB%B6%E6%9C%BA%E5%88%B6\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>插件机制</h2>\n<p>很多同学提到 Vite，第一反应就是生态不够成熟，其他构建工具有那么多的第三方插件，提供了各种各样开箱即用的便捷功能，Vite 需要多久才能赶上呢？</p>\n<p>Vite 从 preact 的 WMR 中得到了启发，把插件机制做成<strong>兼容 Rollup</strong> 的格式。</p>\n<p>于是便有了这个<strong>相亲相爱</strong>的 LOGO：</p>\n<p><img src=\"https://images.gitee.com/uploads/images/2021/0221/151024_0f3cd350_1087321.png\" alt=\"Vite Rollup Plugins\" title=\"屏幕截图.png\"></p>\n<p>目前和 vite 兼容或者内置的插件，可以查看<a href=\"https://vite-rollup-plugins.patak.dev/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">vite-rollup-plugins</a>。</p>\n<p>简单的介绍一下 Rollup 插件，其实插件这个东西，就是 Rollup 对外提供一些时机的钩子，还有一些工具方法，让用户去写一些配置代码，以此介入 Rollup 运行的各个时机之中。</p>\n<p>比如在打包之前注入某些东西，或者改变某些产物结构，仅此而已。</p>\n<p>而 Vite 需要做的就是基于 Rollup 设计的接口进行扩展，在保证 Rollup 插件兼容的可能性的同时，再加入一些 Vite 特有的钩子和属性来扩展。</p>\n<p>举个简单的例子，<a href=\"https://github.com/rollup/plugins/blob/master/packages/image/src/index.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@rollup/plugin-image</a> 可以把图片模块解析成 base64 格式，它的源码其实很简单：</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">image</span><span class=\"token punctuation\">(</span>opts <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> options <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> defaults<span class=\"token punctuation\">,</span> opts<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> filter <span class=\"token operator\">=</span> <span class=\"token function\">createFilter</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">.</span>include<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">.</span>exclude<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">'image'</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token function\">load</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">const</span> mime <span class=\"token operator\">=</span> mimeTypes<span class=\"token punctuation\">[</span><span class=\"token function\">extname</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>mime<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// not an image</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">const</span> isSvg <span class=\"token operator\">=</span> mime <span class=\"token operator\">===</span> mimeTypes<span class=\"token punctuation\">[</span><span class=\"token string\">'.svg'</span><span class=\"token punctuation\">]</span>\n      <span class=\"token keyword\">const</span> format <span class=\"token operator\">=</span> isSvg <span class=\"token operator\">?</span> <span class=\"token string\">'utf-8'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'base64'</span>\n      <span class=\"token keyword\">const</span> source <span class=\"token operator\">=</span> <span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> format<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/[\\r\\n]+/gm</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">const</span> dataUri <span class=\"token operator\">=</span> <span class=\"token function\">getDataUri</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> format<span class=\"token punctuation\">,</span> isSvg<span class=\"token punctuation\">,</span> mime<span class=\"token punctuation\">,</span> source <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">const</span> code <span class=\"token operator\">=</span> options<span class=\"token punctuation\">.</span>dom\n        <span class=\"token operator\">?</span> <span class=\"token function\">domTemplate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> dataUri <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">:</span> <span class=\"token function\">constTemplate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> dataUri <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n      <span class=\"token keyword\">return</span> code<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>其实就是在 <code class=\"language-text\">load</code> 这个钩子，读取模块时，把图片转换成相应格式的 <code class=\"language-text\">data-uri</code>，所以 Vite 只需要在读取模块的时候，也去兼容执行相关的钩子即可。</p>\n<p>虽然 Vite 很多行为和 Rollup 构建不同，但他们内部有很多相似的行为和时机，只要确保 Rollup 插件只使用了这些共有的钩子，就很容易做到插件的通用。</p>\n<p>可以参考 <a href=\"https://cn.vitejs.dev/guide/api-plugin.html#rollup-%E6%8F%92%E4%BB%B6%E5%85%BC%E5%AE%B9%E6%80%A7\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Vite 官网文档 —— 插件部分</a></p>\n<blockquote>\n<p>一般来说，只要一个 Rollup 插件符合以下标准，那么它应该只是作为一个 Vite 插件:</p>\n<ul>\n<li>没有使用 moduleParsed 钩子。</li>\n<li>它在打包钩子和输出钩子之间没有很强的耦合。</li>\n<li>如果一个 Rollup 插件只在构建阶段有意义，则在 build.rollupOptions.plugins 下指定即可。</li>\n</ul>\n</blockquote>\n<p>Vite 后面的目标应该也是尽可能和 Rollup 相关的插件生态打通，社区也会一起贡献力量，希望 Vite 的生态越来越好。</p>\n<h2 id=\"比较\"><a href=\"#%E6%AF%94%E8%BE%83\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>比较</h2>\n<p>和 Vite 同时期出现的现代化构建工具还有：</p>\n<ul>\n<li><a href=\"https://www.snowpack.dev/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Snowpack - The faster frontend build tool</a></li>\n<li><a href=\"https://github.com/preactjs/wmr\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">preactjs/wmr: 👩‍🚀 The tiny all-in-one development tool for modern web apps.</a></li>\n<li><a href=\"https://modern-web.dev/docs/dev-server/overview/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Web Dev Server: Modern Web</a></li>\n</ul>\n<h3 id=\"snowpack\"><a href=\"#snowpack\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Snowpack</h3>\n<p>Snowpack 和 Vite 比较相似，也是基于 ESM 来实现开发环境模块加载，但是它的构建时却是交给用户自己选择，整体的打包体验显得有点支离破碎。</p>\n<p>而 Vite 直接整合了 Rollup，为用户提供了完善、开箱即用的解决方案，并且由于这些集成，也方便扩展更多的高级功能。</p>\n<h3 id=\"wmr\"><a href=\"#wmr\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>WMR</h3>\n<p>WMR 则是为 Preact 而生的，如果你在使用 Preact，可以优先考虑使用这个工具。</p>\n<h3 id=\"webdev-server\"><a href=\"#webdev-server\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>@web/dev-server</h3>\n<p>这个工具并未提供开箱即用的框架支持，也需要手动设置 Rollup 构建配置，不过这个项目里包含的很多工具也可以让 Vite 用户受益。</p>\n<p>更具体的比较可以参考<a href=\"https://cn.vitejs.dev/guide/comparisons.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Vite 文档 —— 比较</a></p>\n<h2 id=\"总结\"><a href=\"#%E6%80%BB%E7%BB%93\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>总结</h2>\n<p>Vite 是一个充满魔力的现代化构建工具，尤老师也在各个平台放下狠话，说要替代 Webpack。其实 Webpack 在上个世代也是一个贡献很大的构建工具，只是由于新特性的出现，有了可以解决它的诟病的解决方案。</p>\n<p>目前我个人觉得，一些轻型的项目（不需要一些特别奇怪的依赖构建）完全可以开始尝试 Vite，比如：</p>\n<ul>\n<li>各种框架、库中的展示 demo 项目。</li>\n<li>轻量级的一些企业项目。</li>\n</ul>\n<p>也衷心祝福 Vite 的生态越来越好，共同迎接这个构建的新世代。</p>\n<p>不过到那个时候，我可能还会挺怀念从前 Webpack 怀念构建的时候，那几分钟一本正经的摸鱼时刻 😆。</p>\n<h2 id=\"感谢大家\"><a href=\"#%E6%84%9F%E8%B0%A2%E5%A4%A7%E5%AE%B6\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>感谢大家</h2>\n<p>欢迎关注 ssh，前端潮流趋势、原创面试热点文章应有尽有。</p>\n<p>记得关注后加我好友，我会不定期分享前端知识，行业信息。2021 陪你一起度过。</p>\n<p><img src=\"https://user-images.githubusercontent.com/23615778/108619258-76929d80-745e-11eb-90bf-023abec85d80.png\" alt=\"image\"></p>","timeToRead":9,"frontmatter":{"title":"浅谈 Vite 2.0 原理，依赖预编译，插件机制是如何兼容 Rollup 的？","date":"February 21, 2021","spoiler":""},"fields":{"slug":"/812799294/","langKey":"en"}}},"pageContext":{"slug":"/812799294/","previous":{"fields":{"slug":"/803777729/","langKey":"en","directoryName":"803777729"},"frontmatter":{"title":"尤雨溪：关于 Vue3 和生活，想和前端们聊聊这些"}},"next":{"fields":{"slug":"/818217827/","langKey":"en","directoryName":"818217827"},"frontmatter":{"title":"TypeScript 中你不一定知道的 top types，在用 any 之前先试试 unknown？"}},"translations":[],"translatedLinks":[]}},"staticQueryHashes":["336482444"]}