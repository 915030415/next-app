{"componentChunkName":"component---src-templates-blog-post-js","path":"/751261724/","result":{"data":{"site":{"siteMetadata":{"title":"ssh的博客","author":"ssh"}},"markdownRemark":{"id":"1d97ae4b-64e6-5f32-87e9-ad7cb251716a","html":"<h2 id=\"前言\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>在大型项目开发中，经常会遇到这样一个场景，QA 丢给你一个出问题的链接，但是你完全不知道这个页面 &#x26; 组件对应的文件位置。</p>\n<p>这时候如果可以<strong>点击页面上的组件，在 VSCode 中自动跳转到对应文件，并定位到对应行号</strong>岂不美哉？</p>\n<p><a href=\"https://github.com/zthxxx/react-dev-inspector\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">react-dev-inspector</a> 就是应此需求而生。</p>\n<p>使用非常简单方便，看完这张动图你就秒懂：</p>\n<p><img src=\"https://user-images.githubusercontent.com/23615778/101280479-42ff8a00-3804-11eb-8b7d-15986e2b44fb.gif\" alt=\"preview\"></p>\n<p>可以在 <a href=\"https://react-dev-inspector.zthxxx.me/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">预览网站</a> 体验一下。</p>\n<h2 id=\"使用方式\"><a href=\"#%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>使用方式</h2>\n<p>简单来说就是三步：</p>\n<ol>\n<li>\n<p><strong>构建时</strong>：</p>\n<ul>\n<li>需要加一个 <code class=\"language-text\">webpack loader</code> 去遍历编译前的的 <code class=\"language-text\">AST</code> 节点，在 DOM 节点上加上文件路径、名称等相关的信息 。</li>\n<li>需要用 <code class=\"language-text\">DefinePlugin</code> 注入一下项目运行时的根路径，后续要用来拼接文件路径，打开 VSCode 相应的文件。</li>\n</ul>\n</li>\n<li><strong>运行时</strong>：需要在 React 组件的最外层包裹 <code class=\"language-text\">Inspector</code> 组件，用于在浏览器端监听快捷键，弹出 debug 的遮罩层，在点击遮罩层的时候，利用 <code class=\"language-text\">fetch</code> 向本机服务发送一个打开 VSCode 的请求。</li>\n<li><strong>本地服务</strong>：需要启动 <code class=\"language-text\">react-dev-utils</code> 里的一个中间件，监听一个特定的路径，在本机服务端执行打开 VSCode 的指令。</li>\n</ol>\n<p>下面简单分析一下这几步到底做了什么。</p>\n<h2 id=\"原理简化\"><a href=\"#%E5%8E%9F%E7%90%86%E7%AE%80%E5%8C%96\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>原理简化</h2>\n<h3 id=\"构建时\"><a href=\"#%E6%9E%84%E5%BB%BA%E6%97%B6\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>构建时</h3>\n<p>首先如果在浏览器端想知道这个组件属于哪个文件，那么不可避免的要在构建时就去遍历代码文件，根据代码的结构解析生成 AST，然后在每个组件的 DOM 元素上挂上当前组件的对应文件位置和行号，所以在开发环境最终生成的 DOM 元素是这样的：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span>\n  <span class=\"token attr-name\">data-inspector-line</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>11<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">data-inspector-column</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>4<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">data-inspector-relative-path</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>src/components/Slogan/Slogan.tsx<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>css-1f15bld-Description e1vquvfb0<span class=\"token punctuation\">\"</span></span>\n<span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span>\n    <span class=\"token attr-name\">data-inspector-line</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>44<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">data-inspector-column</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>10<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">data-inspector-relative-path</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>src/layouts/index.tsx<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token punctuation\">></span></span>\n    Inspect react components and click will jump to local IDE to view component\n    code.\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n;</code></pre></div>\n<p>这样就可以在输入快捷键的时候，开启 debug 模式，让 DOM 在 hover 的时候增加一个遮罩层并展示组件对应的信息：\n<img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/eb5825a6e5f14077b99ba5124d89e532~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"image\"></p>\n<p>这一步通过 <code class=\"language-text\">webpack loader</code> 拿到<strong>未编译</strong>的 <code class=\"language-text\">JSX</code> 源码，再配合 <code class=\"language-text\">AST</code> 的处理就可以完成。</p>\n<h3 id=\"运行时\"><a href=\"#%E8%BF%90%E8%A1%8C%E6%97%B6\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>运行时</h3>\n<p>既然需要在浏览器端增加 hover 事件，添加遮罩框元素，那么肯定不可避免的要侵入运行时的代码，这里通过在整个应用的最外层包裹一个 <code class=\"language-text\">Inspector</code> 来尽可能的减少入侵。</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Inspector <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dev-inspector'</span>\n\n<span class=\"token keyword\">const</span> InspectorWrapper <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">===</span> <span class=\"token string\">'development'</span>\n  <span class=\"token operator\">?</span> Inspector\n  <span class=\"token punctuation\">:</span> React<span class=\"token punctuation\">.</span>Fragment\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Layout</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>InspectorWrapper\n      keys<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span><span class=\"token string\">'control'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'shift'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'command'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// default keys</span>\n      <span class=\"token operator\">...</span>  <span class=\"token comment\">// Props see below</span>\n    <span class=\"token operator\">></span>\n     <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Page</span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>InspectorWrapper</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这里也可以自定义你喜欢的快捷键，用来开启 debug 模式。</p>\n<p>开启了 debug 模式之后，鼠标 hover 到你想要调试的组件，就会展现出遮罩框，再点击一下，就会自动在 VSCode 中打开对应的组件文件，并且跳转到对应的行和列。</p>\n<p>那么关键在于，这个跳转其实是借助 fetch <strong>发送了一个请求到本机的服务端</strong>，利用<strong>服务端执行脚本命令</strong>如 <code class=\"language-text\">code src/Inspector/index.ts</code> 这样的命令来打开 VSCode，这就要借助我说的第三步，启动本地服务并引入中间件了。</p>\n<h3 id=\"本地服务\"><a href=\"#%E6%9C%AC%E5%9C%B0%E6%9C%8D%E5%8A%A1\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>本地服务</h3>\n<p>还记得 <code class=\"language-text\">create-react-app</code> 或者 <code class=\"language-text\">vue-cli</code> 启动的前端项目，在错误时会弹出一个全局的遮罩和对应的堆栈信息，点击以后就会跳转到 VSCode 对应的文件么？没错，<code class=\"language-text\">react-dev-inspector</code> 也正是直接借助了 <code class=\"language-text\">create-react-app</code> 底层的工具包 <code class=\"language-text\">react-dev-utils</code> 去实现。（没错 <code class=\"language-text\">create-react-app</code> 创建的项目自带这个服务，不需要手动加载这一步了）</p>\n<p><code class=\"language-text\">react-dev-utils</code> 为这个功能封装了一个中间件： <a href=\"https://github.com/facebook/create-react-app/blob/master/packages/react-dev-utils/errorOverlayMiddleware.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">errorOverlayMiddleware</a></p>\n<p>其实代码也很简单，就是监听了一个特殊的 URL：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// launchEditorEndpoint.js</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token string\">\"/__open-stack-frame-in-editor\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// errorOverlayMiddleware.js</span>\n<span class=\"token keyword\">const</span> launchEditor <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./launchEditor\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> launchEditorEndpoint <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./launchEditorEndpoint\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">createLaunchEditorMiddleware</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">launchEditorMiddleware</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span>launchEditorEndpoint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> lineNumber <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>lineNumber<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> colNumber <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>colNumber<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">launchEditor</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>fileName<span class=\"token punctuation\">,</span> lineNumber<span class=\"token punctuation\">,</span> colNumber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">launchEditor</code> 这个核心的打开编辑器的方法我们一会再详细分析，现在可以先略过，只要知道我们需要开启这个服务即可。</p>\n<p>这是一个为 <code class=\"language-text\">express</code> 设计的中间件，webpack 的 <code class=\"language-text\">devServer</code> 选项中提供的 <code class=\"language-text\">before</code> 也可以轻松接入这个中间件，如果你的项目不用 <code class=\"language-text\">express</code>，那么你只要参考这个中间件去重写一个即可，只需要监听接口拿到文件相关的信息，调用核心方法 <code class=\"language-text\">launchEditor</code> 即可。</p>\n<p>只要保证这几个步骤的完成，那么这个插件就接入成功了，可以通过在浏览器的控制台执行 <code class=\"language-text\">fetch(&#39;/__open-stack-frame-in-editor?fileName=/Users/admin/app/src/Title.tsx&#39;)</code> 来测试 <code class=\"language-text\">react-dev-utils</code>的服务是否开启成功。</p>\n<h3 id=\"注入绝对路径\"><a href=\"#%E6%B3%A8%E5%85%A5%E7%BB%9D%E5%AF%B9%E8%B7%AF%E5%BE%84\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>注入绝对路径</h3>\n<p>注意上一步的请求中 <code class=\"language-text\">fileName=</code> 后面的前缀是绝对路径，而 DOM 节点上只会保存形如 <code class=\"language-text\">src/Title.tsx</code> 这样的相对路径，源码中会在点击遮罩层的时候去取 <code class=\"language-text\">process.env.PWD</code> 这个变量，和组件上的相对路径拼接后得到完整路径，这样 VSCode 才能顺利打开。</p>\n<p>这需要借助 <code class=\"language-text\">DefinePlugin</code> 把启动所在路径写入到浏览器环境中：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">DefinePlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"process.env.PWD\"</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringfy</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">PWD</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>至此，整套插件集成完毕，简化版的原理解析就结束了。</p>\n<h2 id=\"源码重点\"><a href=\"#%E6%BA%90%E7%A0%81%E9%87%8D%E7%82%B9\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>源码重点</h2>\n<p>看完上面的简化原理解析后，其实大家也差不多能写出一个类似的插件了，只是实现的细节可能不太相同。这里就不一一解析完整的源码了，来看一下源码中比较值得关注的一些细节。</p>\n<h3 id=\"如何在元素上埋点\"><a href=\"#%E5%A6%82%E4%BD%95%E5%9C%A8%E5%85%83%E7%B4%A0%E4%B8%8A%E5%9F%8B%E7%82%B9\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>如何在元素上埋点</h3>\n<p>在浏览器端能找到节点在 VSCode 里的对应的路径，关键就在于编译时的埋点，<code class=\"language-text\">webpack loader</code> 接受代码字符串，返回你处理过后的字符串，用作在元素上增加新属性再合适不过，我们只需要利用 <code class=\"language-text\">babel</code> 中的整套 AST 能力即可做到：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">inspectorLoader</span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">:</span> webpack<span class=\"token punctuation\">.</span>loader<span class=\"token punctuation\">.</span>LoaderContext<span class=\"token punctuation\">,</span>\n  source<span class=\"token punctuation\">:</span> string\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> rootContext<span class=\"token punctuation\">:</span> rootPath<span class=\"token punctuation\">,</span> resourcePath<span class=\"token punctuation\">:</span> filePath <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> ast<span class=\"token punctuation\">:</span> Node <span class=\"token operator\">=</span> <span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span>ast<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">enter</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">:</span> NodePath<span class=\"token operator\">&lt;</span>Node<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">\"JSXOpeningElement\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">doJSXOpeningElement</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span>node <span class=\"token keyword\">as</span> JSXOpeningElement<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> relativePath <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> code <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">generate</span><span class=\"token punctuation\">(</span>ast<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> code\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这是简化后的代码，标准的 <code class=\"language-text\">parse -&gt; traverse -&gt; generate</code> 流程，在遍历的过程中对 <code class=\"language-text\">JSXOpeningElement</code>这种节点类型做处理，把文件相关的信息放到节点上即可：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> doJSXOpeningElement<span class=\"token punctuation\">:</span> NodeHandler<span class=\"token operator\">&lt;</span>\n  JSXOpeningElement<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> relativePath<span class=\"token punctuation\">:</span> string <span class=\"token punctuation\">}</span>\n<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> option<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> stop <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">doJSXPathName</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stop<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> stop <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> relativePath <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> option\n\n  <span class=\"token comment\">// 写入行号</span>\n  <span class=\"token keyword\">const</span> lineAttr <span class=\"token operator\">=</span> <span class=\"token function\">jsxAttribute</span><span class=\"token punctuation\">(</span>\n    <span class=\"token function\">jsxIdentifier</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data-inspector-line'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">stringLiteral</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>loc<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">.</span>line<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 写入列号</span>\n  <span class=\"token keyword\">const</span> columnAttr <span class=\"token operator\">=</span> <span class=\"token function\">jsxAttribute</span><span class=\"token punctuation\">(</span>\n    <span class=\"token function\">jsxIdentifier</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data-inspector-column'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">stringLiteral</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>loc<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">.</span>column<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 写入组件所在的相对路径</span>\n  <span class=\"token keyword\">const</span> relativePathAttr <span class=\"token operator\">=</span> <span class=\"token function\">jsxAttribute</span><span class=\"token punctuation\">(</span>\n    <span class=\"token function\">jsxIdentifier</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data-inspector-relative-path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">stringLiteral</span><span class=\"token punctuation\">(</span>relativePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 在元素上增加这几个属性</span>\n  node<span class=\"token punctuation\">.</span>attributes<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>lineAttr<span class=\"token punctuation\">,</span> columnAttr<span class=\"token punctuation\">,</span> relativePathAttr<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> result<span class=\"token punctuation\">:</span> node <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"获取组件名称\"><a href=\"#%E8%8E%B7%E5%8F%96%E7%BB%84%E4%BB%B6%E5%90%8D%E7%A7%B0\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>获取组件名称</h3>\n<p>在运行时鼠标 hover 在 DOM 节点上，这个时候拿到的只是 DOM 元素，如何获取组件的名称？其实 React 内部会在 DOM 上反向的挂上它所对应的 <code class=\"language-text\">fiber node</code> 的引用，这个引用在 DOM 元素上以 <code class=\"language-text\">__reactInternalInstance</code> 开头命名，可以这样拿到：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * https://stackoverflow.com/questions/29321742/react-getting-a-component-from-a-dom-element-for-debugging\n */</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> getElementFiber <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">:</span> HTMLElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Fiber <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> fiberKey <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>\n    key <span class=\"token operator\">=></span> key<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'__reactInternalInstance$'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fiberKey<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> element<span class=\"token punctuation\">[</span>fiberKey<span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> Fiber\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>由于拿到的 <code class=\"language-text\">fiber</code>可能对应一个普通的 DOM 元素比如 <code class=\"language-text\">div</code> ，而不是对应一个组件 <code class=\"language-text\">fiber</code>，我们肯定期望的是向上查找最近的<strong>组件节点</strong>后展示它的名字（这里使用的是 <code class=\"language-text\">displayName</code> 或者 <code class=\"language-text\">name</code> 属性），由于 <code class=\"language-text\">fiber</code> 是链表结构，可以通过<strong>向上</strong>递归查找 <code class=\"language-text\">return</code> 这个属性，直到找到第一个符合期望的节点。</p>\n<p>这里递归查找 <code class=\"language-text\">fiber</code> 的 <code class=\"language-text\">return</code>，就类似于在 DOM 节点中递归向上查找 <code class=\"language-text\">parentNode</code> 属性，不停的向父节点递归查找。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 这里用正则屏蔽了一些组件名 如果匹配成功则会忽略掉这一层 fiber 继续向上查找</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> debugToolNameRegex <span class=\"token operator\">=</span> <span class=\"token regex\">/^(.*?\\.Provider|.*?\\.Consumer|Anonymous|Trigger|Tooltip|_.*|[a-z].*)$/</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> getSuitableFiber <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>baseFiber<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> Fiber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Fiber <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> fiber <span class=\"token operator\">=</span> baseFiber\n  \n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>fiber<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// while 循环向上递归查找 displayName 符合的组件</span>\n    <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> fiber<span class=\"token punctuation\">.</span>type<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>displayName <span class=\"token operator\">?</span><span class=\"token operator\">?</span> fiber<span class=\"token punctuation\">.</span>type<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>name\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>debugToolNameRegex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> fiber\n    <span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">// 找不到的话 就继续找 return 节点</span>\n    fiber <span class=\"token operator\">=</span> fiber<span class=\"token punctuation\">.</span><span class=\"token keyword\">return</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">fiber</code> 上的属性 <code class=\"language-text\">type</code> 在函数式组件的情况下对应你书写的函数，在 <code class=\"language-text\">class</code> 组件的情况下就对应那个类，取上面的的 <code class=\"language-text\">displayName</code> 或 <code class=\"language-text\">name</code> 属性即可：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> getFiberName <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>fiber<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> Fiber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> string <span class=\"token operator\">|</span> undefined <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> fiberType <span class=\"token operator\">=</span> <span class=\"token function\">getSuitableFiber</span><span class=\"token punctuation\">(</span>fiber<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>type\n  <span class=\"token keyword\">let</span> displayName<span class=\"token punctuation\">:</span> string <span class=\"token operator\">|</span> undefined\n\n  <span class=\"token comment\">// The displayName property is not guaranteed to be a string.</span>\n  <span class=\"token comment\">// It's only safe to use for our purposes if it's a string.</span>\n  <span class=\"token comment\">// github.com/facebook/react-devtools/issues/803</span>\n  <span class=\"token comment\">//</span>\n  <span class=\"token comment\">// https://github.com/facebook/react/blob/v17.0.0/packages/react-devtools-shared/src/utils.js#L90-L112</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> fiberType<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>displayName <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    displayName <span class=\"token operator\">=</span> fiberType<span class=\"token punctuation\">.</span>displayName\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> fiberType<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    displayName <span class=\"token operator\">=</span> fiberType<span class=\"token punctuation\">.</span>name\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> displayName\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/eb5825a6e5f14077b99ba5124d89e532~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"image\"></p>\n<h3 id=\"服务端跳转-vscode-原理\"><a href=\"#%E6%9C%8D%E5%8A%A1%E7%AB%AF%E8%B7%B3%E8%BD%AC-vscode-%E5%8E%9F%E7%90%86\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>服务端跳转 VSCode 原理</h3>\n<p>虽然简单来说，<code class=\"language-text\">react-dev-utils</code> 其实就是开了个接口，当你 fetch 的时候帮你执行 <code class=\"language-text\">code filepath</code> 指令，但是它底层其实是很巧妙的实现了多种编辑器的兼容的。</p>\n<p>如何“猜”出用户在用哪个编辑器？它其实实现定义好了一组进程名对应开启指令的映射表：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token constant\">COMMON_EDITORS_OSX</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">'/Applications/Atom.app/Contents/MacOS/Atom'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'atom'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'/Applications/Visual Studio Code.app/Contents/MacOS/Electron'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'code'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>然后在 <code class=\"language-text\">macOS</code> 和 <code class=\"language-text\">Linux</code> 下，通过执行 <code class=\"language-text\">ps x</code> 命令去列出进程名，通过进程名再去映射对应的打开编辑器的指令。比如你的进程里有 <code class=\"language-text\">/Applications/Visual Studio Code.app/Contents/MacOS/Electron</code>，那说明你用的是 <code class=\"language-text\">VSCode</code>，就获取了 <code class=\"language-text\">code</code> 这个指令。</p>\n<p>之后调用 <code class=\"language-text\">child_process</code> 模块去执行命令即可：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">child_process<span class=\"token punctuation\">.</span><span class=\"token function\">spawn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"code\"</span><span class=\"token punctuation\">,</span> pathInfo<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> stdio<span class=\"token punctuation\">:</span> <span class=\"token string\">\"inherit\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a href=\"https://github.com/facebook/create-react-app/blob/master/packages/react-dev-utils/launchEditor.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">launchEditor 源码地址</a></p>\n<h2 id=\"详细接入教程\"><a href=\"#%E8%AF%A6%E7%BB%86%E6%8E%A5%E5%85%A5%E6%95%99%E7%A8%8B\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>详细接入教程</h2>\n<p>构建时只需要对 webpack 配置做点改动，加入一个全局变量，引入一个 loader 即可。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> DefinePlugin <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'webpack'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">{</span>\n  module<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    rules<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        test<span class=\"token punctuation\">:</span> <span class=\"token regex\">/\\.(jsx|js)$/</span><span class=\"token punctuation\">,</span>\n        use<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token punctuation\">{</span>\n            loader<span class=\"token punctuation\">:</span> <span class=\"token string\">'babel-loader'</span><span class=\"token punctuation\">,</span>\n            options<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n              presets<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'es2015'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token comment\">// 注意这个 loader babel 编译之前执行</span>\n          <span class=\"token punctuation\">{</span>\n            loader<span class=\"token punctuation\">:</span> <span class=\"token string\">'react-dev-inspector/plugins/webpack/inspector-loader'</span><span class=\"token punctuation\">,</span>\n            options<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> exclude<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'想要排除的目录'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  plugins<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefinePlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token string\">'process.env.PWD'</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">PWD</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>如果你的项目是自己搭建而非 <code class=\"language-text\">cra</code> 搭建的，那么有可能你的项目中没有开启 <code class=\"language-text\">errorOverlayMiddleware</code> 中间件提供的服务，你可以在 webpack 的 <code class=\"language-text\">devServer</code> 中开启：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> createErrorOverlayMiddleware <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dev-utils/errorOverlayMiddleware'</span>\n\n<span class=\"token punctuation\">{</span>\n  devServer<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">before</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">createErrorOverlayMiddleware</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>此外需要保证你的命令行本身就可以通过 <code class=\"language-text\">code</code> 命令打开 VSCode 编辑器，如果没有配置这个，可以参考以下步骤：</p>\n<p>1、首先打开 VSCode。</p>\n<p>2、使用 <code class=\"language-text\">command + shift + p</code> (注意 window 下使用 <code class=\"language-text\">ctrl + shift + p</code>) 然后搜索 <code class=\"language-text\">code</code>，选择 <code class=\"language-text\">install &#39;code&#39; command in path</code>。  </p>\n<p>最后，在 React 项目的最外层接入：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Inspector <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dev-inspector'</span>\n\n<span class=\"token keyword\">const</span> InspectorWrapper <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">===</span> <span class=\"token string\">'development'</span>\n  <span class=\"token operator\">?</span> Inspector\n  <span class=\"token punctuation\">:</span> React<span class=\"token punctuation\">.</span>Fragment\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Layout</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>InspectorWrapper\n      keys<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span><span class=\"token string\">'control'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'shift'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'command'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// default keys</span>\n      <span class=\"token operator\">...</span>  <span class=\"token comment\">// Props see below</span>\n    <span class=\"token operator\">></span>\n     <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Page</span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>InspectorWrapper</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"总结\"><a href=\"#%E6%80%BB%E7%BB%93\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>总结</h2>\n<p>在大项目的开发和维护过程中，拥有这样一个调试神器真的特别重要，再好的记忆力也没法应对日益膨胀的组件数量…… 接入了这个插件后，指哪个组件跳哪个组件，大大节省了我们的时间。</p>\n<p>在解读这个插件的源码过程中也能看出来，想要做一些对项目整体提效的事情，经常需要我们全面的了解运行时、构建时、Node 端的很多知识，学无止境。</p>","timeToRead":12,"frontmatter":{"title":"react-dev-inspector 原理解析，点击页面组件自动打开 VSCode 对应文件？","date":"November 26, 2020","spoiler":""},"fields":{"slug":"/751261724/","langKey":"en"}}},"pageContext":{"slug":"/751261724/","previous":{"fields":{"slug":"/746449487/","langKey":"en","directoryName":"746449487"},"frontmatter":{"title":"Web 现代应用程序架构下的性能优化，渐进式的极致艺术。"}},"next":{"fields":{"slug":"/759404592/","langKey":"en","directoryName":"759404592"},"frontmatter":{"title":"Vue Router 4.0 正式发布！焕然一新。"}},"translations":[],"translatedLinks":[]}},"staticQueryHashes":["336482444"]}