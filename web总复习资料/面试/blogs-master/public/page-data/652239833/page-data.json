{"componentChunkName":"component---src-templates-blog-post-js","path":"/652239833/","result":{"data":{"site":{"siteMetadata":{"title":"ssh的博客","author":"ssh"}},"markdownRemark":{"id":"1ee7e08c-ef3f-5565-9a23-2ad1a0b1534c","html":"<h2 id=\"前言\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>最近国内大厂面试中，出现 <code class=\"language-text\">LeetCode</code> 真题考察的频率越来越高了。我也观察到有越来越多的前端同学开始关注算法这个话题。</p>\n<p>但是算法是一个门槛很高的东西，在一个算法新手的眼里，它的智商门槛要求很高。事实上是这个样子的吗？如果你怀疑自己的<strong>智商不够</strong>去学习算法，那么你一定要先看完这篇文章：<a href=\"https://mp.weixin.qq.com/s/QvXIDpyrpiOmvEhcOUUmxQ\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">《天生不聪明》</a>，也正是这篇文章激励了我开始了算法之路。</p>\n<p>这篇文章，我会先总结几个<strong>必学的题目分类</strong>，给出<strong>这个分类下必做例题</strong>的详细题解，并且在文章的末尾给出<strong>每个分类下必刷的题目</strong>的获取方式。</p>\n<p>一定要耐心看到底，会有重磅干货。</p>\n<h2 id=\"心路\"><a href=\"#%E5%BF%83%E8%B7%AF\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>心路</h2>\n<p>我从 5 月份准备离职的时候开始学习算法，在此之前对于算法我是<strong>零基础</strong>，在最开始我对于算法的感受也和大家一样，觉得自己智商可能不够，望而却步。但是看了一些大佬对于算法和智商之间的关系，我发现算法好像也是一个通过练习可以慢慢成长的学科，而不是只有智商达到了某个点才能有入场券，所以我开始了我的算法之路。通过<strong>视频课程</strong> + <strong>分类刷题</strong> + <strong>总结题解</strong> + <strong>回头复习</strong>的方式，我在两个月的时间里把力扣的解题数量刷到了<strong>200</strong>题。对于一个算法新人来说，这应该算是一个还可以的成绩，这篇文章，我把我总结的一些经典题解分享给大家。</p>\n<h2 id=\"学习方式\"><a href=\"#%E5%AD%A6%E4%B9%A0%E6%96%B9%E5%BC%8F\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>学习方式</h2>\n<ol>\n<li><strong>分类刷题</strong>：很多第一次接触力扣的同学对于刷题的方法不太了解，有的人跟着题号刷，有的人跟着每日一题刷，但是这种漫无目的的刷题方式一般都会在中途某一天放弃，或者刷了很久但是却发现没什么沉淀。这里不啰嗦，直接点明一个所有大佬都推荐的刷题方法：把自己的学习阶段分散成几个时间段去刷不同分类的题型，比如第一周专门解<strong>链表</strong>相关题型，第二周专门解<strong>二叉树</strong>相关题型。这样你的知识会形成一个体系，通过一段时间的刻意练习把这个题型相关的知识点强化到你的脑海中，不容易遗忘。</li>\n<li><strong>适当放弃</strong>：很多同学遇到一个难题，非得埋头钻研，干他 2 个小时。最后挫败感十足，久而久之可能就放弃了算法之路。要知道算法是个沉淀了几十年的领域，题解里的某个算法可能是某些教授研究很多年的心血，你想靠自己一个新手去想出来同等优秀的解法，岂不是想太多了。所以要学会适当放弃，一般来说，比较有目的性（面试）刷题的同学，他面对一道新的题目毫无头绪的话，会在 10 分钟之内直接放弃去看题解，然后记录下来，<strong>反复复习</strong>，直到这个解法成为自己的知识为止。这是效率最高的学习办法。</li>\n<li><strong>接受自己是新手</strong>：没错，说的难听一点，接受自己不是天才这个现实。你在刷题的过程中会遇到很多困扰你的时候，比如相同的题型已经看过例题，<strong>稍微变了条件就解不出来</strong>。或者对于一个 <strong><code class=\"language-text\">easy</code> 难度的题毫无头绪</strong>。或者甚至<strong>看不懂别人的题解</strong>（没错我经常）相信我，这很正常，不能说明你不适合学习算法，只能说明算法确实是一个博大精深的领域，把自己在其他领域的沉淀抛开来，接受自己是新手这个事实，多看题解，多请教别人。</li>\n</ol>\n<h2 id=\"分类大纲\"><a href=\"#%E5%88%86%E7%B1%BB%E5%A4%A7%E7%BA%B2\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>分类大纲</h2>\n<ol>\n<li>算法的复杂度分析。</li>\n<li>排序算法，以及他们的区别和优化。</li>\n<li>数组中的双指针、滑动窗口思想。</li>\n<li>利用 Map 和 Set 处理查找表问题。</li>\n<li>链表的各种问题。</li>\n<li>利用递归和迭代法解决二叉树问题。</li>\n<li>栈、队列、DFS、BFS。</li>\n<li>回溯法、贪心算法、动态规划。</li>\n</ol>\n<h2 id=\"题解\"><a href=\"#%E9%A2%98%E8%A7%A3\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>题解</h2>\n<p>接下来我会放出几个分类的经典题型，以及我对应的讲解，当做开胃菜，并且在文章的末尾我会给出获取每个分类<strong>推荐你去刷</strong>的题目的合集，记得看到底哦。</p>\n<h3 id=\"查找表问题\"><a href=\"#%E6%9F%A5%E6%89%BE%E8%A1%A8%E9%97%AE%E9%A2%98\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>查找表问题</h3>\n<p>两个数组的交集 II-350</p>\n<p>给定两个数组，编写一个函数来计算它们的交集。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">示例 1:\n\n输入: nums1 = [1,2,2,1], nums2 = [2,2]\n输出: [2,2]\n示例 2:\n\n输入: nums1 = [4,9,5], nums2 = [9,4,9,8,4]\n输出: [4,9]</code></pre></div>\n<p>来源：力扣（LeetCode）<br>\n链接：<a href=\"https://leetcode-cn.com/problems/intersection-of-two-arrays-ii\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://leetcode-cn.com/problems/intersection-of-two-arrays-ii</a><br>\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>\n<hr>\n<p>为两个数组分别建立 map，用来存储 num -> count 的键值对，统计每个数字出现的数量。</p>\n<p>然后对其中一个 map 进行遍历，查看这个数字在两个数组中分别出现的数量，取出现的最小的那个数量（比如数组 1 中出现了 1 次，数组 2 中出现了 2 次，那么交集应该取 1 次），push 到结果数组中即可。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number[]}\n */</span>\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">intersect</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>nums1<span class=\"token punctuation\">,</span> nums2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> map1 <span class=\"token operator\">=</span> <span class=\"token function\">makeCountMap</span><span class=\"token punctuation\">(</span>nums1<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">let</span> map2 <span class=\"token operator\">=</span> <span class=\"token function\">makeCountMap</span><span class=\"token punctuation\">(</span>nums2<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> num <span class=\"token keyword\">of</span> map1<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> count1 <span class=\"token operator\">=</span> map1<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> count2 <span class=\"token operator\">=</span> map2<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> pushCount <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>count1<span class=\"token punctuation\">,</span> count2<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> pushCount<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> res\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">makeCountMap</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      map<span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span> count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      map<span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> map\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"双指针问题\"><a href=\"#%E5%8F%8C%E6%8C%87%E9%92%88%E9%97%AE%E9%A2%98\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>双指针问题</h3>\n<p>最接近的三数之和-16</p>\n<p>给定一个包括  n 个整数的数组  nums  和 一个目标值  target。找出  nums  中的三个整数，使得它们的和与  target  最接近。返回这三个数的和。假定每组输入只存在唯一答案。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">示例：\n\n输入：nums = [-1,2,1,-4], target = 1\n输出：2\n解释：与 target 最接近的和是 2 (-1 + 2 + 1 = 2) 。</code></pre></div>\n<p>提示：</p>\n<p><code class=\"language-text\">3 &lt;= nums.length &lt;= 10^3</code>\n<code class=\"language-text\">-10^3 &lt;= nums[i] &lt;= 10^3</code>\n<code class=\"language-text\">-10^4 &lt;= target &lt;= 10^4</code></p>\n<p>来源：力扣（LeetCode）</p>\n<p>链接：<a href=\"https://leetcode-cn.com/problems/3sum-closest\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://leetcode-cn.com/problems/3sum-closest</a></p>\n<p>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>\n<hr>\n<p>先按照升序排序，然后分别从左往右依次选择一个基础点 <code class=\"language-text\">i</code>（<code class=\"language-text\">0 &lt;= i &lt;= nums.length - 3</code>），在基础点的右侧用双指针去不断的找最小的差值。</p>\n<p>假设基础点是 <code class=\"language-text\">i</code>，初始化的时候，双指针分别是：</p>\n<ul>\n<li><strong><code class=\"language-text\">left</code></strong>：<code class=\"language-text\">i + 1</code>，基础点右边一位。</li>\n<li><strong><code class=\"language-text\">right</code></strong>: <code class=\"language-text\">nums.length - 1</code> 数组最后一位。</li>\n</ul>\n<p>然后求此时的和，如果和大于 <code class=\"language-text\">target</code>，那么可以把右指针左移一位，去试试更小一点的值，反之则把左指针右移。</p>\n<p>在这个过程中，不断更新全局的最小差值 <code class=\"language-text\">min</code>，和此时记录下来的和 <code class=\"language-text\">res</code>。</p>\n<p>最后返回 <code class=\"language-text\">res</code> 即可。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number}\n */</span>\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">threeSumClosest</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">===</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">getSum</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// 先升序排序 此为解题的前置条件</span>\n  nums<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">let</span> min <span class=\"token operator\">=</span> <span class=\"token number\">Infinity</span> <span class=\"token comment\">// 和 target 的最小差</span>\n  <span class=\"token keyword\">let</span> res\n\n  <span class=\"token comment\">// 从左往右依次尝试定一个基础指针 右边至少再保留两位 否则无法凑成3个</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> basic <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">let</span> left <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token comment\">// 左指针先从 i 右侧的第一位开始尝试</span>\n    <span class=\"token keyword\">let</span> right <span class=\"token operator\">=</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token comment\">// 右指针先从数组最后一项开始尝试</span>\n\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> sum <span class=\"token operator\">=</span> basic <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span> <span class=\"token comment\">// 三数求和</span>\n      <span class=\"token comment\">// 更新最小差</span>\n      <span class=\"token keyword\">let</span> diff <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>sum <span class=\"token operator\">-</span> target<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>diff <span class=\"token operator\">&lt;</span> min<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        min <span class=\"token operator\">=</span> diff\n        res <span class=\"token operator\">=</span> sum\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sum <span class=\"token operator\">&lt;</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 求出的和如果小于目标值的话 可以尝试把左指针右移 扩大值</span>\n        left<span class=\"token operator\">++</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sum <span class=\"token operator\">></span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 反之则右指针左移</span>\n        right<span class=\"token operator\">--</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 相等的话 差就为0 一定是答案</span>\n        <span class=\"token keyword\">return</span> sum\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> res\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getSum</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>total<span class=\"token punctuation\">,</span> cur<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> total <span class=\"token operator\">+</span> cur<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"滑动窗口问题\"><a href=\"#%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E9%97%AE%E9%A2%98\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>滑动窗口问题</h3>\n<p>无重复字符的最长子串-3</p>\n<p>给定一个字符串，请你找出其中不含有重复字符的   最长子串   的长度。</p>\n<p>示例  1:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">输入: &quot;abcabcbb&quot;\n输出: 3\n解释: 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。</code></pre></div>\n<p>示例 2:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">输入: &quot;bbbbb&quot;\n输出: 1\n解释: 因为无重复字符的最长子串是 &quot;b&quot;，所以其长度为 1。</code></pre></div>\n<p>示例 3:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">输入: &quot;pwwkew&quot;\n输出: 3\n解释: 因为无重复字符的最长子串是 &quot;wke&quot;，所以其长度为 3。\n     请注意，你的答案必须是 子串 的长度，&quot;pwke&quot; 是一个子序列，不是子串。</code></pre></div>\n<p>来源：力扣（LeetCode）\n链接：<a href=\"https://leetcode-cn.com/problems/longest-substring-without-repeating-characters\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://leetcode-cn.com/problems/longest-substring-without-repeating-characters</a>\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>\n<hr>\n<p>这题是比较典型的滑动窗口问题，定义一个左边界 <code class=\"language-text\">left</code> 和一个右边界 <code class=\"language-text\">right</code>，形成一个窗口，并且在这个窗口中保证不出现重复的字符串。</p>\n<p>这需要用到一个新的变量 <code class=\"language-text\">freqMap</code>，用来记录窗口中的字母出现的频率数。在此基础上，先尝试取窗口的右边界再右边一个位置的值，也就是 <code class=\"language-text\">str[right + 1]</code>，然后拿这个值去 <code class=\"language-text\">freqMap</code> 中查找：</p>\n<ol>\n<li>这个值没有出现过，那就直接把 <code class=\"language-text\">right ++</code>，扩大窗口右边界。</li>\n<li>如果这个值出现过，那么把 <code class=\"language-text\">left ++</code>，缩进左边界，并且记得把 <code class=\"language-text\">str[left]</code> 位置的值在 <code class=\"language-text\">freqMap</code> 中减掉。</li>\n</ol>\n<p>循环条件是 <code class=\"language-text\">left &lt; str.length</code>，允许左边界一直滑动到字符串的右界。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * @param {string} s\n * @return {number}\n */</span>\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">lengthOfLongestSubstring</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> n <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span>length\n  <span class=\"token comment\">// 滑动窗口为s[left...right]</span>\n  <span class=\"token keyword\">let</span> left <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">let</span> right <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n  <span class=\"token keyword\">let</span> freqMap <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// 记录当前子串中下标对应的出现频率</span>\n  <span class=\"token keyword\">let</span> max <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token comment\">// 找到的满足条件子串的最长长度</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> nextLetter <span class=\"token operator\">=</span> str<span class=\"token punctuation\">[</span>right <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>freqMap<span class=\"token punctuation\">[</span>nextLetter<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> nextLetter <span class=\"token operator\">!==</span> undefined<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      freqMap<span class=\"token punctuation\">[</span>nextLetter<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n      right<span class=\"token operator\">++</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      freqMap<span class=\"token punctuation\">[</span>str<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n      left<span class=\"token operator\">++</span>\n    <span class=\"token punctuation\">}</span>\n    max <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">,</span> right <span class=\"token operator\">-</span> left <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> max\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"链表问题\"><a href=\"#%E9%93%BE%E8%A1%A8%E9%97%AE%E9%A2%98\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>链表问题</h3>\n<p>两两交换链表中的节点-24</p>\n<p>给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。</p>\n<p>你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。</p>\n<p>示例:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">给定 1-&gt;2-&gt;3-&gt;4, 你应该返回 2-&gt;1-&gt;4-&gt;3.</code></pre></div>\n<p>来源：力扣（LeetCode）</p>\n<p>链接：<a href=\"https://leetcode-cn.com/problems/swap-nodes-in-pairs\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://leetcode-cn.com/problems/swap-nodes-in-pairs</a></p>\n<p>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>\n<hr>\n<p>这题本意比较简单，<code class=\"language-text\">1 -&gt; 2 -&gt; 3 -&gt; 4</code> 的情况下可以定义一个递归的辅助函数 <code class=\"language-text\">helper</code>，这个辅助函数对于节点和它的下一个节点进行交换，比如 <code class=\"language-text\">helper(1)</code> 处理 <code class=\"language-text\">1 -&gt; 2</code>，并且把交换变成 <code class=\"language-text\">2 -&gt; 1</code> 的尾节点 <code class=\"language-text\">1</code>的<code class=\"language-text\">next</code>继续指向 <code class=\"language-text\">helper(3)</code>也就是交换后的 <code class=\"language-text\">4 -&gt; 3</code>。</p>\n<p>边界情况在于，如果顺利的作了两两交换，那么交换后我们的函数返回出去的是 <strong>交换后的头部节点</strong>，但是如果是奇数剩余项的情况下，没办法做交换，那就需要直接返回 <strong>原本的头部节点</strong>。这个在 <code class=\"language-text\">helper</code>函数和主函数中都有体现。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">swapPairs</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>head<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span>\n  <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">helper</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> tempNext <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>next\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tempNext<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> tempNextNext <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next\n      node<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> node\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tempNextNext<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        node<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token function\">helper</span><span class=\"token punctuation\">(</span>tempNextNext<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        node<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> tempNext <span class=\"token operator\">||</span> node\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token function\">helper</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> res <span class=\"token operator\">||</span> head\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"深度优先遍历问题\"><a href=\"#%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86%E9%97%AE%E9%A2%98\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>深度优先遍历问题</h3>\n<p>二叉树的所有路径-257</p>\n<p>给定一个二叉树，返回所有从根节点到叶子节点的路径。</p>\n<p>说明:  叶子节点是指没有子节点的节点。</p>\n<p>示例:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">输入:\n\n   1\n /   \\\n2     3\n \\\n  5\n\n输出: [&quot;1-&gt;2-&gt;5&quot;, &quot;1-&gt;3&quot;]\n\n解释: 所有根节点到叶子节点的路径为: 1-&gt;2-&gt;5, 1-&gt;3</code></pre></div>\n<p>来源：力扣（LeetCode）</p>\n<p>链接：<a href=\"https://leetcode-cn.com/problems/binary-tree-paths\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://leetcode-cn.com/problems/binary-tree-paths</a></p>\n<p>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>\n<hr>\n<p>用当前节点的值去拼接左右子树递归调用当前函数获得的所有路径。</p>\n<p>也就是根节点拼上以左子树为根节点得到的路径，加上根节点拼上以右子树为根节点得到的所有路径。</p>\n<p>直到叶子节点，仅仅返回包含当前节点的值的数组。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">binaryTreePaths</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> res\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>root<span class=\"token punctuation\">.</span>left <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>root<span class=\"token punctuation\">.</span>val<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">let</span> leftPaths <span class=\"token operator\">=</span> <span class=\"token function\">binaryTreePaths</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">let</span> rightPaths <span class=\"token operator\">=</span> <span class=\"token function\">binaryTreePaths</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span>\n\n  leftPaths<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>leftPath<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>root<span class=\"token punctuation\">.</span>val<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">-></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>leftPath<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  rightPaths<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>rightPath<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>root<span class=\"token punctuation\">.</span>val<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">-></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>rightPath<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> res\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"广度优先遍历（bfs）问题\"><a href=\"#%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86%EF%BC%88bfs%EF%BC%89%E9%97%AE%E9%A2%98\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>广度优先遍历（BFS）问题</h3>\n<p>在每个树行中找最大值-515</p>\n<p><a href=\"https://leetcode-cn.com/problems/find-largest-value-in-each-tree-row\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://leetcode-cn.com/problems/find-largest-value-in-each-tree-row</a></p>\n<p>您需要在二叉树的每一行中找到最大的值。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">输入:\n\n          1\n         / \\\n        3   2\n       / \\   \\\n      5   3   9\n\n输出: [1, 3, 9]</code></pre></div>\n<hr>\n<p>这是一道典型的 BFS 题目，BFS 的套路其实就是维护一个 queue 队列，在读取子节点的时候同时把发现的孙子节点 push 到队列中，但是<strong>先不处理</strong>，等到这一轮队列中的子节点处理完成以后，下一轮再继续处理的就是<strong>孙子节点</strong>了，这就实现了层序遍历，也就是一层层的去处理。</p>\n<p>但是这里有一个问题卡住我了一会，就是如何知道当前处理的节点是<strong>哪个层级</strong>的，在最开始的时候我尝试写了一下二叉树求某个 index 所在层级的公式，但是发现这种公式只能处理「平衡二叉树」。</p>\n<p>后面看题解发现他们都没有专门维护层级，再仔细一看才明白层级的思路：</p>\n<p>其实就是在每一轮 while 循环里，再开一个 for 循环，这个 for 循环的终点是「提前缓存好的 length 快照」，也就是进入这轮 while 循环时，queue 的长度。其实这个长度就恰好代表了「一个层级的长度」。</p>\n<p>缓存后，for 循环里可以安全的把子节点 push 到数组里而不影响缓存的当前层级长度。</p>\n<p>另外有一个小 tips，在 for 循环处理完成后，应该要把 queue 的长度截取掉上述的缓存长度。一开始我使用的是 <code class=\"language-text\">queue.splice(0, len)</code>，结果速度只击败了 33%的人。后面换成 for 循环中去一个一个<code class=\"language-text\">shift</code>来截取，速度就击败了 77%的人。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * @param {TreeNode} root\n * @return {number[]}\n */</span>\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">largestValues</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>root<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">let</span> queue <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">let</span> maximums <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> max <span class=\"token operator\">=</span> Number<span class=\"token punctuation\">.</span><span class=\"token constant\">MIN_SAFE_INTEGER</span>\n    <span class=\"token comment\">// 这里需要先缓存length 这个length代表当前层级的所有节点</span>\n    <span class=\"token comment\">// 在循环开始后 会push新的节点 length就不稳定了</span>\n    <span class=\"token keyword\">let</span> len <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span>length\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> node <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n      max <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">,</span> max<span class=\"token punctuation\">)</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        queue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        queue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 本「层级」处理完毕，截取掉。</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      queue<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 这个for循环结束后 代表当前层级的节点全部处理完毕</span>\n    <span class=\"token comment\">// 直接把计算出来的最大值push到数组里即可。</span>\n    maximums<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> maximums\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"栈问题\"><a href=\"#%E6%A0%88%E9%97%AE%E9%A2%98\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>栈问题</h3>\n<p>有效的括号-20</p>\n<p>给定一个只包括 <code class=\"language-text\">&#39;(&#39;，&#39;)&#39;，&#39;{&#39;，&#39;}&#39;，&#39;[&#39;，&#39;]&#39;</code> 的字符串，判断字符串是否有效。</p>\n<p>有效字符串需满足：</p>\n<ul>\n<li>左括号必须用相同类型的右括号闭合。</li>\n<li>左括号必须以正确的顺序闭合。</li>\n<li>注意空字符串可被认为是有效字符串。</li>\n</ul>\n<p>示例 1:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">输入: &quot;()&quot;\n输出: true</code></pre></div>\n<p>示例 2:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">输入: &quot;()[]{}&quot;\n输出: true</code></pre></div>\n<p>示例 3:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">输入: &quot;(]&quot;\n输出: false</code></pre></div>\n<p>示例 4:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">输入: &quot;([)]&quot;\n输出: false</code></pre></div>\n<p>示例 5:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">输入: &quot;{[]}&quot;\n输出: true</code></pre></div>\n<p><a href=\"https://leetcode-cn.com/problems/valid-parentheses\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://leetcode-cn.com/problems/valid-parentheses</a></p>\n<hr>\n<p>提前记录好左括号类型 <code class=\"language-text\">(, {, [</code>和右括号类型<code class=\"language-text\">), }, ]</code>的映射表，当遍历中遇到左括号的时候，就放入栈 <code class=\"language-text\">stack</code> 中（其实就是数组），当遇到右括号时，就把 <code class=\"language-text\">stack</code> 顶的元素 <code class=\"language-text\">pop</code> 出来，看一下是否是这个右括号所匹配的左括号（比如 <code class=\"language-text\">(</code> 和 <code class=\"language-text\">)</code> 是一对匹配的括号）。</p>\n<p>当遍历结束后，栈中不应该剩下任何元素，返回成功，否则就是失败。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * @param {string} s\n * @return {boolean}\n */</span>\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">isValid</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> sl <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>length\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sl <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">!==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n  <span class=\"token keyword\">let</span> leftToRight <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"{\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"}\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"[\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"]\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"(\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\")\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// 建立一个反向的 value -> key 映射表</span>\n  <span class=\"token keyword\">let</span> rightToLeft <span class=\"token operator\">=</span> <span class=\"token function\">createReversedMap</span><span class=\"token punctuation\">(</span>leftToRight<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// 用来匹配左右括号的栈</span>\n  <span class=\"token keyword\">let</span> stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> bracket <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n    <span class=\"token comment\">// 左括号 放进栈中</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>leftToRight<span class=\"token punctuation\">[</span>bracket<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>bracket<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> needLeftBracket <span class=\"token operator\">=</span> rightToLeft<span class=\"token punctuation\">[</span>bracket<span class=\"token punctuation\">]</span>\n      <span class=\"token comment\">// 左右括号都不是 直接失败</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>needLeftBracket<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token comment\">// 栈中取出最后一个括号 如果不是需要的那个左括号 就失败</span>\n      <span class=\"token keyword\">let</span> lastBracket <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>needLeftBracket <span class=\"token operator\">!==</span> lastBracket<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">createReversedMap</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>prev<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> map<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n    prev<span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> key\n    <span class=\"token keyword\">return</span> prev\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"递归与回溯\"><a href=\"#%E9%80%92%E5%BD%92%E4%B8%8E%E5%9B%9E%E6%BA%AF\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>递归与回溯</h3>\n<p>直接看我写的这两篇文章即可，递归与回溯甚至是平常业务开发中最常见的算法场景之一了，所以我重点总结了两篇文章。</p>\n<p><a href=\"https://juejin.im/post/5ee6d9026fb9a047e60815f1\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">《前端电商 sku 的全排列算法很难吗？学会这个套路，彻底掌握排列组合。》</a></p>\n<p><a href=\"https://juejin.im/post/5eeafa406fb9a058b51e60c0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">前端「N 皇后」递归回溯经典问题图解</a></p>\n<h3 id=\"动态规划\"><a href=\"#%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>动态规划</h3>\n<p>打家劫舍 - 198</p>\n<p>你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。</p>\n<p>给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">示例 1:\n\n输入: [1,2,3,1]\n输出: 4\n解释: 偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。\n  偷窃到的最高金额 = 1 + 3 = 4 。\n示例 2:\n\n输入: [2,7,9,3,1]\n输出: 12\n解释: 偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。\n  偷窃到的最高金额 = 2 + 9 + 1 = 12 。</code></pre></div>\n<p>来源：力扣（LeetCode）\n链接：<a href=\"https://leetcode-cn.com/problems/house-robber\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://leetcode-cn.com/problems/house-robber</a>\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>\n<hr>\n<p>动态规划的一个很重要的过程就是找到「状态」和「状态转移方程」，在这个问题里，设 <code class=\"language-text\">i</code> 是当前屋子的下标，状态就是 <strong>以 i 为起点偷窃的最大价值</strong></p>\n<p>在某一个房子面前，盗贼只有两种选择：<strong>偷或者不偷</strong>。</p>\n<ol>\n<li>偷的话，价值就是「当前房子的价值」+「下两个房子开始盗窃的最大价值」</li>\n<li>不偷的话，价值就是「下一个房子开始盗窃的最大价值」</li>\n</ol>\n<p>在这两个值中，选择<strong>最大值</strong>记录在 <code class=\"language-text\">dp[i]</code>中，就得到了<strong>以 <code class=\"language-text\">i</code> 为起点所能偷窃的最大价值。</strong>。</p>\n<p>动态规划的起手式，找<strong>基础状态</strong>，在这题中，以<strong>终点</strong>为起点的最大价值一定是最好找的，因为终点不可能再继续往后偷窃了，所以设 <code class=\"language-text\">n</code> 为房子的总数量， <code class=\"language-text\">dp[n - 1]</code> 就是 <code class=\"language-text\">nums[n - 1]</code>，小偷只能选择偷窃这个房子，而不能跳过去选择下一个不存在的房子。</p>\n<p>那么就找到了动态规划的状态转移方程：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 抢劫当前房子</span>\nrobNow <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// 「当前房子的价值」 + 「i + 2 下标房子为起点的最大价值」</span>\n\n<span class=\"token comment\">// 不抢当前房子，抢下一个房子</span>\nrobNext <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">//「i + 1 下标房子为起点的最大价值」</span>\n\n<span class=\"token comment\">// 两者选择最大值</span>\ndp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>robNow<span class=\"token punctuation\">,</span> robNext<span class=\"token punctuation\">)</span></code></pre></div>\n<p>，并且<strong>从后往前</strong>求解。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">let</span> dp <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> robNow <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">let</span> robNext <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token number\">0</span>\n\n    dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>robNow<span class=\"token punctuation\">,</span> robNext<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>最后返回 <strong>以 0 为起点开始打劫的最大价值</strong> 即可。</p>\n<h3 id=\"贪心算法问题\"><a href=\"#%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95%E9%97%AE%E9%A2%98\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>贪心算法问题</h3>\n<p>分发饼干-455</p>\n<p>假设你是一位很棒的家长，想要给你的孩子们一些小饼干。但是，每个孩子最多只能给一块饼干。对每个孩子 i ，都有一个胃口值  gi ，这是能让孩子们满足胃口的饼干的最小尺寸；并且每块饼干 j ，都有一个尺寸 sj 。如果 sj >= gi ，我们可以将这个饼干 j 分配给孩子 i ，这个孩子会得到满足。你的目标是尽可能满足越多数量的孩子，并输出这个最大数值。</p>\n<p>注意：</p>\n<p>你可以假设胃口值为正。\n一个小朋友最多只能拥有一块饼干。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">示例 1:\n\n输入: [1,2,3], [1,1]\n\n输出: 1\n\n解释:\n你有三个孩子和两块小饼干，3个孩子的胃口值分别是：1,2,3。\n虽然你有两块小饼干，由于他们的尺寸都是1，你只能让胃口值是1的孩子满足。\n所以你应该输出1。\n示例 2:\n\n输入: [1,2], [1,2,3]\n\n输出: 2\n\n解释:\n你有两个孩子和三块小饼干，2个孩子的胃口值分别是1,2。\n你拥有的饼干数量和尺寸都足以让所有孩子满足。\n所以你应该输出2.</code></pre></div>\n<p>来源：力扣（LeetCode）\n链接：<a href=\"https://leetcode-cn.com/problems/assign-cookies\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://leetcode-cn.com/problems/assign-cookies</a>\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>\n<hr>\n<p>把饼干和孩子的需求都排序好，然后从最小的饼干分配给需求最小的孩子开始，不断的尝试新的饼干和新的孩子，这样能保证每个分给孩子的饼干都恰到好处的不浪费，又满足需求。</p>\n<p>利用双指针不断的更新 <code class=\"language-text\">i</code> 孩子的需求下标和 <code class=\"language-text\">j</code>饼干的值，直到两者有其一达到了终点位置：</p>\n<ol>\n<li>如果当前的饼干不满足孩子的胃口，那么把 <code class=\"language-text\">j++</code> 寻找下一个饼干，不用担心这个饼干被浪费，因为这个饼干更不可能满足下一个孩子（胃口更大）。</li>\n<li>如果满足，那么 <code class=\"language-text\">i++; j++; count++</code> 记录当前的成功数量，继续寻找下一个孩子和下一个饼干。</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * @param {number[]} g\n * @param {number[]} s\n * @return {number}\n */</span>\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">findContentChildren</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  g<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">)</span>\n  s<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n  <span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&amp;&amp;</span> i <span class=\"token operator\">&lt;</span> g<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> need <span class=\"token operator\">=</span> g<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">let</span> cookie <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cookie <span class=\"token operator\">>=</span> need<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      count<span class=\"token operator\">++</span>\n      i<span class=\"token operator\">++</span>\n      j<span class=\"token operator\">++</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      j<span class=\"token operator\">++</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> count\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"必做题目\"><a href=\"#%E5%BF%85%E5%81%9A%E9%A2%98%E7%9B%AE\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>必做题目</h2>\n<p>其实写了这么多，以上分类所提到的题目，只是当前分类下比较适合作为例题来讲解的题目而已，在整个 <code class=\"language-text\">LeetCode</code> 学习过程中只是冰山一角。这些题可以作为你深入这个分类的一个入门例题，但是不可避免的是，你必须去下苦功夫刷<strong>每个分类下的其他经典题目</strong>。</p>\n<p>如果你信任我，你也可以<a href=\"https://user-gold-cdn.xitu.io/2020/6/27/172f5535ee23f032?w=910&#x26;h=436&#x26;f=jpeg&#x26;s=50596\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><strong>点击这里</strong></a> 获取我总结的各个分类下<strong>必做题目</strong>的详细题解，还有我推荐给你的一个<strong>视频课程</strong>。</p>\n<p>算法这种逻辑复杂的东西，其实看文章也只是能做个引子，如果有老师耐心的讲解，配合动图演示过程，学习效率是<strong>翻倍都不止</strong>的。不瞒你说，我个人就是把上面推荐的那个视频课程完全跟着走了一遍，能感觉到比起看文章来说，效率是翻倍都不止的。因为有大牛老师耐心的带着你从零开始，由浅入深的配合动图去图文并茂的抽丝剥茧的讲清楚一道题，我<strong>拿不到任何回扣</strong>，甚至连那个老师的微信都没有，但我真心实意的推荐你去学这门课程。</p>\n<h2 id=\"总结\"><a href=\"#%E6%80%BB%E7%BB%93\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>总结</h2>\n<p>关于算法在工程方面有用与否的争论，已经是一个经久不衰的话题了。这里不讨论这个，我个人的观念是<strong>绝对有用</strong>的，只要你不是一个甘于只做简单需求的人，你一定会在后续开发架构、遇到难题的过程中或多或少的从你的算法学习中受益。</p>\n<p>再说的功利点，就算是为了面试，刷算法能够进入大厂也是你职业生涯的一个起飞点，大厂给你带来的的环境、严格的 <code class=\"language-text\">Code Review</code>、完善的导师机制和协作流程也是你作为<strong>工程师</strong>所梦寐以求的。</p>\n<p>希望这篇文章能让你不再继续害怕算法面试，跟着我一起攻下这座城堡吧，大家加油！</p>\n<h2 id=\"️-感谢大家\"><a href=\"#%EF%B8%8F-%E6%84%9F%E8%B0%A2%E5%A4%A7%E5%AE%B6\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>❤️ 感谢大家</h2>\n<p>1.如果本文对你有帮助，就点个赞支持下吧，你的「赞」是我创作的动力。</p>\n<p>2.关注公众号「前端从进阶到入院」即可加我好友，我拉你进「前端进阶交流群」，大家一起共同交流和进步。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/4/5/17149cbcaa96ff26?w=910&#x26;h=436&#x26;f=jpeg&#x26;s=78195\"></p>","timeToRead":22,"frontmatter":{"title":"前端算法进阶指南","date":"July 07, 2020","spoiler":""},"fields":{"slug":"/652239833/","langKey":"en"}}},"pageContext":{"slug":"/652239833/","previous":{"fields":{"slug":"/646656891/","langKey":"en","directoryName":"646656891"},"frontmatter":{"title":"中级前端面试指南"}},"next":{"fields":{"slug":"/668669203/","langKey":"en","directoryName":"668669203"},"frontmatter":{"title":"TypeScript 中的子类型、逆变、协变是什么？"}},"translations":[],"translatedLinks":[]}},"staticQueryHashes":["336482444"]}