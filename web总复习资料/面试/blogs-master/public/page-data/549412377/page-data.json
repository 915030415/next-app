{"componentChunkName":"component---src-templates-blog-post-js","path":"/549412377/","result":{"data":{"site":{"siteMetadata":{"title":"ssh的博客","author":"ssh"}},"markdownRemark":{"id":"059ca329-730c-53c4-a927-6d207849c28a","html":"<p>之前几篇讲TypeScript的文章中，我带来了在React中的一些小实践  </p>\n<p><a href=\"https://juejin.im/post/5dddde68e51d4541c24658c1\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React + TypeScript + Hook 带你手把手打造类型安全的应用。</a>  </p>\n<p><a href=\"https://juejin.im/post/5df1ede4f265da33ec7db049\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React Hook + TypeScript 手把手带你打造use-watch自定义Hook，实现Vue中的watch功能。</a></p>\n<p>这篇文章我决定更进一步，直接用TypeScript实现一个类型安全的简易版的Vuex。  </p>\n<h2 id=\"这篇文章适合谁：\"><a href=\"#%E8%BF%99%E7%AF%87%E6%96%87%E7%AB%A0%E9%80%82%E5%90%88%E8%B0%81%EF%BC%9A\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>这篇文章适合谁：</h2>\n<ol>\n<li>已经学习TypeScript基础，需要一点进阶玩法的你。</li>\n<li>自己喜欢写一些开源的小工具，需要进阶学习TypeScript类型推导。（在项目中一般ts运用的比较浅层，大部分情况在写表面的interface）。</li>\n<li>单纯的想要进阶学习TypeScript。</li>\n</ol>\n<h2 id=\"通过这篇文章，你可以学到以下特性在实战中是如何使用的：\"><a href=\"#%E9%80%9A%E8%BF%87%E8%BF%99%E7%AF%87%E6%96%87%E7%AB%A0%EF%BC%8C%E4%BD%A0%E5%8F%AF%E4%BB%A5%E5%AD%A6%E5%88%B0%E4%BB%A5%E4%B8%8B%E7%89%B9%E6%80%A7%E5%9C%A8%E5%AE%9E%E6%88%98%E4%B8%AD%E6%98%AF%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E7%9A%84%EF%BC%9A\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>通过这篇文章，你可以学到以下特性在实战中是如何使用的：</h2>\n<ol>\n<li>🎉TypeScript的高级类型（<a href=\"https://www.typescriptlang.org/docs/handbook/advanced-types.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Advanced Type</a>）</li>\n<li>🎉TypeScript中利用泛型进行反向类型推导。(<a href=\"https://www.typescriptlang.org/docs/handbook/generics.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Generics</a>)</li>\n<li>🎉Mapped types（映射类型）</li>\n<li>🎉Distributive Conditional Types（条件类型分配）</li>\n<li>🎉TypeScript中Infer的实战应用（<a href=\"https://github.com/vuejs/vue-next/blob/985f4c91d9d3f47e1314d230c249b3faf79c6b90/packages/reactivity/src/ref.ts#L89\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Vue3源码里infer的一个很重要的使用</a>）  </li>\n</ol>\n<p>希望通过这篇文章，你可以对TypeScript的高级类型实战应用得心应手，对于未来想学习Vue3源码的小伙伴来说，类型推断和<code class=\"language-text\">infer</code>的用法也是必须熟悉的。 </p>\n<h2 id=\"写在前面：\"><a href=\"#%E5%86%99%E5%9C%A8%E5%89%8D%E9%9D%A2%EF%BC%9A\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>写在前面：</h2>\n<p>本文实现的Vuex只有很简单的<code class=\"language-text\">state</code>，<code class=\"language-text\">action</code>和<code class=\"language-text\">subscribeAction</code>功能，因为Vuex当前的组织模式非常不适合类型推导（Vuex官方的type库目前推断的也很简陋），所以本文中会有一些和官方不一致的地方，这些是刻意的为了类型安全而做的，本文的主要目标是学习TypeScript，而不是学习Vuex，所以请小伙伴们不要嫌弃它代码啰嗦或者和Vuex不一致。 🚀</p>\n<h2 id=\"vuex骨架\"><a href=\"#vuex%E9%AA%A8%E6%9E%B6\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>vuex骨架</h2>\n<p>首先定义我们Vuex的骨架。</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Vuex</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">S</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  state<span class=\"token punctuation\">:</span> <span class=\"token constant\">S</span>\n\n  action<span class=\"token punctuation\">:</span> Actions<span class=\"token operator\">&lt;</span><span class=\"token constant\">S</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span><span class=\"token operator\">></span>\n\n  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> state<span class=\"token punctuation\">,</span> action <span class=\"token punctuation\">}</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> state<span class=\"token punctuation\">:</span> <span class=\"token constant\">S</span><span class=\"token punctuation\">;</span> action<span class=\"token punctuation\">:</span> Actions<span class=\"token operator\">&lt;</span><span class=\"token constant\">S</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span><span class=\"token operator\">></span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> state<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>action <span class=\"token operator\">=</span> action<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>首先这个Vuex构造函数定了两个泛型<code class=\"language-text\">S</code>和<code class=\"language-text\">A</code>，这是因为我们需要推出<code class=\"language-text\">state</code>和<code class=\"language-text\">action</code>的类型，由于subscribeAction的参数中需要用到state和action的类型，dispatch中则需要用到<code class=\"language-text\">action</code>的key的类型（比如<code class=\"language-text\">dispatch({type: &quot;ADD&quot;})</code>中的type需要由对应 <code class=\"language-text\">actions: { ADD() {} }</code>）的key值推断。  </p>\n<p>然后在构造函数中，把S和state对应，把Actions&#x3C;S, A>和传入的action对应。</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> state<span class=\"token punctuation\">,</span> action <span class=\"token punctuation\">}</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> state<span class=\"token punctuation\">:</span> <span class=\"token constant\">S</span><span class=\"token punctuation\">;</span> action<span class=\"token punctuation\">:</span> Actions<span class=\"token operator\">&lt;</span><span class=\"token constant\">S</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span><span class=\"token operator\">></span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> state<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>action <span class=\"token operator\">=</span> action<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Actions这里用到了映射类型，它等于是遍历了传入的A的key值，然后定义每一项实际上的结构，</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> Actions<span class=\"token operator\">&lt;</span><span class=\"token constant\">S</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span><span class=\"token constant\">K</span> <span class=\"token keyword\">in</span> keyof <span class=\"token constant\">A</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">:</span> <span class=\"token constant\">S</span><span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Promise<span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>看看我们传入的actions</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vuex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  state<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    count<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    message<span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  action<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">async</span> <span class=\"token constant\">ADD</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+=</span> payload<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">async</span> <span class=\"token constant\">CHAT</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      state<span class=\"token punctuation\">.</span>message <span class=\"token operator\">=</span> message<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>是不是类型正好对应上了？此时ADD函数的形参里的state就有了类型推断，它就是我们传入的state的类型。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/1/9/16f880d77a929b47?w=463&#x26;h=250&#x26;f=png&#x26;s=106982\" alt=\"state\">  </p>\n<p>这是因为我们给Vuex的构造函数传入state的时候，S就被反向推导为了state的类型，也就是<code class=\"language-text\">{count: number, message: string}</code>，这时S又被传给了<code class=\"language-text\">Actions&lt;S, A&gt;</code>， 自然也可以在action里获得state的类型了。 </p>\n<p>现在有个问题，我们现在的写法里没有任何地方能体现出<code class=\"language-text\">payload</code>的类型，（这也是Vuex设计所带来的一些缺陷）所以我们也只能写成any，但是我们本文的目标是类型安全。  </p>\n<h2 id=\"dispatch的类型安全\"><a href=\"#dispatch%E7%9A%84%E7%B1%BB%E5%9E%8B%E5%AE%89%E5%85%A8\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>dispatch的类型安全</h2>\n<p>下面先想点办法实现<code class=\"language-text\">store.dispatch</code>的类型安全：</p>\n<ol>\n<li>type需要自动提示。</li>\n<li>type填写了以后，需要提示对应的payload的type。</li>\n</ol>\n<p>所以参考<code class=\"language-text\">redux</code>的玩法，我们手动定义一个Action Types的联合类型。</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> <span class=\"token constant\">ADD</span> <span class=\"token operator\">=</span> <span class=\"token string\">'ADD'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">CHAT</span> <span class=\"token operator\">=</span> <span class=\"token string\">'CHAT'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> AddType <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> <span class=\"token constant\">ADD</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> ChatType <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> <span class=\"token constant\">CHAT</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> ActionTypes <span class=\"token operator\">=</span>\n  <span class=\"token operator\">|</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">type</span><span class=\"token punctuation\">:</span> AddType<span class=\"token punctuation\">;</span>\n      payload<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">|</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">type</span><span class=\"token punctuation\">:</span> ChatType<span class=\"token punctuation\">;</span>\n      payload<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>在<code class=\"language-text\">Vuex</code>中，我们新增一个辅助Ts推断的方法，这个方法原封不动的返回dispatch函数，但是用了<code class=\"language-text\">as</code>关键字改写它的类型，我们需要把ActionTypes作为泛型传入：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">export default class Vuex&lt;S, A&gt; {\n  ... \n  \n  createDispatch&lt;A&gt;() {\n    return this.dispatch.bind(this) as Dispatch&lt;A&gt;;\n  }\n}</code></pre></div>\n<p>Dispatch类型的实现相当简单，直接把泛型A交给第一个形参action就好了，由于ActionTypes是联合类型，Ts会严格限制我们填写的action的类型必须是AddType或者ChatType中的一种，并且填写了AddType后，payload的类型也必须是number了。  </p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Dispatch</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">:</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>然后使用它构造dispatch</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// for TypeScript support</span>\n<span class=\"token keyword\">const</span> dispatch <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span>createDispatch<span class=\"token operator\">&lt;</span>ActionTypes<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p> 目标达成：</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/1/9/16f881771ec7ca80?w=715&#x26;h=85&#x26;f=png&#x26;s=23458\" alt=\"type\"></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/1/9/16f8817d3a2346ab?w=713&#x26;h=107&#x26;f=png&#x26;s=33185\" alt=\"payload\">  </p>\n<h2 id=\"action形参中payload的类型安全\"><a href=\"#action%E5%BD%A2%E5%8F%82%E4%B8%ADpayload%E7%9A%84%E7%B1%BB%E5%9E%8B%E5%AE%89%E5%85%A8\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>action形参中payload的类型安全</h2>\n<p>此时虽然store.diaptch完全做到了类型安全，但是在声明action传入vuex构造函数的时候，我不想像这样手动声明，  </p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vuex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  state<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    count<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    message<span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  action<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">async</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">ADD</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+=</span> payload<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">async</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">CHAT</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      state<span class=\"token punctuation\">.</span>message <span class=\"token operator\">=</span> message<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </code></pre></div>\n<p>因为这个类型在刚刚定义的ActionTypes中已经有了，秉着<code class=\"language-text\">DRY</code>的原则，我们继续折腾吧。  </p>\n<p>首先现在我们有这些佐料：</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> <span class=\"token constant\">ADD</span> <span class=\"token operator\">=</span> <span class=\"token string\">'ADD'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">CHAT</span> <span class=\"token operator\">=</span> <span class=\"token string\">'CHAT'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> AddType <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> <span class=\"token constant\">ADD</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> ChatType <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> <span class=\"token constant\">CHAT</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> ActionTypes <span class=\"token operator\">=</span>\n  <span class=\"token operator\">|</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">type</span><span class=\"token punctuation\">:</span> AddType<span class=\"token punctuation\">;</span>\n      payload<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">|</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">type</span><span class=\"token punctuation\">:</span> ChatType<span class=\"token punctuation\">;</span>\n      payload<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>所以我想通过一个类型工具，能够传入AddType给我返回number，传入ChatType给我返回message：  </p>\n<p>它大概是这个样子的：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">type AddPayload = PickPayload&lt;ActionTypes, AddType&gt; // number\ntype ChatPayload = PickPayload&lt;ActionTypes, ChatType&gt; // string</code></pre></div>\n<p>为了实现它，我们需要用到<a href=\"https://mariusschulz.com/blog/conditional-types-in-typescript#distributive-conditional-types\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">distributive-conditional-types</a>，不熟悉的同学可以好好看看这篇文章。</p>\n<p>简单的来说，如果我们把一个联合类型</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token constant\">A</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span></code></pre></div>\n<p>传递给一个用了extends关键字的类型工具：</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> PickString<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">string</span> <span class=\"token operator\">?</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">:</span> never\n\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T1</span> <span class=\"token operator\">=</span> PickString<span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">></span> <span class=\"token comment\">// string</span></code></pre></div>\n<p>它并不是像我们想象中的直接去用string | number直接匹配是否extends，而是把联合类型拆分开来，一个个去匹配。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">type PickString&lt;T&gt; = \n| string extends string ? T: never \n| number extends string ? T: never</code></pre></div>\n<p>所以返回的类型是<code class=\"language-text\">string | never</code>，由由于never在联合类型中没什么意义，所以就被过滤成<code class=\"language-text\">string</code>了</p>\n<p>借由这个特性，我们就有思路了，这里用到了<code class=\"language-text\">infer</code>这个关键字，Vue3中也有很多推断是借助它实现的，它只能用在extends的后面，代表一个还未出现的类型，关于infer的玩法，详细可以看这篇文章：<a href=\"https://segmentfault.com/a/1190000018514540?utm_source=tag-newest\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">巧用 TypeScript（五）---- infer</a></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">export type PickPayload&lt;Types, Type&gt; = Types extends {\n  type: Type;\n  payload: infer P;\n}\n  ? P\n  : never;</code></pre></div>\n<p>我们用Type这个字符串类型，让ActionTypes中的每一个类型一个个去过滤匹配，比如传入的是AddType:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">PickPayload&lt;ActionTypes, AddType&gt;</code></pre></div>\n<p>则会被分布成：</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token constant\">A</span> <span class=\"token operator\">=</span> \n  <span class=\"token operator\">|</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">type</span><span class=\"token punctuation\">:</span> AddType<span class=\"token punctuation\">;</span>payload<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">type</span><span class=\"token punctuation\">:</span> AddType<span class=\"token punctuation\">;</span> payload<span class=\"token punctuation\">:</span> infer <span class=\"token constant\">P</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">?</span> <span class=\"token constant\">P</span>\n  <span class=\"token punctuation\">:</span> never \n  <span class=\"token operator\">|</span> \n  <span class=\"token punctuation\">{</span> <span class=\"token keyword\">type</span><span class=\"token punctuation\">:</span> ChatType<span class=\"token punctuation\">;</span> payload<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">type</span><span class=\"token punctuation\">:</span> AddType<span class=\"token punctuation\">;</span> payload<span class=\"token punctuation\">:</span> infer <span class=\"token constant\">P</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">?</span> <span class=\"token constant\">P</span>\n  <span class=\"token punctuation\">:</span> never<span class=\"token punctuation\">;</span></code></pre></div>\n<p>注意infer P的位置，被放在了payload的位置上，所以第一项的type在命中后, P也被自动推断为了number，而三元运算符的 ? 后，我们正是返回了P，也就推断出了number这个类型。  </p>\n<p>这时候就可以完成我们之前的目标了，也就是根据AddType这个类型推断出payload参数的类型，<code class=\"language-text\">PickPayload</code>这个工具类型应该定位成vuex官方仓库里提供的辅助工具，而在项目中，由于ActionType已经确定，所以我们可以进一步的提前固定参数。（有点类似于函数柯里化）</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> PickStorePayload<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> PickPayload<span class=\"token operator\">&lt;</span>ActionTypes<span class=\"token punctuation\">,</span> <span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>此时，我们定义一个类型安全的Vuex实例所需要的所有辅助类型都定义完毕：</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> <span class=\"token constant\">ADD</span> <span class=\"token operator\">=</span> <span class=\"token string\">'ADD'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">CHAT</span> <span class=\"token operator\">=</span> <span class=\"token string\">'CHAT'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> AddType <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> <span class=\"token constant\">ADD</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> ChatType <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> <span class=\"token constant\">CHAT</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> ActionTypes <span class=\"token operator\">=</span>\n  <span class=\"token operator\">|</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">type</span><span class=\"token punctuation\">:</span> AddType<span class=\"token punctuation\">;</span>\n      payload<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">|</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">type</span><span class=\"token punctuation\">:</span> ChatType<span class=\"token punctuation\">;</span>\n      payload<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> PickStorePayload<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> PickPayload<span class=\"token operator\">&lt;</span>ActionTypes<span class=\"token punctuation\">,</span> <span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>使用起来就很简单了：  </p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vuex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  state<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    count<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    message<span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  action<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">async</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">ADD</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">:</span> PickStorePayload<span class=\"token operator\">&lt;</span>AddType<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+=</span> payload<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">async</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">CHAT</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">:</span> PickStorePayload<span class=\"token operator\">&lt;</span>ChatType<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      state<span class=\"token punctuation\">.</span>message <span class=\"token operator\">=</span> message<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// for TypeScript support</span>\n<span class=\"token keyword\">const</span> dispatch <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span>createDispatch<span class=\"token operator\">&lt;</span>ActionTypes<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">type</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">ADD</span><span class=\"token punctuation\">,</span>\n  payload<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">type</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">CHAT</span><span class=\"token punctuation\">,</span>\n  payload<span class=\"token punctuation\">:</span> <span class=\"token string\">'Hello World'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"总结\"><a href=\"#%E6%80%BB%E7%BB%93\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>总结</h2>\n<p>本文的所有代码都在<br>\n<a href=\"https://github.com/sl1673495/tiny-middlewares/blob/master/vuex.ts\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/sl1673495/tiny-middlewares/blob/master/vuex.ts</a><br>\n仓库里，里面还加上了getters的实现和类型推导。</p>\n<p>通过本文的学习，相信你会对高级类型的用法有进一步的理解，也会对TypeScript的强大更加叹服，本文有很多例子都是为了教学而刻意深究，复杂化的，请不要骂我（XD）。  </p>\n<p>在实际的项目运用中，首先我们应该避免Vuex这种集中化的类型定义，而尽量去拥抱函数（函数对于TypeScript是天然支持），这也是Vue3往函数化api方向走的原因之一。  </p>\n<h2 id=\"参考文章\"><a href=\"#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>参考文章</h2>\n<p>React + Typescript 工程化治理实践（蚂蚁金服的大佬实践总结总是这么靠谱）\n<a href=\"https://juejin.im/post/5dccc9b8e51d4510840165e2#comment\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://juejin.im/post/5dccc9b8e51d4510840165e2#comment</a>  </p>\n<p>TS 学习总结：编译选项 &#x26;&#x26; 类型相关技巧\n<a href=\"http://zxc0328.github.io/diary/2019/10/2019-10-05.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://zxc0328.github.io/diary/2019/10/2019-10-05.html</a>  </p>\n<p>Conditional types in TypeScript（据说比Ts官网讲的好）\n<a href=\"https://mariusschulz.com/blog/conditional-types-in-typescript#distributive-conditional-types\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://mariusschulz.com/blog/conditional-types-in-typescript#distributive-conditional-types</a>  </p>\n<p>Conditional Types in TypeScript（文风幽默，代码非常硬核）\n<a href=\"https://artsy.github.io/blog/2018/11/21/conditional-types-in-typescript/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://artsy.github.io/blog/2018/11/21/conditional-types-in-typescript/</a></p>","timeToRead":9,"frontmatter":{"title":"TypeScript进阶实现智能类型推导的简化版Vuex","date":"January 14, 2020","spoiler":""},"fields":{"slug":"/549412377/","langKey":"en"}}},"pageContext":{"slug":"/549412377/","previous":{"fields":{"slug":"/549412665/","langKey":"en","directoryName":"549412665"},"frontmatter":{"title":"React-Redux 100行代码简易版探究原理"}},"next":{"fields":{"slug":"/551280991/","langKey":"en","directoryName":"551280991"},"frontmatter":{"title":"TypeScript从零实现基于Proxy的响应式库 普通数据类型"}},"translations":[],"translatedLinks":[]}},"staticQueryHashes":["336482444"]}