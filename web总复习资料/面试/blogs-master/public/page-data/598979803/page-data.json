{"componentChunkName":"component---src-templates-blog-post-js","path":"/598979803/","result":{"data":{"site":{"siteMetadata":{"title":"ssh的博客","author":"ssh"}},"markdownRemark":{"id":"1d3c4b02-1f66-568e-b61e-04f6da04efff","html":"<p>Vue3 中，<code class=\"language-text\">ref</code> 是一个新出现的 api，不太了解这个 api 的小伙伴可以先看 <a href=\"https://vue-composition-api-rfc.netlify.com/api.html#ref\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">官方api文档</a>。</p>\n<p>简单介绍来说，响应式的属性依赖一个复杂类型的<code class=\"language-text\">载体</code>，想象一下这样的场景，你有一个数字 <code class=\"language-text\">count</code> 需要响应式的改变。</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// ❌ 什么鬼</span>\ncount <span class=\"token operator\">=</span> <span class=\"token number\">3</span></code></pre></div>\n<p>这样肯定是无法触发响应式的，因为 Proxy 需要对一个复杂类型上的某个属性的访问进行拦截，而不是直接拦截一个变量的改变。</p>\n<p>于是就有了 <code class=\"language-text\">ref</code> 这个函数，它会为简单类型的值生成一个形为 <code class=\"language-text\">{ value: T }</code> 的包装，这样在修改的时候就可以通过 <code class=\"language-text\">count.value = 3</code> 去触发响应式的更新了。</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// ✅ (*^▽^*) 完全可以</span>\ncount<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token number\">3</span></code></pre></div>\n<p>那么，<code class=\"language-text\">ref</code> 函数所返回的类型 <code class=\"language-text\">Ref</code>，就是本文要讲解的重点了。</p>\n<p>为什么说 <code class=\"language-text\">Ref</code> 是个比较复杂的类型呢？假如 <code class=\"language-text\">ref</code> 函数中又接受了一个 <code class=\"language-text\">Ref</code> 类型的参数呢？Vue3 内部其实是会帮我们层层解包，只剩下最里层的那个 <code class=\"language-text\">Ref</code> 类型。</p>\n<p>它是支持嵌套后解包的，最后只会剩下 <code class=\"language-text\">{ value: number }</code> 这个类型。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>这是一个好几层的嵌套，按理来说应该是 <code class=\"language-text\">count.value.value.value.value</code> 才会是 <code class=\"language-text\">number</code>，但是在 vscode 中，鼠标指向 <code class=\"language-text\">count.value</code> 这个变量后，提示出的类型就是 number，这是怎么做到的呢？</p>\n<p>本文尝试给出一种捷径，通过逐步实现这个复杂需求，来倒推出 TS 的高级技巧需要学习哪些知识点。</p>\n<ol>\n<li>泛型的反向推导。</li>\n<li>索引签名</li>\n<li>条件类型</li>\n<li>keyof</li>\n<li>infer</li>\n</ol>\n<p>先逐个拆解这些知识点吧，注意，如果本文中的这些知识点还有所不熟，一定要在代码编辑器中反复敲击调试，刻意练习，也可以在 <a href=\"https://www.typescriptlang.org/play\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">typescript-playground</a> 中尽情玩耍。</p>\n<h2 id=\"泛型的反向推导\"><a href=\"#%E6%B3%9B%E5%9E%8B%E7%9A%84%E5%8F%8D%E5%90%91%E6%8E%A8%E5%AF%BC\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>泛型的反向推导</h2>\n<p>泛型的正向用法很多人都知道了。</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> Value<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span>\n\n<span class=\"token keyword\">type</span> NumberValue <span class=\"token operator\">=</span> Value<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span></code></pre></div>\n<p>这样，<code class=\"language-text\">NumberValue</code> 解析出的类型就是 number，其实就类似于类型系统里的传参。</p>\n<p>那么反向推导呢？</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> create<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span>\n\n<span class=\"token keyword\">let</span> num<span class=\"token punctuation\">:</span> number\n\n<span class=\"token keyword\">const</span> c<span class=\"token operator\">=</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span></code></pre></div>\n<p><a href=\"https://www.typescriptlang.org/play?#code/GYVwdgxgLglg9mABBATgUwIZTQHgCoB8AFAG4YA2AXIngJTV4BQj5aUiYIAttZ1wEZoUzCAgDO7CAF5k6LGiJ9aQA\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">在线调试</a></p>\n<p>这里泛型没有传入，居然也能推断出 <code class=\"language-text\">value</code> 的类型是 number。</p>\n<p>因为 <code class=\"language-text\">create&lt;T&gt;</code> 这里的泛型 T 被分配给了传入的参数 <code class=\"language-text\">value: T</code>，然后又用这个 T 直接作为返回的类型，</p>\n<p>简单来说，这里的三个 T 被<strong>关联起来</strong>了，并且在传入 <code class=\"language-text\">create(2)</code> 的那一刻，这个 T 被统一推断成了 number。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> create<span class=\"token operator\">&lt;</span><span class=\"token number\">2</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span></code></pre></div>\n<h3 id=\"阅读资料\"><a href=\"#%E9%98%85%E8%AF%BB%E8%B5%84%E6%96%99\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>阅读资料</h3>\n<p>具体可以看文档里的<a href=\"https://www.tslang.cn/docs/handbook/generics.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">泛型章节</a>。</p>\n<h2 id=\"索引签名\"><a href=\"#%E7%B4%A2%E5%BC%95%E7%AD%BE%E5%90%8D\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>索引签名</h2>\n<p>假设我们有一个这样的类型：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">type Test <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  foo<span class=\"token punctuation\">:</span> number<span class=\"token punctuation\">;</span>\n  bar<span class=\"token punctuation\">:</span> string\n<span class=\"token punctuation\">}</span>\n\ntype <span class=\"token constant\">N</span> <span class=\"token operator\">=</span> Test<span class=\"token punctuation\">[</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// number</span></code></pre></div>\n<p>可以通过类似 JavaScript 中的对象属性查找的语法来找出对应的类型。</p>\n<p>具体可以看<a href=\"https://jkchao.github.io/typescript-book-chinese/typings/indexSignatures.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">这里的介绍</a>，有比较详细的例子。</p>\n<h2 id=\"条件类型\"><a href=\"#%E6%9D%A1%E4%BB%B6%E7%B1%BB%E5%9E%8B\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>条件类型</h2>\n<p>假设我们有一个这样的类型：</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> IsNumber<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">number</span> <span class=\"token operator\">?</span> <span class=\"token string\">'yes'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'no'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token constant\">A</span> <span class=\"token operator\">=</span> IsNumber<span class=\"token operator\">&lt;</span><span class=\"token number\">2</span><span class=\"token operator\">></span> <span class=\"token comment\">// yes</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">B</span> <span class=\"token operator\">=</span> isNumber<span class=\"token operator\">&lt;</span><span class=\"token string\">'3'</span><span class=\"token operator\">></span> <span class=\"token comment\">// no</span></code></pre></div>\n<p><a href=\"https://www.typescriptlang.org/play?#code/C4TwDgpgBAkgzgOQK4FsBGEBOAeAKgPigF4pcoIAPYCAOwBM4obUNMoB+KAchAji6gAubjQD2XANwAoKaEhQAgsViIWWbACZCAem1RecWeGgAhZfGTp1XAMxcdesUA\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">在线调试</a></p>\n<p>这就是一个典型的条件类型，用 <code class=\"language-text\">extends</code> 关键字配合三元运算符来判断传入的泛型是否可分配给 <code class=\"language-text\">extends</code> 后面的类型。</p>\n<p>同时也支持多层的三元运算符（后面会用到）：</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> TypeName<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">string</span>\n  <span class=\"token operator\">?</span> <span class=\"token string\">\"string\"</span>\n  <span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">boolean</span>\n      <span class=\"token operator\">?</span> <span class=\"token string\">\"boolean\"</span>\n      <span class=\"token punctuation\">:</span> <span class=\"token string\">\"object\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T0</span> <span class=\"token operator\">=</span> TypeName<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"string\"</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T1</span> <span class=\"token operator\">=</span> TypeName<span class=\"token operator\">&lt;</span><span class=\"token string\">\"a\"</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"string\"</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T2</span> <span class=\"token operator\">=</span> TypeName<span class=\"token operator\">&lt;</span><span class=\"token boolean\">true</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"boolean\"</span></code></pre></div>\n<h3 id=\"阅读资料-1\"><a href=\"#%E9%98%85%E8%AF%BB%E8%B5%84%E6%96%99-1\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>阅读资料</h3>\n<p>具体讲解可以看文档中的 <a href=\"https://www.typescriptlang.org/docs/handbook/advanced-types.html#conditional-types\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">conditional types</a> 部分。</p>\n<h2 id=\"keyof\"><a href=\"#keyof\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>keyof</h2>\n<p><code class=\"language-text\">keyof</code> 操作符是 TS 中用来获取对象的 key 值集合的，比如：</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> Obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  foo<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  bar<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> Keys <span class=\"token operator\">=</span> keyof Obj <span class=\"token comment\">// \"foo\" | \"bar\"</span></code></pre></div>\n<p>这样就轻松获取到了对象 key 值的联合类型：<code class=\"language-text\">&quot;foo&quot; | &quot;bar&quot;</code>。</p>\n<p>它也可以用在遍历中：</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> Obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  foo<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  bar<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> Copy <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span><span class=\"token constant\">K</span> <span class=\"token keyword\">in</span> keyof Obj<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> Obj<span class=\"token punctuation\">[</span><span class=\"token constant\">K</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Copy 得到和 Obj 一模一样的类型</span></code></pre></div>\n<p><a href=\"https://www.typescriptlang.org/play/index.html?ssl=1&#x26;ssc=1&#x26;pln=2&#x26;pc=22#code/C4TwDgpgBA8gRgKygXigbwFBSgMwPZ4BcUAdgK4C2cEATgNxZRwCGNxAzsDQJYkDmDAL4YMoSFADCeMCBTpGAbQDSUXlADWEEHhyxEAXWLwEy-RkFA\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">在线调试</a></p>\n<p>可以看出，遍历的过程中右侧也可以通过索引直接访问到原类型 <code class=\"language-text\">Obj</code> 中对应 key 的类型。</p>\n<h3 id=\"阅读资料-2\"><a href=\"#%E9%98%85%E8%AF%BB%E8%B5%84%E6%96%99-2\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>阅读资料</h3>\n<p><a href=\"https://www.typescriptlang.org/docs/handbook/advanced-types.html#index-types\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">index-types</a></p>\n<h2 id=\"infer\"><a href=\"#infer\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>infer</h2>\n<p>这是一个比较难的点，文档中对它的描述是 <strong>条件类型中的类型推断</strong>。</p>\n<p>它的出现使得 <code class=\"language-text\">ReturnType</code>、 <code class=\"language-text\">Parameters</code> 等一众工具类型的支持都成为可能，是 TypeScript 进阶必须掌握的一个知识点了。</p>\n<p>注意前置条件，它一定是出现在条件类型中的。</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> Get<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">infer</span> <span class=\"token constant\">R</span> <span class=\"token operator\">?</span> <span class=\"token constant\">R</span><span class=\"token punctuation\">:</span> never</code></pre></div>\n<p>注意，<code class=\"language-text\">infer R</code> 的位置代表了一个未知的类型，可以理解为在条件类型中给了它一个占位符，然后就可以在后面的三元运算符中使用它。</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token constant\">T</span> <span class=\"token operator\">=</span> Get<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span>\n\n<span class=\"token comment\">// 经过计算</span>\n<span class=\"token keyword\">type</span> Get<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token builtin\">number</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">infer</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">?</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">:</span> never\n\n<span class=\"token comment\">// 得到</span>\n<span class=\"token builtin\">number</span></code></pre></div>\n<p>它的使用非常灵活，它也可以出现在泛型位置：</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> Unpack<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Array</span><span class=\"token operator\">&lt;</span>infer <span class=\"token constant\">R</span><span class=\"token operator\">></span> <span class=\"token operator\">?</span> <span class=\"token constant\">R</span> <span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> NumArr <span class=\"token operator\">=</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">U</span> <span class=\"token operator\">=</span> Unpack<span class=\"token operator\">&lt;</span>NumArr<span class=\"token operator\">></span>\n\n<span class=\"token comment\">// 经过计算</span>\n<span class=\"token keyword\">type</span> Unpack<span class=\"token operator\">&lt;</span><span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">>></span> <span class=\"token operator\">=</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Array</span><span class=\"token operator\">&lt;</span>infer <span class=\"token constant\">R</span><span class=\"token operator\">></span> <span class=\"token operator\">?</span> <span class=\"token constant\">R</span> <span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span>\n\n<span class=\"token comment\">// 得到</span>\n<span class=\"token builtin\">number</span></code></pre></div>\n<p><a href=\"https://www.typescriptlang.org/play?#code/C4TwDgpgBAqgdmAhgYwNYB4AqA+KBeKTKCAD2AjgBMBnKAQQCcHER0BLOAMwgagCVcAfn5QAXIQBQE0JCgA5AK4BbRrwKqW6OMoBGPbFJnQY+WAhQZFKprgD0tqNqV6GQA\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">在线调试</a></p>\n<p>仔细看看，是不是有那么点感觉了，它就是对于 <code class=\"language-text\">extends</code> 后面未知的某些类型进行一个占位 <code class=\"language-text\">infer R</code>，后续就可以使用推断出来的 <code class=\"language-text\">R</code> 这个类型。</p>\n<h3 id=\"阅读资料-3\"><a href=\"#%E9%98%85%E8%AF%BB%E8%B5%84%E6%96%99-3\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>阅读资料</h3>\n<p><a href=\"https://www.typescriptlang.org/docs/handbook/advanced-types.html#conditional-types\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">官网文档</a></p>\n<p><a href=\"https://jkchao.cn/article/5c8a4d99e53a054fad647c15\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">巧用 TypeScript（五）— infer</a></p>\n<h2 id=\"简化实现\"><a href=\"#%E7%AE%80%E5%8C%96%E5%AE%9E%E7%8E%B0\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>简化实现</h2>\n<p>好了，有了这么多的前置知识，我们来摩拳擦掌尝试实现一下这个 <code class=\"language-text\">Ref</code> 类型。</p>\n<p>我们已经了解到，<code class=\"language-text\">ref</code> 这个函数就是把一个值包裹成 <code class=\"language-text\">{value: T}</code> 这样的结构：</p>\n<p>我们的目的是，让 <code class=\"language-text\">ref(ref(ref(2)))</code> 这种嵌套用法，也能顺利的提示出 number 类型。</p>\n<h3 id=\"ref\"><a href=\"#ref\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ref</h3>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// 这里用到了泛型的默认值语法 &lt;T = any></span>\n<span class=\"token keyword\">type</span> Ref<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  value<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> ref<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Ref<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span>\n\n<span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\ncount<span class=\"token punctuation\">.</span>value <span class=\"token comment\">// number</span></code></pre></div>\n<p>默认情况很简单，结合了我们上面提到的几个小知识点很快就能做出来。</p>\n<p>如果传入给函数的 value 也是一个 <code class=\"language-text\">Ref</code> 类型呢？是不是很快就想到 <code class=\"language-text\">extends</code> 关键字了。</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> ref<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Ref</span> \n  <span class=\"token operator\">?</span> <span class=\"token constant\">T</span> \n  <span class=\"token punctuation\">:</span> Ref<span class=\"token operator\">&lt;</span>UnwarpRef<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">>></span></code></pre></div>\n<p>先解读 <code class=\"language-text\">T extends Ref</code> 的情况，如果 <code class=\"language-text\">value</code> 是 <code class=\"language-text\">Ref</code> 类型，函数的返回值就原封不动的是这个 <code class=\"language-text\">Ref</code> 类型。</p>\n<p>那么对于 <code class=\"language-text\">ref(ref(2))</code> 这种类型来说，内层的 <code class=\"language-text\">ref(2)</code> 返回的是 <code class=\"language-text\">Ref&lt;number&gt;</code> 类型，</p>\n<p>外层的 <code class=\"language-text\">ref</code> 读取到 <code class=\"language-text\">ref(Ref&lt;number&gt;)</code> 这个类型以后，</p>\n<p>由于此时的 <code class=\"language-text\">value</code> 符合 <code class=\"language-text\">extends Ref</code> 的定义，</p>\n<p>所以 <code class=\"language-text\">Ref&lt;number&gt;</code> 又被原封不动的返回了，这就形成了解包。</p>\n<p>那么关键点就在于后半段逻辑，<code class=\"language-text\">Ref&lt;UnwarpRef&lt;T&gt;&gt;</code> 是怎么实现的，</p>\n<p>它用来决定 <code class=\"language-text\">ref(2)</code> 返回的是 <code class=\"language-text\">Ref&lt;number&gt;</code>，</p>\n<p>并且嵌套的对象 <code class=\"language-text\">ref({ a: 1 })</code>，返回 <code class=\"language-text\">Ref&lt;{ a: number }&gt;</code></p>\n<p>并且嵌套的对象中包含 <code class=\"language-text\">Ref</code> 类型也会被解包：</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  foo<span class=\"token punctuation\">:</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  bar<span class=\"token punctuation\">:</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 推断出</span>\n<span class=\"token keyword\">const</span> count<span class=\"token punctuation\">:</span> Ref<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">{</span>\n  foo<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  bar<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token operator\">></span></code></pre></div>\n<p>那么其实本文的关键也就在于，应该如何实现这个 <code class=\"language-text\">UnwarpRef</code> 解包函数了。</p>\n<p>根据我们刚刚学到的 <code class=\"language-text\">infer</code> 知识，从 <code class=\"language-text\">Ref</code> 的泛型中提取出它的泛型类型并不难：</p>\n<h3 id=\"unwarpref\"><a href=\"#unwarpref\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>UnwarpRef</h3>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> UnwarpRef<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Ref</span><span class=\"token operator\">&lt;</span>infer <span class=\"token constant\">R</span><span class=\"token operator\">></span> <span class=\"token operator\">?</span> <span class=\"token constant\">R</span> <span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span>\n\nUnwarpRef<span class=\"token operator\">&lt;</span>Ref<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">>></span> <span class=\"token comment\">// number</span></code></pre></div>\n<p>但这只是单层解包，如果 <code class=\"language-text\">infer R</code> 中的 <code class=\"language-text\">R</code> 还是 <code class=\"language-text\">Ref</code> 类型呢？</p>\n<p>我们自然的想到了递归声明这个 <code class=\"language-text\">UnwarpRef</code> 类型：</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// X！ Type alias 'UnwarpRef' circularly references itself.ts(2456)</span>\n<span class=\"token keyword\">type</span> UnwarpRef<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Ref</span><span class=\"token operator\">&lt;</span>infer <span class=\"token constant\">R</span><span class=\"token operator\">></span> \n    <span class=\"token operator\">?</span> UnwarpRef<span class=\"token operator\">&lt;</span><span class=\"token constant\">R</span><span class=\"token operator\">></span> \n    <span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span></code></pre></div>\n<p>报错了，不允许循环引用自己！</p>\n<h3 id=\"递归-unwarpref\"><a href=\"#%E9%80%92%E5%BD%92-unwarpref\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>递归 UnwarpRef</h3>\n<p>但是到此为止了吗？当然没有，有一种机制可以绕过这个递归限制，那就是配合 <strong>索引签名</strong>，并且增加其他的能够终止递归的条件，在本例中就是 <code class=\"language-text\">other</code> 这个索引，它原样返回 <code class=\"language-text\">T</code> 类型。 </p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> UnwarpRef<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  ref<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Ref</span><span class=\"token operator\">&lt;</span>infer <span class=\"token constant\">R</span><span class=\"token operator\">></span> <span class=\"token operator\">?</span> UnwarpRef<span class=\"token operator\">&lt;</span><span class=\"token constant\">R</span><span class=\"token operator\">></span> <span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span>\n  other<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">[</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Ref</span> <span class=\"token operator\">?</span> <span class=\"token string\">'ref'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'other'</span><span class=\"token punctuation\">]</span></code></pre></div>\n<h3 id=\"支持字符串和数字\"><a href=\"#%E6%94%AF%E6%8C%81%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E6%95%B0%E5%AD%97\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>支持字符串和数字</h3>\n<p>拆解开来看这个类型，首先假设我们调用了 <code class=\"language-text\">ref(ref(2))</code> 我们其实会传给 <code class=\"language-text\">UnwarpRef</code> 一个泛型：</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">UnwarpRef<span class=\"token operator\">&lt;</span>Ref<span class=\"token operator\">&lt;</span>Ref<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">>>></span></code></pre></div>\n<p>那么第一次走入 <code class=\"language-text\">[T extends Ref ? &#39;ref&#39; : &#39;other&#39;]</code> 这个索引的时候，匹配到的是 <code class=\"language-text\">ref</code> 这个字符串，然后它去</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> UnwarpRef<span class=\"token operator\">&lt;</span>Ref<span class=\"token operator\">&lt;</span>Ref<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">>>></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 注意这里和 infer R 对应位置的匹配 得到的是 Ref&lt;number></span>\n  ref<span class=\"token punctuation\">:</span> Ref<span class=\"token operator\">&lt;</span>Ref<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">>></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Ref</span><span class=\"token operator\">&lt;</span>infer <span class=\"token constant\">R</span><span class=\"token operator\">></span> <span class=\"token operator\">?</span> UnwarpRef<span class=\"token operator\">&lt;</span><span class=\"token constant\">R</span><span class=\"token operator\">></span> <span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">[</span><span class=\"token string\">'ref'</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>匹配到了 <code class=\"language-text\">ref</code> 这个索引，然后通过用 <code class=\"language-text\">Ref&lt;Ref&lt;number&gt;&gt;</code> 去匹配 <code class=\"language-text\">Ref&lt;infer R&gt;</code> 拿到 <code class=\"language-text\">R</code> 也就是解包了一层过后的 <code class=\"language-text\">Ref&lt;number&gt;</code>。</p>\n<p>再次传给 <code class=\"language-text\">UnwarpRef&lt;Ref&lt;number&gt;&gt;</code> ，又经过同样的逻辑解包后，这次只剩下 <code class=\"language-text\">number</code> 类型传递了。</p>\n<p>也就是 <code class=\"language-text\">UnwarpRef&lt;number&gt;</code>，那么这次就不太一样了，索引签名计算出来是 <code class=\"language-text\">[&#39;other&#39;]</code>，</p>\n<p>也就是</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> UnwarpRef<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  other<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">[</span><span class=\"token string\">'other'</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>自然就解包得到了 <code class=\"language-text\">number</code> 这个类型，终止了递归。</p>\n<h3 id=\"支持对象\"><a href=\"#%E6%94%AF%E6%8C%81%E5%AF%B9%E8%B1%A1\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>支持对象</h3>\n<p>考虑一下这种场景：</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  foo<span class=\"token punctuation\">:</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  bar<span class=\"token punctuation\">:</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>那么，<code class=\"language-text\">count.value.foo</code> 推断的类型应该是 <code class=\"language-text\">number</code>，这需要我们用刚刚的遍历索引和 <code class=\"language-text\">keyof</code> 的知识来做，并且在索引签名中再增加对 <code class=\"language-text\">object</code> 类型的支持：</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> UnwarpRef<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  ref<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Ref</span><span class=\"token operator\">&lt;</span>infer <span class=\"token constant\">R</span><span class=\"token operator\">></span> <span class=\"token operator\">?</span> UnwarpRef<span class=\"token operator\">&lt;</span><span class=\"token constant\">R</span><span class=\"token operator\">></span> <span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span>\n  <span class=\"token comment\">// 注意这里</span>\n  object<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">K</span> <span class=\"token keyword\">in</span> keyof <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> UnwarpRef<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">K</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token punctuation\">}</span>\n  other<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">[</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Ref</span> \n  <span class=\"token operator\">?</span> <span class=\"token string\">'ref'</span> \n  <span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">object</span> \n    <span class=\"token operator\">?</span> <span class=\"token string\">'object'</span> \n    <span class=\"token punctuation\">:</span> <span class=\"token string\">'other'</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>这里在遍历 <code class=\"language-text\">K in keyof T</code> 的时候，只要对值类型 <code class=\"language-text\">T[K]</code> 再进行解包 <code class=\"language-text\">UnwarpRef&lt;T[K]&gt;</code> 即可，如果 <code class=\"language-text\">T[K]</code> 是个 <code class=\"language-text\">Ref</code> 类型，则会拿到 <code class=\"language-text\">Ref</code> 的 <code class=\"language-text\">value</code> 的原始类型。</p>\n<h2 id=\"简化版完整代码\"><a href=\"#%E7%AE%80%E5%8C%96%E7%89%88%E5%AE%8C%E6%95%B4%E4%BB%A3%E7%A0%81\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>简化版完整代码</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">type Ref<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token operator\">=</span> any<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  value<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span>\n<span class=\"token punctuation\">}</span>\n\ntype UnwarpRef<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  ref<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Ref</span><span class=\"token operator\">&lt;</span>infer <span class=\"token constant\">R</span><span class=\"token operator\">></span> <span class=\"token operator\">?</span> UnwarpRef<span class=\"token operator\">&lt;</span><span class=\"token constant\">R</span><span class=\"token operator\">></span> <span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span>\n  object<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">K</span> <span class=\"token keyword\">in</span> keyof <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> UnwarpRef<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">K</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token punctuation\">}</span>\n  other<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">[</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Ref</span> \n  <span class=\"token operator\">?</span> <span class=\"token string\">'ref'</span> \n  <span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">object</span> \n    <span class=\"token operator\">?</span> <span class=\"token string\">'object'</span> \n    <span class=\"token punctuation\">:</span> <span class=\"token string\">'other'</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">function</span> ref<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Ref</span> <span class=\"token operator\">?</span> <span class=\"token constant\">T</span> <span class=\"token punctuation\">:</span> Ref<span class=\"token operator\">&lt;</span>UnwarpRef<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">>></span></code></pre></div>\n<p><a href=\"https://www.typescriptlang.org/play/?ssl=1&#x26;ssc=1&#x26;pln=14&#x26;pc=22#code/C4TwDgpgBAShBmAeAKlAvFAhgOxAPnSgG8BYAKCigDdMAbAVwgC4plyBfc80SKAVWwB3TACcwcJMgIZSFKCIQtUEAB7AI2ACYBnWAkQBLbPAgjYBAPz8ho8fpgEl5SgHsARgCsIAY2AsiUADaANJQRlAA1hAgLvCsALosAsJiEigh8QScci7AABamTmTsgcpqGjp6cc5QVgDkCvB1UDVKUKrqWrruXr4tcpT1PT7AzTWULHW5BSJ18Vxk8PTYvgYu2PL6UgAUNAzMrACUbR0VuhK1rFAsacm2aVJ4C97r2sBQL8vvGI3bspTwFwuFi-OoARjqhwANDU3KIQQhtgAmQ4cVFkcifbDAAB0e0YOMBLigAHoSVBsPQALZuUzkIA\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">在线调戏最终版</a></p>\n<h2 id=\"源码\"><a href=\"#%E6%BA%90%E7%A0%81\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>源码</h2>\n<p>这里还是放一下 Vue3 里的源码，在源码中对于数组、对象和计算属性的 <code class=\"language-text\">ref</code> 也做了相应的处理，但是相信经过了上面简化版的实现后，你对于这个复杂版的原理也可以进一步的掌握了吧。</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Ref</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>isRefSymbol<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span>\n  value<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> ref<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Ref</span> <span class=\"token operator\">?</span> <span class=\"token constant\">T</span> <span class=\"token punctuation\">:</span> Ref<span class=\"token operator\">&lt;</span>UnwrapRef<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">>></span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> UnwrapRef<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  cRef<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ComputedRef</span><span class=\"token operator\">&lt;</span>infer <span class=\"token constant\">V</span><span class=\"token operator\">></span> <span class=\"token operator\">?</span> UnwrapRef<span class=\"token operator\">&lt;</span><span class=\"token constant\">V</span><span class=\"token operator\">></span> <span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span>\n  ref<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Ref</span><span class=\"token operator\">&lt;</span>infer <span class=\"token constant\">V</span><span class=\"token operator\">></span> <span class=\"token operator\">?</span> UnwrapRef<span class=\"token operator\">&lt;</span><span class=\"token constant\">V</span><span class=\"token operator\">></span> <span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span>\n  array<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span>\n  object<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">K</span> <span class=\"token keyword\">in</span> keyof <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> UnwrapRef<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">K</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">[</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ComputedRef</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">?</span> <span class=\"token string\">'cRef'</span>\n  <span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">?</span> <span class=\"token string\">'array'</span>\n    <span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Ref</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">Function</span> <span class=\"token operator\">|</span> CollectionTypes <span class=\"token operator\">|</span> BaseTypes\n      <span class=\"token operator\">?</span> <span class=\"token string\">'ref'</span> <span class=\"token comment\">// bail out on types that shouldn't be unwrapped</span>\n      <span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">object</span> <span class=\"token operator\">?</span> <span class=\"token string\">'object'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'ref'</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>乍一看很劝退，没错，我一开始也被这段代码所激励，开始了为期几个月的 TypeScript 恶补生涯。资料真的很难找，这里面涉及的一些高级技巧需要经过反复的练习和实践，才能学下来并且自如的运用出来。</p>\n<h2 id=\"总结\"><a href=\"#%E6%80%BB%E7%BB%93\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>总结</h2>\n<p>跟着尤小右学源码只是一个噱头，这个递归类型其实是一位外国人提的一个 <a href=\"https://github.com/vuejs/vue-next/commit/c6b7afcc23faefd8c504c3c5705ecb5b0f4be0fd#diff-2751769c8b46d7bef1f06b254c0257f1\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">pr</a> 去实现的，一开始 TypeScript 不支持递归的时候，尤大写了 9 层手动解包，非常的吓人，可以去这个 pr 里看看，茫茫的一片红。</p>\n<p>当然，这也可以看出 TypeScript 是在不断的进步和优化中的，非常期待未来它能够越来越强大。</p>\n<p>相信看完本文的你，一定会对上文中提到的一些高级特性有了进一步的掌握。在 Vue3 到来之前，提前学点 TypeScript ，未雨绸缪总是没错的！</p>\n<p>关于 TypeScript 的学习路径，我也总结在了我之前的文章 <a href=\"https://juejin.im/post/5e7c08bde51d455c4c66ddad#heading-26\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">写给初中级前端的高级进阶指南-TypeScript</a> 中给出了很好的资料，大家一起加油吧！</p>\n<h2 id=\"求点赞\"><a href=\"#%E6%B1%82%E7%82%B9%E8%B5%9E\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>求点赞</h2>\n<p>如果本文对你有帮助，就点个赞支持下吧，你的「赞」是我持续进行创作的动力，让我知道你喜欢看我的文章吧~</p>\n<h2 id=\"️感谢大家\"><a href=\"#%EF%B8%8F%E6%84%9F%E8%B0%A2%E5%A4%A7%E5%AE%B6\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>❤️感谢大家</h2>\n<p>关注公众号「前端从进阶到入院」即可加我好友，我拉你进「前端进阶交流群」，大家一起共同交流和进步。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/4/5/17149cbcaa96ff26?w=910&#x26;h=436&#x26;f=jpeg&#x26;s=78195\"></p>","timeToRead":15,"frontmatter":{"title":"Vue3 TypeScript 之 Ref 类型从零实现","date":"April 13, 2020","spoiler":""},"fields":{"slug":"/598979803/","langKey":"en"}}},"pageContext":{"slug":"/598979803/","previous":{"fields":{"slug":"/598849472/","langKey":"en","directoryName":"598849472"},"frontmatter":{"title":"Vue3 的响应式和以前有什么区别，Proxy 无敌？"}},"next":{"fields":{"slug":"/603170626/","langKey":"en","directoryName":"603170626"},"frontmatter":{"title":"Vue3 究竟好在哪里？（和 React Hook 的详细对比）"}},"translations":[],"translatedLinks":[]}},"staticQueryHashes":["336482444"]}