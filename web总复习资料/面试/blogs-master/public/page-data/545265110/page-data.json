{"componentChunkName":"component---src-templates-blog-post-js","path":"/545265110/","result":{"data":{"site":{"siteMetadata":{"title":"ssh的博客","author":"ssh"}},"markdownRemark":{"id":"00375f2e-a296-5519-a39d-408505c5af16","html":"<h1 id=\"一个组件从初始化到挂载经历了什么\"><a href=\"#%E4%B8%80%E4%B8%AA%E7%BB%84%E4%BB%B6%E4%BB%8E%E5%88%9D%E5%A7%8B%E5%8C%96%E5%88%B0%E6%8C%82%E8%BD%BD%E7%BB%8F%E5%8E%86%E4%BA%86%E4%BB%80%E4%B9%88\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>一个组件从初始化到挂载经历了什么</h1>\n<p>下面的所有解析都以这段代码为基准：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  el<span class=\"token punctuation\">:</span> <span class=\"token string\">\"#app\"</span><span class=\"token punctuation\">,</span>\n  render<span class=\"token punctuation\">:</span> h <span class=\"token operator\">=></span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span>AppSon<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>其中 AppSon 就是组件，它是一个对象：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> AppSon <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"app-son\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      msg<span class=\"token punctuation\">:</span> <span class=\"token number\">123</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"span\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>msg<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>这样一段代码，在 Vue 内部组件化的流程顺序：</p>\n<ol>\n<li><code class=\"language-text\">$createElement</code>，其实 render 接受的参数 h 就是<code class=\"language-text\">this.$createElement</code>的别名</li>\n<li><code class=\"language-text\">createElement</code>，做一下参数的整理，就进入下一步</li>\n<li><code class=\"language-text\">_createElement</code>，比较关键的一步，在这个方法里会判断组件是<code class=\"language-text\">span</code>这样的 html 标签，还是用户写的自定义组件。</li>\n<li><code class=\"language-text\">createComponent</code>，生成组件的 vnode，安装一些 vnode 的生命周期，返回 vnode</li>\n</ol>\n<p>其实，render 函数最终返回的就是<code class=\"language-text\">vnode</code>。</p>\n<h2 id=\"流程解析\"><a href=\"#%E6%B5%81%E7%A8%8B%E8%A7%A3%E6%9E%90\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>流程解析</h2>\n<h2 id=\"createelement\"><a href=\"#createelement\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>$createElement</h2>\n<p>调用<code class=\"language-text\">createElement</code>方法，第一个参数是 vm 实例自身，剩余的参数原封不动的透传。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">vm<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">$createElement</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"createelement-1\"><a href=\"#createelement-1\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>createElement</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">createElement</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token comment\">// 上一步传进来的vm实例，在哪个组件的render里调用，context就是哪个组件的实例。</span>\n  context<span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 在例子中，就是AppSon这个对象</span>\n  tag<span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 可以传入props等交给子组件的选项</span>\n  data<span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 子组件中间的内容</span>\n  children<span class=\"token punctuation\">,</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>之后有一个判断</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> tag <span class=\"token operator\">===</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// html标签流程</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 组件化流程</span>\n  vnode <span class=\"token operator\">=</span> <span class=\"token function\">createComponent</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">createComponent</code>接受的四个参数就是上文的方法传进去的</p>\n<h2 id=\"createcomponent\"><a href=\"#createcomponent\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>createComponent</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">createComponent</span><span class=\"token punctuation\">(</span>\n  <span class=\"token comment\">// 还是上文中的tag，本文中是AppSon对象</span>\n  Ctor<span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 下面的都一致</span>\n  data<span class=\"token punctuation\">,</span>\n  context<span class=\"token punctuation\">,</span>\n  children\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isObject</span><span class=\"token punctuation\">(</span>Ctor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Ctor <span class=\"token operator\">=</span> baseCtor<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span>Ctor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 给vnode安装一些生命周期函数（注意这里是vnode的生命周期，而不是created那些组件声明周期）</span>\n  <span class=\"token function\">installComponentHooks</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">var</span> vnode <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">VNode</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"vue-component-\"</span> <span class=\"token operator\">+</span> Ctor<span class=\"token punctuation\">.</span>cid <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">?</span> <span class=\"token string\">\"-\"</span> <span class=\"token operator\">+</span> name <span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    data<span class=\"token punctuation\">,</span>\n    undefined<span class=\"token punctuation\">,</span>\n    undefined<span class=\"token punctuation\">,</span>\n    undefined<span class=\"token punctuation\">,</span>\n    context<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      Ctor<span class=\"token punctuation\">:</span> Ctor<span class=\"token punctuation\">,</span>\n      propsData<span class=\"token punctuation\">:</span> propsData<span class=\"token punctuation\">,</span>\n      listeners<span class=\"token punctuation\">:</span> listeners<span class=\"token punctuation\">,</span>\n      tag<span class=\"token punctuation\">:</span> tag<span class=\"token punctuation\">,</span>\n      children<span class=\"token punctuation\">:</span> children\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    asyncFactory\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> vnode<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>下面有一个逻辑</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isObject</span><span class=\"token punctuation\">(</span>Ctor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  Ctor <span class=\"token operator\">=</span> baseCtor<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span>Ctor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>其中<code class=\"language-text\">baseCtor.extend(Ctor)</code>就可以暂时理解为 Vue.extend，这是一个全局共用方法，从名字也可以看出它主要是做一些继承，让子组件的也拥有父组件的一些能力，这个方法返回的是一个新的构造函数。</p>\n<p><strong>组件对象最终都会用 extend 这个 api 变成一个组件构造函数，这个构造函数继承了父构造函数 Vue 的一些属性</strong></p>\n<p>extend 函数具体做了什么呢？</p>\n<h3 id=\"createcomponent--vueextend\"><a href=\"#createcomponent--vueextend\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>createComponent / Vue.extend</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Vue<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">extend</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>extendOptions<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  extendOptions <span class=\"token operator\">=</span> extendOptions <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// this在这个例子其实就是Vue。</span>\n  <span class=\"token keyword\">var</span> Super <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Appson这个组件的构造函数</span>\n  <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">Sub</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">VueComponent</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 这个_init就是调用的Vue.prototype._init</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_init</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 把Vue.prototype生成一个</span>\n  <span class=\"token comment\">// { __proto__: Vue.prototype }这样的对象，</span>\n  <span class=\"token comment\">// 直接赋值给子组件构造函数的prototype</span>\n  <span class=\"token comment\">// 此时子组件构造函数的原型链上就可以拿到Vue的原型链的属性了</span>\n  Sub<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>Super<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  Sub<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">=</span> Sub<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 合并Vue.option上的一些全局配置</span>\n  Sub<span class=\"token punctuation\">.</span>options <span class=\"token operator\">=</span> <span class=\"token function\">mergeOptions</span><span class=\"token punctuation\">(</span>Super<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">,</span> extendOptions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  Sub<span class=\"token punctuation\">[</span><span class=\"token string\">\"super\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Super<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 拷贝静态函数</span>\n  Sub<span class=\"token punctuation\">.</span>extend <span class=\"token operator\">=</span> Super<span class=\"token punctuation\">.</span>extend<span class=\"token punctuation\">;</span>\n  Sub<span class=\"token punctuation\">.</span>mixin <span class=\"token operator\">=</span> Super<span class=\"token punctuation\">.</span>mixin<span class=\"token punctuation\">;</span>\n  Sub<span class=\"token punctuation\">.</span>use <span class=\"token operator\">=</span> Super<span class=\"token punctuation\">.</span>use<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 返回子组件的构造函数</span>\n  <span class=\"token keyword\">return</span> Sub<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>到了这一步，我们一开始定义的 Appson 组件对象，已经变成了一个函数，可以通过 new AppSon()来生成一个组件实例了，并且组件配置对象被合并到了<code class=\"language-text\">Sub.options</code>这个构造函数的静态属性上。</p>\n<h3 id=\"createcomponent--installcomponenthooks\"><a href=\"#createcomponent--installcomponenthooks\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>createComponent / installComponentHooks</h3>\n<p><code class=\"language-text\">installComponentHooks</code>这个方法是为了给 vnode 上加入一些生命周期函数，</p>\n<p>其中有一个<code class=\"language-text\">init</code>生命周期，这个周期后面被调用的时候再讲解。</p>\n<h3 id=\"createcomponent--new-vnode\"><a href=\"#createcomponent--new-vnode\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>createComponent / new VNode</h3>\n<p>可以看出，主要是生成 vnode 的实例，并且赋值给<code class=\"language-text\">vnode.componentInstance</code>，并且调用<code class=\"language-text\">$mount</code>方法挂载 dom 节点，注意这个<code class=\"language-text\">init</code>生命周期此时还没有调用。</p>\n<p>到这为止<code class=\"language-text\">render</code>的流程就讲完了，现在我们拥有了一个<code class=\"language-text\">vnode</code>节点，它有一些关键的属性</p>\n<ol>\n<li>vnode.componentOptions.Ctor: 上一步<code class=\"language-text\">extend</code>生成的子组件构造函数。</li>\n<li>vnode.data.hook: 里面保存了<code class=\"language-text\">init</code>等 vnode 生命周期方法</li>\n<li>vnode.context: 调用$createElement 的是哪个实例，这个 context 就是谁。</li>\n</ol>\n<h2 id=\"mount\"><a href=\"#mount\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>$mount</h2>\n<p>最外层的组件调用了<code class=\"language-text\">$mount</code>后，组件在初次渲染的时候其实是递归去调用<code class=\"language-text\">createElm</code>的，而<code class=\"language-text\">createElm</code>中会去调用组件 vnode 的<code class=\"language-text\">init</code>钩子。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isDef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> i<span class=\"token punctuation\">.</span>hook<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isDef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> i<span class=\"token punctuation\">.</span>init<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">i</span><span class=\"token punctuation\">(</span>vnode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>然后就会走进 vnode 的<code class=\"language-text\">init</code>生命周期的逻辑</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> child <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>vnode<span class=\"token punctuation\">.</span>componentInstance <span class=\"token operator\">=</span> <span class=\"token function\">createComponentInstanceForVnode</span><span class=\"token punctuation\">(</span>\n  vnode<span class=\"token punctuation\">,</span>\n  activeInstance\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nchild<span class=\"token punctuation\">.</span><span class=\"token function\">$mount</span><span class=\"token punctuation\">(</span>vnode<span class=\"token punctuation\">.</span>elm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">createComponentInstanceForVnode</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">createComponentInstanceForVnode</span> <span class=\"token punctuation\">(</span>\n  vnode<span class=\"token punctuation\">:</span> any<span class=\"token punctuation\">,</span>\n  parent<span class=\"token punctuation\">:</span> any<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Component <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> options<span class=\"token punctuation\">:</span> InternalComponentOptions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 标记这是一个组件节点</span>\n    _isComponent<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// Appson组件的vnode</span>\n    _parentVnode<span class=\"token punctuation\">:</span> vnode<span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 当前正在活跃的父组件实例，在本例中就是根Vue实例</span>\n    <span class=\"token comment\">// new Vue({</span>\n    <span class=\"token comment\">//   el: \"#app\",</span>\n    <span class=\"token comment\">//   render: h => h(AppSon)</span>\n    <span class=\"token comment\">// });</span>\n    parent\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">vnode<span class=\"token punctuation\">.</span>componentOptions<span class=\"token punctuation\">.</span>Ctor</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>可以看出，最终调用组件构造函数，然后调用<code class=\"language-text\">\\_init</code> 方法，它接受到的 <code class=\"language-text\">options</code> 不再是</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  props<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">methods</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这样的传统 Vue 对象了，而是</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n    _isComponent: true,\n    _parentVnode: vnode,\n    parent,\n  }</code></pre></div>\n<p>这样的一个对象，然后_init 内部会针对这样特征的对象，调用<code class=\"language-text\">initInternalComponent</code>做一些特殊的处理，\n这里有一个疑惑点，那刚刚子组件声明的 data 那些选项哪去了呢？\n其实是被保存在<code class=\"language-text\">Ctor.options</code>里了。</p>\n<p>然后在<code class=\"language-text\">initInternalComponent</code>中，把子组件构造函数上保存的 options 再转移到<code class=\"language-text\">vm.$options.__proto__</code>上。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> opts <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">.</span>$options <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">.</span>constructor<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>之后生成了子组件的实例后，又会调用<code class=\"language-text\">child.$mount(vnode.elm)</code>，继续的去递归这个初始化的过程。</p>","timeToRead":5,"frontmatter":{"title":"Vue中的组件从初始化到挂载经历了什么","date":"January 04, 2020","spoiler":""},"fields":{"slug":"/545265110/","langKey":"en"}}},"pageContext":{"slug":"/545265110/","previous":{"fields":{"slug":"/544231524/","langKey":"en","directoryName":"544231524"},"frontmatter":{"title":"Vue3 + TypeScript  + 新型状态管理模式，手把手带你实现小型应用。"}},"next":{"fields":{"slug":"/545524362/","langKey":"en","directoryName":"545524362"},"frontmatter":{"title":"Vue3中不止composition-api，其他的提案(RFC)也很精彩。"}},"translations":[],"translatedLinks":[]}},"staticQueryHashes":["336482444"]}