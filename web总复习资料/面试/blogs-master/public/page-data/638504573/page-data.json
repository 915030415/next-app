{"componentChunkName":"component---src-templates-blog-post-js","path":"/638504573/","result":{"data":{"site":{"siteMetadata":{"title":"ssh的博客","author":"ssh"}},"markdownRemark":{"id":"20d25bc4-74c9-52d4-9143-8e3b4d022bcf","html":"<h2 id=\"前言\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>前段时间在掘金看到一个热帖 <a href=\"https://juejin.im/post/5e778d34f265da5756327977\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">今天又懒得加班了，能写出这两个算法吗？带你去电商公司写商品中心</a>，里面提到了一个比较有意思故事，大意就是一个看似比较简单的电商 sku 的全排列组合算法，但是却有好多人没能顺利写出来。有一个毕业生小伙子在面试的时候给出了思路，但是进去以后还是没写出来，羞愧跑路~</p>\n<p>其实排列组合是一个很经典的算法，也是对递归回溯法的一个实践运用，本篇文章就以带你学习一个标准「排列组合求解模板」，耐心看完，你会有更多收获。</p>\n<h2 id=\"需求\"><a href=\"#%E9%9C%80%E6%B1%82\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>需求</h2>\n<p>需求描述起来很简单，有这样三个数组：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> names <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"iPhone X\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"iPhone XS\"</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">let</span> colors <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"黑色\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"白色\"</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">let</span> storages <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"64g\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"256g\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>需要把他们的所有组合穷举出来，最终得到这样一个数组：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"iPhone X\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"黑色\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"64g\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"iPhone X\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"黑色\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"256g\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"iPhone X\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"白色\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"64g\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"iPhone X\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"白色\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"256g\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"iPhone XS\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"黑色\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"64g\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"iPhone XS\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"黑色\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"256g\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"iPhone XS\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"白色\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"64g\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"iPhone XS\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"白色\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"256g\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>由于这些属性数组是不定项的，所以不能简单的用三重的暴力循环来求解了。</p>\n<h2 id=\"思路\"><a href=\"#%E6%80%9D%E8%B7%AF\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>思路</h2>\n<p>如果我们选用递归回溯法来解决这个问题，那么最重要的问题就是设计我们的递归函数。</p>\n<h3 id=\"思路分解\"><a href=\"#%E6%80%9D%E8%B7%AF%E5%88%86%E8%A7%A3\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>思路分解</h3>\n<p>以上文所举的例子来说，比如我们目前的属性数组就是：<code class=\"language-text\">names</code>、<code class=\"language-text\">colors</code>、<code class=\"language-text\">storages</code>，首先我们会处理 <code class=\"language-text\">names</code> 数组，很显然对于每个属性数组，都需要去<strong>遍历</strong>它，然后一个一个选择后再去和 下一个数组的每一项进行组合。</p>\n<p>我们设计的递归函数接受两个参数：</p>\n<ul>\n<li><strong><code class=\"language-text\">index</code></strong> 对应当前正在处理的下标，是 <code class=\"language-text\">names</code> 还是 <code class=\"language-text\">colors</code> 或是 <code class=\"language-text\">storage</code>。</li>\n<li><strong><code class=\"language-text\">prev</code></strong> 上一次递归已经拼接成的结果，比如 <code class=\"language-text\">[&#39;iPhone X&#39;, &#39;黑色&#39;]</code>。</li>\n</ul>\n<p>进入递归函数：</p>\n<ol>\n<li>处理属性数组的下标<code class=\"language-text\">0</code>：假设我们在第一次循环中选择了 <code class=\"language-text\">iPhone XS</code>，那此时我们有一个未完成的结果状态，假设我们叫它 <code class=\"language-text\">prev</code>，此时 <code class=\"language-text\">prev = [&#39;iPhone XS&#39;]</code>。</li>\n<li>处理属性数组的下标<code class=\"language-text\">1</code>：那么就处理到 <code class=\"language-text\">colors</code> 数组的了，并且我们拥有 <code class=\"language-text\">prev</code>，在遍历 <code class=\"language-text\">colors</code> 的时候继续递归的去把 <code class=\"language-text\">prev</code> 拼接成 <code class=\"language-text\">prev.concat(color)</code>，也就是 <code class=\"language-text\">[&#39;iPhone XS&#39;, &#39;黑色&#39;]</code> 这样继续把这个 <code class=\"language-text\">prev</code> 交给下一次递归。</li>\n<li>处理属性数组的下标<code class=\"language-text\">2</code>：那么就处理到 <code class=\"language-text\">storages</code> 数组的了，并且我们拥有了 <code class=\"language-text\">name + color</code> 的 <code class=\"language-text\">prev</code>，在遍历 <code class=\"language-text\">storages</code> 的时候继续递归的去把 <code class=\"language-text\">prev</code> 拼接成 <code class=\"language-text\">prev.concat(storage)</code>，也就是 <code class=\"language-text\">[&#39;iPhone XS&#39;, &#39;黑色&#39;, &#39;64g&#39;]</code>，并且此时我们发现处理的属性数组下标已经到达了末尾，那么就放入全局的结果变量 <code class=\"language-text\">res</code> 中，作为一个结果。</li>\n</ol>\n<h3 id=\"编码实现\"><a href=\"#%E7%BC%96%E7%A0%81%E5%AE%9E%E7%8E%B0\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>编码实现</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> names <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"iPhone X\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"iPhone XS\"</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">let</span> colors <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"黑色\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"白色\"</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">let</span> storages <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"64g\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"256g\"</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">combine</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>chunks<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">helper</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>chunkIndex<span class=\"token punctuation\">,</span> prev<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> chunk <span class=\"token operator\">=</span> chunks<span class=\"token punctuation\">[</span>chunkIndex<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">let</span> isLast <span class=\"token operator\">=</span> chunkIndex <span class=\"token operator\">===</span> chunks<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> val <span class=\"token keyword\">of</span> chunk<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> cur <span class=\"token operator\">=</span> prev<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isLast<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 如果已经处理到数组的最后一项了 则把拼接的结果放入返回值中</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">helper</span><span class=\"token punctuation\">(</span>chunkIndex <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> cur<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 从属性数组下标为 0 开始处理</span>\n  <span class=\"token comment\">// 并且此时的 prev 是个空数组</span>\n  <span class=\"token function\">helper</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> res\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">combine</span><span class=\"token punctuation\">(</span>names<span class=\"token punctuation\">,</span> colors<span class=\"token punctuation\">,</span> storages<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"递归树图\"><a href=\"#%E9%80%92%E5%BD%92%E6%A0%91%E5%9B%BE\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>递归树图</h3>\n<p>画出以 <code class=\"language-text\">iPhone X</code> 这一项为起点的递归树图，当然这个问题是一个多个根节点的树，请自行脑补 <code class=\"language-text\">iPhone XS</code> 为起点的树，子结构是一模一样的。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/6/15/172b5d608e9d50d1?w=1477&#x26;h=714&#x26;f=png&#x26;s=171485\"></p>\n<h2 id=\"万能模板\"><a href=\"#%E4%B8%87%E8%83%BD%E6%A8%A1%E6%9D%BF\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>万能模板</h2>\n<p>为什么说这种接法是排列组合的「万能模板呢」？来看一下 LeetCode 上的 <a href=\"https://leetcode-cn.com/problems/combinations\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">77. 组合</a> 问题，这是一道难度为 <code class=\"language-text\">medium</code> 的问题，其实算是比较有难度的问题了：</p>\n<h3 id=\"问题\"><a href=\"#%E9%97%AE%E9%A2%98\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>问题</h3>\n<p>给定两个整数 n 和 k，返回 1 … n 中所有可能的 k 个数的组合。</p>\n<p>示例:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">输入: n = 4, k = 2\n输出:\n[\n  [2,4],\n  [3,4],\n  [2,3],\n  [1,2],\n  [1,3],\n  [1,4],\n]</code></pre></div>\n<h2 id=\"解答\"><a href=\"#%E8%A7%A3%E7%AD%94\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>解答</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">combine</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> ret <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">helper</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span> prev<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> len <span class=\"token operator\">=</span> prev<span class=\"token punctuation\">.</span>length\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>len <span class=\"token operator\">===</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      ret<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>prev<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> start<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">helper</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> prev<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">helper</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> ret\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>可以看出这题和我们求解电商排列组合的代码竟然如此相似。只需要设计一个接受 <code class=\"language-text\">start</code>排列起始位置、<code class=\"language-text\">prev</code>上一次拼接结果为参数的递归 <code class=\"language-text\">helper</code>函数，</p>\n<p>然后对于每一个起点下标 <code class=\"language-text\">start</code>，先拼接上 <code class=\"language-text\">start</code>位置对应的值，再不断的再以其他剩余的下标作为起点去做下一次拼接。当 <code class=\"language-text\">prev</code> 这个中间状态的拼接数组到达题目的要求长度 <code class=\"language-text\">k</code>后，就放入结果数组中。</p>\n<h3 id=\"剪枝\"><a href=\"#%E5%89%AA%E6%9E%9D\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>剪枝</h3>\n<p>在这个解法中，有一些递归分支是明显不可能获取到结果的，我们每次递归都会循环尝试 <code class=\"language-text\">&lt;= n</code>的所有项去作为<code class=\"language-text\">start</code>，假设我们要求的数组长度 <code class=\"language-text\">k = 3</code>，最大值 <code class=\"language-text\">n = 4</code>。</p>\n<p>而我们以 <code class=\"language-text\">prev = [1]</code>，再去以 <code class=\"language-text\">n = 4</code> 为 <code class=\"language-text\">start</code> 作为递归的起点，那么显然是不可能得到结果的，因为 <code class=\"language-text\">n = 4</code> 的话就只剩下 <code class=\"language-text\">4</code>这一项可以拼接了，最多也就拼接成 <code class=\"language-text\">[1, 4]</code>，不可能满足 <code class=\"language-text\">k = 3</code> 的条件。</p>\n<p>所以在进入递归之前，就果断的把这些“废枝”给减掉。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">combine</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> ret <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">helper</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span> prev<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> len <span class=\"token operator\">=</span> prev<span class=\"token punctuation\">.</span>length\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>len <span class=\"token operator\">===</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      ret<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>prev<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 还有 rest 个位置待填补</span>\n    <span class=\"token keyword\">let</span> rest <span class=\"token operator\">=</span> k <span class=\"token operator\">-</span> prev<span class=\"token punctuation\">.</span>length\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> start<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> rest<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">continue</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token function\">helper</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> prev<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">helper</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> ret\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"相似题型\"><a href=\"#%E7%9B%B8%E4%BC%BC%E9%A2%98%E5%9E%8B\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>相似题型</h2>\n<p>当然，力扣中可以套用这个模板的相似题型还有很多，而且大多数难度都是 <code class=\"language-text\">medium</code>的，比如快手的面试题<a href=\"https://github.com/sl1673495/leetcode-javascript/issues/75\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">子集 II-90</a>，可以看出排列组合的递归解法还是有一定的难度的。</p>\n<p>我在维护的 <a href=\"https://github.com/sl1673495/leetcode-javascript/issues?q=is%3Aopen+is%3Aissue+label%3A%E9%80%92%E5%BD%92%E4%B8%8E%E5%9B%9E%E6%BA%AF\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">LeetCode 题解仓库</a> 中已经按标签筛选好 「递归与回溯」类型的几道题目和解答了，感兴趣的小伙伴也可以一起攻破它们。</p>\n<h2 id=\"总结\"><a href=\"#%E6%80%BB%E7%BB%93\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>总结</h2>\n<p>排列组合问题并不是空中楼阁，在实际工作中也会经常遇到这种场景，掌握了递归回溯的标准模板当然不是为了让你死记硬背套公式，而是真正的理解它。遇到需要递归解决的问题。</p>\n<ol>\n<li>画出递归树状图，找出递归公式。</li>\n<li>对于不可能达成条件的分支递归，进行合理的「剪枝」。</li>\n</ol>\n<p>希望阅读完本篇文章的你，能对递归和排列组合问题有进一步的理解和收获。</p>\n<h2 id=\"️-感谢大家\"><a href=\"#%EF%B8%8F-%E6%84%9F%E8%B0%A2%E5%A4%A7%E5%AE%B6\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>❤️ 感谢大家</h2>\n<p>1.如果本文对你有帮助，就点个赞支持下吧，你的「赞」是我创作的动力。</p>\n<p>2.关注公众号「前端从进阶到入院」即可加我好友，我拉你进「前端进阶交流群」，大家一起共同交流和进步。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/4/5/17149cbcaa96ff26?w=910&#x26;h=436&#x26;f=jpeg&#x26;s=78195\">\n</p>","timeToRead":7,"frontmatter":{"title":"前端电商 sku 全排列的递归回溯算法实战","date":"June 15, 2020","spoiler":""},"fields":{"slug":"/638504573/","langKey":"en"}}},"pageContext":{"slug":"/638504573/","previous":{"fields":{"slug":"/629748618/","langKey":"en","directoryName":"629748618"},"frontmatter":{"title":"前端动画必知必会：React 和 Vue 都在用的 FLIP 思想实战"}},"next":{"fields":{"slug":"/640898677/","langKey":"en","directoryName":"640898677"},"frontmatter":{"title":"前端「N皇后」递归回溯经典问题图解"}},"translations":[],"translatedLinks":[]}},"staticQueryHashes":["336482444"]}