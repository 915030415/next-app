{"componentChunkName":"component---src-templates-blog-post-js","path":"/640898677/","result":{"data":{"site":{"siteMetadata":{"title":"ssh的博客","author":"ssh"}},"markdownRemark":{"id":"9ba7da93-0601-5558-8af5-c8a06b755623","html":"<h2 id=\"前言\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>在我的上一篇文章<a href=\"https://juejin.im/post/5ee6d9026fb9a047e60815f1\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">《前端电商 sku 的全排列算法很难吗？学会这个套路，彻底掌握排列组合。》</a>中详细的讲解了排列组合的递归回溯解法，相信看过的小伙伴们对这个套路已经有了一定程度的掌握（没看过的同学快回头学习~）。</p>\n<p>昨晚正好在看字节跳动的招聘直播，弹幕里有一些同学提到了面试时候考到了「N 皇后」问题，他没有答出来。这是一道 LeetCode 上难度为 hard 的题目。</p>\n<p>听起来很吓人，但是看过我上一篇文章的同学应该还记得我有提到过，我解决电商 sku 问题用的是排列组合的万能模板，这个万能模板能否用来解决这个经典的计算机问题「N 皇后」呢？答案是肯定的。</p>\n<h2 id=\"问题\"><a href=\"#%E9%97%AE%E9%A2%98\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>问题</h2>\n<p>先来看问题，其实问题不难理解：</p>\n<p>n 皇后问题研究的是如何将 n 个皇后放置在 n×n 的棋盘上，并且使皇后彼此之间不能相互攻击。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/6/18/172c56c99ac0bc53?w=258&#x26;h=276&#x26;f=png&#x26;s=12052\"></p>\n<p>上图为 8 皇后问题的一种解法。</p>\n<p>给定一个整数 n，返回所有不同的 n 皇后问题的解决方案。</p>\n<p>每一种解法包含一个明确的 n 皇后问题的棋子放置方案，该方案中 ‘Q’ 和 ’.’ 分别代表了皇后和空位。</p>\n<p>示例:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">输入: 4\n输出: [\n [&quot;.Q..&quot;,  // 解法 1\n  &quot;...Q&quot;,\n  &quot;Q...&quot;,\n  &quot;..Q.&quot;],\n\n [&quot;..Q.&quot;,  // 解法 2\n  &quot;Q...&quot;,\n  &quot;...Q&quot;,\n  &quot;.Q..&quot;]\n]\n解释: 4 皇后问题存在两个不同的解法。</code></pre></div>\n<p>提示：</p>\n<blockquote>\n<p>皇后，是国际象棋中的棋子，意味着国王的妻子。皇后只做一件事，那就是“吃子”。当她遇见可以吃的棋子时，就迅速冲上去吃掉棋子。当然，她横、竖、斜都可走一到七步，可进可退。（引用自 百度百科 - 皇后 ）</p>\n</blockquote>\n<p><a href=\"https://leetcode-cn.com/problems/n-queens\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">LeetCode 原题地址</a></p>\n<h2 id=\"思路\"><a href=\"#%E6%80%9D%E8%B7%AF\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>思路</h2>\n<p>乍一看这种选出全部方案的问题有点难找到头绪，但是其实仔细看一下，题目已经限定了皇后之间不能互相攻击，转化成代码思维的语言其实就是说<strong>每一行只能有一个皇后，每条对角线上也只能有一个皇后</strong>，</p>\n<p>也就是说：</p>\n<ol>\n<li>\n<p>在一列上，错。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">[</span>\n<span class=\"token string\">'Q'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span>\n<span class=\"token string\">'Q'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n</li>\n<li>\n<p>在左上 -> 右下的对角线上，错。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">[</span>\n<span class=\"token string\">'Q'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span>\n<span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Q'</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n</li>\n<li>\n<p>在左下 -> 右上的对角线上，错。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">[</span>\n<span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Q'</span>\n<span class=\"token string\">'Q'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n</li>\n</ol>\n<p>那么以这个思路为基准，我们就可以把这个问题转化成一个「逐行放置皇后」的问题，思考一下递归函数应该怎么设计？</p>\n<p>对于 <code class=\"language-text\">n皇后</code> 的求解，我们可以设计一个接受如下参数的函数：</p>\n<ol>\n<li><code class=\"language-text\">rowIndex</code> 参数，代表当前正在尝试第几行放置皇后。</li>\n<li><code class=\"language-text\">prev</code> 参数，代表之前的行已经放置的皇后位置，比如 <code class=\"language-text\">[1, 3]</code> 就代表第 0 行（数组下标）的皇后放置在位置 1，第 1 行的皇后放置在位置 3。</li>\n</ol>\n<p>当 <code class=\"language-text\">rowIndex === n</code> 即说明这个递归成功的放置了 n 个皇后，一路畅通无阻的到达了终点，每次的放置都顺利的通过了我们的限制条件，那么就把这次的 <code class=\"language-text\">prev</code> 做为一个结果放置到一个全局的 <code class=\"language-text\">res</code> 结果数组中。</p>\n<h2 id=\"树状图\"><a href=\"#%E6%A0%91%E7%8A%B6%E5%9B%BE\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>树状图</h2>\n<p>这里我尝试用工具画出了 <code class=\"language-text\">4皇后</code> 的其中的一个解递归的树状图，第一行我直接选择了以把皇后<code class=\"language-text\">放在2</code>为起点，省略了以 <code class=\"language-text\">放在1</code>、<code class=\"language-text\">放在3</code>、<code class=\"language-text\">放在4</code> 为起点的树状图，否则递归树太大了图片根本放不下。</p>\n<p>注意这里的 <code class=\"language-text\">放在x</code>，为了方便理解，这个 <code class=\"language-text\">x</code> 并不是数组下标，而是从 1 开始的计数。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/6/18/172c58a49e4391b8?w=1439&#x26;h=1981&#x26;f=png&#x26;s=331633\"></p>\n<p>在这次递归之后，就求出了一个结果：<code class=\"language-text\">[1, 3, 0, 2]</code>。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/6/18/172c58ee2f2ea481?w=656&#x26;h=485&#x26;f=png&#x26;s=36943\"></p>\n<p>你可以在纸上按照我的这种方式继续画一画尝试以其他起点开始的解法，来看看这个算法的具体流程。</p>\n<h2 id=\"实现\"><a href=\"#%E5%AE%9E%E7%8E%B0\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>实现</h2>\n<p>理想总是美好的，虽然目前为止我们的思路很清晰了，但是具体的编码还是会遇到几个头疼的问题的。</p>\n<p>当前一行已经落下一个皇后之后，下一行需要判断三个条件：</p>\n<ol>\n<li>在这一列上，之前不能摆放过皇后。</li>\n<li>在对角线 1，也就是「左下 -> 右上」这条对角线上，之前不能摆放过皇后。</li>\n<li>在对角线 2，也就是「右上 -> 左下」这条对角线上，之前不能摆放过皇后。</li>\n</ol>\n<p>难点在于判断对角线上是否摆放过皇后了，其实找到规律后也不难了，看图：</p>\n<p><strong><code class=\"language-text\">对角线1</code></strong>：</p>\n<p>直接通过这个点的横纵坐标 <code class=\"language-text\">rowIndex + columnIndex</code> 相加，相等的话就在同在对角线 1 上：</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/6/18/172c5903745159bb?w=643&#x26;h=354&#x26;f=png&#x26;s=204813\" alt=\"image\"></p>\n<p><strong><code class=\"language-text\">对角线2</code></strong>：</p>\n<p>直接通过这个点的横纵坐标 <code class=\"language-text\">rowIndex - columnIndex</code> 相减，相等的话就在同在对角线 2 上：</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/6/18/172c5903745ceb58?w=634&#x26;h=370&#x26;f=png&#x26;s=211716\" alt=\"image\"></p>\n<p>所以：</p>\n<ol>\n<li>用 <code class=\"language-text\">columns</code> 数组记录摆放过的<strong>列</strong>下标，摆放过后直接标记为 true 即可。</li>\n<li>用 <code class=\"language-text\">dia1</code> 数组记录摆放过的<strong>对角线 1</strong>下标，摆放过后直接把下标 <code class=\"language-text\">rowIndex + columnIndex</code>标记为 true 即可。</li>\n<li>用 <code class=\"language-text\">dia2</code> 数组记录摆放过的<strong>对角线 2</strong>下标，摆放过后直接把下标 <code class=\"language-text\">rowIndex - columnIndex</code>标记为 true 即可。</li>\n<li>递归函数的参数 <code class=\"language-text\">prev</code> 代表每一行中皇后放置的列数，比如 <code class=\"language-text\">prev[0] = 3</code> 代表第 0 行皇后放在第 3 列，以此类推。</li>\n<li>每次进入递归函数前，先把当前项所对应的<strong>列、对角线 1、对角线 2</strong>的下标标记为 true，带着标记后的状态进入递归函数。并且在退出本次递归后，需要把这些状态重置为 false ，再进入下一轮循环。</li>\n</ol>\n<p>有了这几个辅助知识点，就可以开始编写递归函数了，在每一行，我们都不断的尝试一个坐标点，只要它和之前已有的结果都不冲突，那么就可以放入数组中作为下一次递归的开始值。</p>\n<p>这样，如果递归函数顺利的来到了 <code class=\"language-text\">rowIndex === n</code> 的情况，说明之前的条件全部满足了，一个 <code class=\"language-text\">n皇后</code> 的解就产生了。把 <code class=\"language-text\">prev</code> 这个一维数组通过辅助函数恢复成题目要求的完整的「二维数组」即可。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * @param {number} n\n * @return {string[][]}\n */</span>\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">solveNQueens</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token comment\">// 已摆放皇后的的列下标</span>\n  <span class=\"token keyword\">let</span> columns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token comment\">// 已摆放皇后的对角线1下标 左下 -> 右上</span>\n  <span class=\"token comment\">// 计算某个坐标是否在这个对角线的方式是「行下标 + 列下标」是否相等</span>\n  <span class=\"token keyword\">let</span> dia1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token comment\">// 已摆放皇后的对角线2下标 左上 -> 右下</span>\n  <span class=\"token comment\">// 计算某个坐标是否在这个对角线的方式是「行下标 - 列下标」是否相等</span>\n  <span class=\"token keyword\">let</span> dia2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token comment\">// 在选择当前的格子后 记录状态</span>\n  <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">record</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>rowIndex<span class=\"token punctuation\">,</span> columnIndex<span class=\"token punctuation\">,</span> bool<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    columns<span class=\"token punctuation\">[</span>columnIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> bool\n    dia1<span class=\"token punctuation\">[</span>rowIndex <span class=\"token operator\">+</span> columnIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> bool\n    dia2<span class=\"token punctuation\">[</span>rowIndex <span class=\"token operator\">-</span> columnIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> bool\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 尝试在一个n皇后问题中 摆放第index行内的皇后位置</span>\n  <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">putQueen</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>rowIndex<span class=\"token punctuation\">,</span> prev<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rowIndex <span class=\"token operator\">===</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">generateBoard</span><span class=\"token punctuation\">(</span>prev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 尝试摆第index行的皇后 尝试[0, n-1]列</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> columnIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> columnIndex <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> columnIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 在列上不冲突</span>\n      <span class=\"token keyword\">let</span> columnNotConflict <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>columns<span class=\"token punctuation\">[</span>columnIndex<span class=\"token punctuation\">]</span>\n      <span class=\"token comment\">// 在对角线1上不冲突</span>\n      <span class=\"token keyword\">let</span> dia1NotConflict <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>dia1<span class=\"token punctuation\">[</span>rowIndex <span class=\"token operator\">+</span> columnIndex<span class=\"token punctuation\">]</span>\n      <span class=\"token comment\">// 在对角线2上不冲突</span>\n      <span class=\"token keyword\">let</span> dia2NotConflict <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>dia2<span class=\"token punctuation\">[</span>rowIndex <span class=\"token operator\">-</span> columnIndex<span class=\"token punctuation\">]</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>columnNotConflict <span class=\"token operator\">&amp;&amp;</span> dia1NotConflict <span class=\"token operator\">&amp;&amp;</span> dia2NotConflict<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 都不冲突的话，先记录当前已选位置，进入下一轮递归</span>\n        <span class=\"token function\">record</span><span class=\"token punctuation\">(</span>rowIndex<span class=\"token punctuation\">,</span> columnIndex<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">putQueen</span><span class=\"token punctuation\">(</span>rowIndex <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> prev<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>columnIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// 递归出栈后，在状态中清除这个位置的记录，下一轮循环应该是一个全新的开始。</span>\n        <span class=\"token function\">record</span><span class=\"token punctuation\">(</span>rowIndex<span class=\"token punctuation\">,</span> columnIndex<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">putQueen</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> res\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 生成二维数组的辅助函数</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">generateBoard</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> n <span class=\"token operator\">=</span> row<span class=\"token punctuation\">.</span>length\n  <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> y <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> y<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> cur <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> x <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> x<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">===</span> row<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        cur <span class=\"token operator\">+=</span> <span class=\"token string\">\"Q\"</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        cur <span class=\"token operator\">+=</span> <span class=\"token string\">\".\"</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> res\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"课后练习\"><a href=\"#%E8%AF%BE%E5%90%8E%E7%BB%83%E4%B9%A0\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>课后练习</h2>\n<p>对递归回溯的相似 LeetCode 题型感兴趣的同学，可以去我维护的 <a href=\"https://github.com/sl1673495/leetcode-javascript/issues?q=is%3Aopen+is%3Aissue+label%3A%E9%80%92%E5%BD%92%E4%B8%8E%E5%9B%9E%E6%BA%AF\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">力扣题解-递归与回溯</a> 这个 Github 仓库分类下查看其它的经典相似题目，先尝试自己用我的两篇递归回溯文章中的思路求解，如果还是答不出来的话，就去看题解总结归纳，直到你能真正的自己做出类似的题型为止。</p>\n<h2 id=\"总结\"><a href=\"#%E6%80%BB%E7%BB%93\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>总结</h2>\n<p>至此为止，年轻前端的第一道 hard 题就解出来了，是不是有种任督二脉打通的感觉呢？</p>\n<p>递归回溯的问题本质上就是，递归进入下一层后，如果发现不满足条件，就通过 return 等方式回溯到上一层递归，继续寻求合适的解。</p>\n<p>掌握了这个思路以后，相信你在现实编码中遇到的很多递归难题都可以轻松的降维打击，迎刃而解了。</p>\n<p>也祝正在筹备换工作的小伙伴们顺利通过面试笔试的厮杀，拿到理想的 offer，大家加油。</p>\n<h2 id=\"️-感谢大家\"><a href=\"#%EF%B8%8F-%E6%84%9F%E8%B0%A2%E5%A4%A7%E5%AE%B6\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>❤️ 感谢大家</h2>\n<p>1.如果本文对你有帮助，就点个赞支持下吧，你的「赞」是我创作的动力。</p>\n<p>2.关注公众号「前端从进阶到入院」即可加我好友，我拉你进「前端进阶交流群」，大家一起共同交流和进步。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/4/5/17149cbcaa96ff26?w=910&#x26;h=436&#x26;f=jpeg&#x26;s=78195\"></p>","timeToRead":8,"frontmatter":{"title":"前端「N皇后」递归回溯经典问题图解","date":"June 18, 2020","spoiler":""},"fields":{"slug":"/640898677/","langKey":"en"}}},"pageContext":{"slug":"/640898677/","previous":{"fields":{"slug":"/638504573/","langKey":"en","directoryName":"638504573"},"frontmatter":{"title":"前端电商 sku 全排列的递归回溯算法实战"}},"next":{"fields":{"slug":"/646656891/","langKey":"en","directoryName":"646656891"},"frontmatter":{"title":"中级前端面试指南"}},"translations":[],"translatedLinks":[]}},"staticQueryHashes":["336482444"]}