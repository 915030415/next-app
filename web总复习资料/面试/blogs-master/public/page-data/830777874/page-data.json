{"componentChunkName":"component---src-templates-blog-post-js","path":"/830777874/","result":{"data":{"site":{"siteMetadata":{"title":"ssh的博客","author":"ssh"}},"markdownRemark":{"id":"ba2b0b36-dc02-5bb0-acd0-a6739317cf1f","html":"<p>React 官网介绍了 Hook 的这样一个限制：</p>\n<blockquote>\n<p><strong>不要在循环，条件或嵌套函数中调用 Hook</strong>， 确保总是在你的 React 函数的最顶层以及任何 return 之前调用他们。遵守这条规则，你就能确保 Hook 在每一次渲染中都按照同样的顺序被调用。这让 React 能够在多次的 <code class=\"language-text\">useState</code> 和 <code class=\"language-text\">useEffect</code> 调用之间保持 hook 状态的正确。(如果你对此感到好奇，我们在下面会有更深入的解释。)</p>\n</blockquote>\n<p>这个限制在开发中也确实会时常影响到我们的开发体验，比如函数组件中出现 if 语句提前 return 了，后面又出现 Hook 调用的话，React 官方推的 eslint 规则也会给出警告。</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xxx<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// ❌ React Hook \"useState\" is called conditionally. </span>\n  <span class=\"token comment\">// React Hooks must be called in the exact same order in every component render.</span>\n  <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">return</span> <span class=\"token string\">'Hello'</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>其实是个挺常见的用法，很多时候满足某个条件了我们就不希望组件继续渲染下去。但由于这个限制的存在，我们只能把所有 Hook 调用提升到函数的顶部，增加额外开销。</p>\n<p>由于 React 的源码太复杂，接下来本文会以原理类似但精简很多的 <a href=\"https://github.com/preactjs/preact\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Preact</a> 的源码为切入点来调试、讲解。</p>\n<h2 id=\"限制的原因\"><a href=\"#%E9%99%90%E5%88%B6%E7%9A%84%E5%8E%9F%E5%9B%A0\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>限制的原因</h2>\n<p>这个限制并不是 React 团队凭空造出来的，的确是由于 React Hook 的实现设计而不得已为之。</p>\n<p>以 Preact 的 Hook 的实现为例，它用<strong>数组和下标</strong>来实现 Hook 的查找（React 使用链表，但是原理类似）。</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// 当前正在运行的组件</span>\n<span class=\"token keyword\">let</span> currentComponent\n\n<span class=\"token comment\">// 当前 hook 的全局索引</span>\n<span class=\"token keyword\">let</span> currentIndex\n\n<span class=\"token comment\">// 第一次调用 currentIndex 为 0</span>\n<span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'first'</span><span class=\"token punctuation\">)</span> \n\n<span class=\"token comment\">// 第二次调用 currentIndex 为 1</span>\n<span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'second'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>可以看出，每次 Hook 的调用都对应一个全局的 index 索引，通过这个索引去当前运行组件 <code class=\"language-text\">currentComponent</code> 上的 <code class=\"language-text\">_hooks</code> 数组中查找保存的值，也就是 Hook 返回的 <code class=\"language-text\">[state, useState]</code></p>\n<p>那么假如条件调用的话，比如第一个 <code class=\"language-text\">useState</code> 只有 0.5 的概率被调用：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 当前正在运行的组件</span>\n<span class=\"token keyword\">let</span> currentComponent\n\n<span class=\"token comment\">// 当前 hook 的全局索引</span>\n<span class=\"token keyword\">let</span> currentIndex\n\n<span class=\"token comment\">// 第一次调用 currentIndex 为 0</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'first'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 第二次调用 currentIndex 为 1</span>\n<span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'second'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>在 Preact 第一次渲染组件的时候，假设 <code class=\"language-text\">Math.random()</code> 返回的随机值是 <code class=\"language-text\">0.6</code>，那么第一个 Hook 会被执行，此时组件上保存的 <code class=\"language-text\">_hooks</code> 状态是：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">_hooks<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">:</span> <span class=\"token string\">'first'</span><span class=\"token punctuation\">,</span> update<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">:</span> <span class=\"token string\">'second'</span><span class=\"token punctuation\">,</span> update<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>用图来表示这个查找过程是这样的：</p>\n<p><img src=\"https://images.gitee.com/uploads/images/2021/0312/205942_86865f67_1087321.png\" alt=\"第一次渲染\" title=\"屏幕截图.png\"></p>\n<p>假设第二次渲染的时候，<code class=\"language-text\">Math.random()</code> 返回的随机值是 <code class=\"language-text\">0.3</code>，此时只有第二个 useState 被执行了，那么它对应的全局 <code class=\"language-text\">currentIndex</code> 会是 0，这时候去 <code class=\"language-text\">_hooks[0]</code> 中拿到的却是 <code class=\"language-text\">first</code> 所对应的状态，这就会造成渲染混乱。</p>\n<p><img src=\"https://images.gitee.com/uploads/images/2021/0312/210043_bd1e68e8_1087321.png\" alt=\"第二次渲染\" title=\"屏幕截图.png\"></p>\n<p>没错，本应该值为 <code class=\"language-text\">second</code> 的 value，莫名其妙的被指向了 <code class=\"language-text\">first</code>，渲染完全错误！</p>\n<p>以这个例子来看：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">10000</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">,</span> setValue<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">+</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>结果是这样：</p>\n<p><img src=\"https://images.gitee.com/uploads/images/2021/0312/122331_329604b3_1087321.gif\" alt=\"chaos\" title=\"chaos.gif\"></p>\n<h2 id=\"破解限制\"><a href=\"#%E7%A0%B4%E8%A7%A3%E9%99%90%E5%88%B6\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>破解限制</h2>\n<p>有没有办法破解限制呢？</p>\n<p>如果要破解全局索引递增导致的 bug，那么我们可以考虑换种方式存储 Hook 状态。</p>\n<p>如果不用下标存储，是否可以考虑用一个<strong>全局唯一的 key</strong> 来保存 Hook，这样不是就可以绕过下标导致的混乱了吗？</p>\n<p>比如 <code class=\"language-text\">useState</code> 这个 API 改造成这样：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">10000</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'key1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">,</span> setValue<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"key2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">+</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这样，通过 <code class=\"language-text\">_hooks[&#39;key&#39;]</code> 来查找，就无所谓前序的 Hook 出现的任何意外情况了。</p>\n<p>也就是说，原本的存储方式是：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">_hooks<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">:</span> <span class=\"token string\">'first'</span><span class=\"token punctuation\">,</span> update<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">:</span> <span class=\"token string\">'second'</span><span class=\"token punctuation\">,</span> update<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>改造后：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">_hooks<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n  key1<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">:</span> <span class=\"token string\">'first'</span><span class=\"token punctuation\">,</span> update<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  key2<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">:</span> <span class=\"token string\">'second'</span><span class=\"token punctuation\">,</span> update<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>注意，数组本身就支持对象的 key 值特性，不需要改造 <code class=\"language-text\">_hooks</code> 的结构。</p>\n<h2 id=\"改造源码\"><a href=\"#%E6%94%B9%E9%80%A0%E6%BA%90%E7%A0%81\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>改造源码</h2>\n<p>来试着改造一下 Preact 源码，它的 Hook 包的位置在 <a href=\"https://github.com/preactjs/preact/blob/master/hooks/src/index.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">hooks/src/index.js</a> 下，找到 <code class=\"language-text\">useState</code> 方法：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>initialState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  currentHook <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span>invokeOrReturn<span class=\"token punctuation\">,</span> initialState<span class=\"token punctuation\">,</span> undefined<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>它的底层调用了 <code class=\"language-text\">useReducer</code>，所以新增加一个 <code class=\"language-text\">key</code> 参数透传下去：</p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\"><span class=\"token inserted\">+ export function useState(initialState, key) {</span>\n  currentHook = 1;\n<span class=\"token inserted\">+ return useReducer(invokeOrReturn, initialState, undefined, key);</span>\n}</code></pre></div>\n<p><code class=\"language-text\">useReducer</code> 原本是通过全局索引去获取 Hook state：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 全局索引</span>\n<span class=\"token keyword\">let</span> currentIndex\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">,</span> initialState<span class=\"token punctuation\">,</span> init<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> hookState <span class=\"token operator\">=</span> <span class=\"token function\">getHookState</span><span class=\"token punctuation\">(</span>currentIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  hookState<span class=\"token punctuation\">.</span>_reducer <span class=\"token operator\">=</span> reducer<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> hookState<span class=\"token punctuation\">.</span>_value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>改造成兼容版本，有 key 的时候优先传入 key 值：</p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\">// 全局索引\nlet currentIndex\n\n<span class=\"token inserted\">+ export function useReducer(reducer, initialState, init, key) {</span>\n<span class=\"token inserted\">+  const hookState = getHookState(key || currentIndex++, 2);</span>\n   hookState._reducer = reducer;\n\n   return hookState._value;\n}</code></pre></div>\n<p>最后改造一下 <code class=\"language-text\">getHookState</code> 方法：</p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\">function getHookState(index, type) {\n  const hooks =\n    currentComponent.__hooks ||\n    (currentComponent.__hooks = {\n      _list: [],\n      _pendingEffects: [],\n    });\n\n// 传入 key 值是 string 或 symbol 都可以\n<span class=\"token inserted\">+  if (typeof index !== 'number') {</span>\n<span class=\"token inserted\">+    if (!hooks._list[index]) {</span>\n<span class=\"token inserted\">+      hooks._list[index] = {};</span>\n<span class=\"token inserted\">+    }</span>\n<span class=\"token inserted\">+  } else {</span>\n    if (index >= hooks._list.length) {\n      hooks._list.push({});\n    }\n  }\n  // 这里天然支持 key 值取用的方式\n  return hooks._list[index];\n}</code></pre></div>\n<p>这里设计成传入 <code class=\"language-text\">key</code> 值的时候，初始化就不往数组里 <code class=\"language-text\">push</code> 新状态，而是直接通过下标写入即可，原本的取状态的写法 <code class=\"language-text\">hooks._list[index]</code> 本身就支持通过 <code class=\"language-text\">key</code> 从数组上取值，不用改动。</p>\n<p>至此，改造就完成了。</p>\n<p>来试试新用法：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">10000</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'key1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">,</span> setValue<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'key2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">+</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><img src=\"https://images.gitee.com/uploads/images/2021/0312/124253_cb5b5892_1087321.gif\" alt=\"ok\" title=\"ok.gif\"></p>\n<h2 id=\"自动编译\"><a href=\"#%E8%87%AA%E5%8A%A8%E7%BC%96%E8%AF%91\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>自动编译</h2>\n<p>事实上 React 团队也考虑过给每次调用加一个 <code class=\"language-text\">key</code> 值的设计，在 Dan Abramov 的 <a href=\"https://overreacted.io/zh-hans/why-do-hooks-rely-on-call-order/#%E7%BC%BA%E9%99%B7-2-%E5%91%BD%E5%90%8D%E5%86%B2%E7%AA%81\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">为什么顺序调用对 React Hooks 很重要？</a> 中已经详细解释过这个提案。</p>\n<p>多重的缺陷导致这个提案被否决了，尤其是在遇到自定义 Hook 的时候，比如你提取了一个 <code class=\"language-text\">useFormInput</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> valueKey <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token keyword\">function</span> <span class=\"token function\">useFormInput</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">,</span> setValue<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>valueKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    value<span class=\"token punctuation\">,</span>\n    <span class=\"token function\">onChange</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>然后在组件中多次调用它：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Form</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 使用 Symbol</span>\n  <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token function\">useFormInput</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n  <span class=\"token comment\">// 又一次使用了同一个 Symbol</span>\n  <span class=\"token keyword\">const</span> surname <span class=\"token operator\">=</span> <span class=\"token function\">useFormInput</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n  <span class=\"token comment\">// ...</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">...</span><span class=\"token attr-value\">name</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">...</span><span class=\"token attr-value\">surname</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span><span class=\"token comment\">/* ... */</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>    \n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>此时这个通过 <code class=\"language-text\">key</code> 寻找 Hook state 的方式就会发生冲突。</p>\n<p>但我的想法是，能不能借助 <strong>babel 插件的编译能力</strong>，实现编译期自动为每一次 <strong>Hook 调用</strong>都注入一个 <code class=\"language-text\">key</code>，\n伪代码如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isReactHookInvoking</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">addFunctionParameter</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> <span class=\"token function\">getUniqKey</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>生成这样的代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\">function Form() {\n<span class=\"token inserted\">+  const name = useFormInput('key_1'); </span>\n<span class=\"token inserted\">+  const surname = useFormInput('key_2'); </span>\n  // ...\n  return (\n    &lt;>\n      &lt;input {...name} />\n      &lt;input {...surname} />\n      {/* ... */}\n    &lt;/>    \n  )\n}\n\n<span class=\"token inserted\">+ function useFormInput(key) {</span>\n<span class=\"token inserted\">+  const [value, setValue] = useState(key);</span>\n  return {\n    value,\n    onChange(e) {\n      setValue(e.target.value);\n    },\n  };\n}</code></pre></div>\n<p>key 的生成策略可以是随机值，也可以是注入一个 Symbol，这个无所谓，保证运行时期不会改变即可。也许有一些我没有考虑周到的地方，对此有任何想法的同学都欢迎加我微信 <a href=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/017d568dc1d14cd883cc3238350a39ec~tplv-k3u1fbpfcp-watermark.image\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">sshsunlight</a> 讨论，当然单纯的交个朋友也没问题，大佬或者萌新都欢迎。</p>\n<h2 id=\"总结\"><a href=\"#%E6%80%BB%E7%BB%93\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>总结</h2>\n<p>本文只是一篇<strong>探索性质</strong>的文章：</p>\n<ul>\n<li>介绍 Hook 实现的大概原理以及限制</li>\n<li>探索出修改源码机制绕过限制的方法</li>\n</ul>\n<p>其实本意是<strong>帮助大家更好的理解 Hook</strong>。</p>\n<p>我并不希望 React 取消掉这些限制，我觉得这也是设计的取舍。</p>\n<p>如果任何子函数，任何条件表达式中都可以调用 Hook，代码也会变得更加<strong>难以理解和维护</strong>。</p>\n<p>如果你真的希望更加灵活的使用类似的 Hook 能力，Vue3 底层<strong>响应式收集依赖</strong>的原理就可以完美的绕过这些限制，但更加灵活的同时也一定会无法避免的增加更多维护风险。</p>\n<h2 id=\"感谢大家\"><a href=\"#%E6%84%9F%E8%B0%A2%E5%A4%A7%E5%AE%B6\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>感谢大家</h2>\n<p>欢迎关注 ssh，前端潮流趋势、原创面试热点文章应有尽有。</p>\n<p>记得关注后加我好友，我会不定期分享前端知识，行业信息。2021 陪你一起度过。</p>\n<p><img src=\"https://user-images.githubusercontent.com/23615778/108619258-76929d80-745e-11eb-90bf-023abec85d80.png\" alt=\"image\"></p>","timeToRead":8,"frontmatter":{"title":"打破 React Hook 必须按顺序、不能在条件语句中调用的枷锁","date":"March 13, 2021","spoiler":""},"fields":{"slug":"/830777874/","langKey":"en"}}},"pageContext":{"slug":"/830777874/","previous":{"fields":{"slug":"/819971559/","langKey":"en","directoryName":"819971559"},"frontmatter":{"title":"如何编写神奇的「插件机制」，优化基于 Antd Table 封装表格的混乱代码"}},"next":{"fields":{"slug":"/862643192/","langKey":"en","directoryName":"862643192"},"frontmatter":{"title":"VueConf 2021 抢先看，Evan You 和你聊聊 Vue 的未来"}},"translations":[],"translatedLinks":[]}},"staticQueryHashes":["336482444"]}