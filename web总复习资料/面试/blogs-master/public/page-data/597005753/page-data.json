{"componentChunkName":"component---src-templates-blog-post-js","path":"/597005753/","result":{"data":{"site":{"siteMetadata":{"title":"ssh的博客","author":"ssh"}},"markdownRemark":{"id":"d5fdce37-1f3c-5e56-a665-39afcdd625c6","html":"<p>本着对社区的小伙伴们负责的态度，有些文章里应付面试用的一些讲解实在是看不下去。</p>\n<p>本文针对 @小明同学哟 的 《前端常见的Vue面试题目汇总》 这篇文章，提出一些错误。</p>\n<p>先放一张大图，有兴趣的同学可以点开图片看一下原文，简单来说就是写了很多不知道从哪里收集来的劣质总结，然后底下放个公众号骗粉丝。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/4/8/1715a77d658eb69c?w=1280&#x26;h=16383&#x26;f=png&#x26;s=2015085\"></p>\n<p>且不说原文中每个答案都过于简略，并不能达到面试官的要求，其中还有很多错误的地方会误导读者，接下来我重点指出一下错误的地方。</p>\n<p>这里不放原文链接的原因是我希望抵制这样的作者，这个作者的掘力值快要 5000 了，而掘金会对掘力值 5000 以上的作者进行文章首页推荐。如果以后首页都是这样的低质量文章，那真的很让人绝望。</p>\n<p>另外比较可笑的是，昨天在这篇文章下提出了一些反驳的观点，今早一看这篇文章的评论区，已经被作者删的一干二净，只留下她的「水军号」的一条评论了。不禁唏嘘，直接删掉文章的反对观点来掩耳盗铃。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/4/9/1715c77d1cc11ca8?w=1998&#x26;h=412&#x26;f=png&#x26;s=79888\"></p>\n<h2 id=\"准备开始\"><a href=\"#%E5%87%86%E5%A4%87%E5%BC%80%E5%A7%8B\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>准备开始</h2>\n<p>接下来开始针对作者文章中的观点进行逐条的反驳，注意「<strong>引用</strong>」 中的文字的即是作者原文，错别字我也原样保留了。</p>\n<h2 id=\"请说一下响应式数据的原理\"><a href=\"#%E8%AF%B7%E8%AF%B4%E4%B8%80%E4%B8%8B%E5%93%8D%E5%BA%94%E5%BC%8F%E6%95%B0%E6%8D%AE%E7%9A%84%E5%8E%9F%E7%90%86\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>请说一下响应式数据的原理</h2>\n<blockquote>\n<p>默认Vue在初始化数据时，会给data中的属性使用Object.defineProperty重新定义所有属性，当页面到对应属性时，会进行依赖收集(收集当前组件中的watcher)如果属性发生变化会通知相关依赖进行更新操作</p>\n</blockquote>\n<p>收集当前组件中的watcher，我进一步问你什么叫当前组件的 <code class=\"language-text\">watcher</code>？我面试时经常听到这种模糊的说法，感觉就是看了些造玩具的文章就说熟悉响应式原理了，起码的流程要清晰一些：</p>\n<ol>\n<li>由于 Vue 执行一个组件的 <code class=\"language-text\">render</code> 函数是由 <code class=\"language-text\">Watcher</code> 去代理执行的，<code class=\"language-text\">Watcher</code> 在执行前会把 <code class=\"language-text\">Watcher</code> 自身先赋值给 <code class=\"language-text\">Dep.target</code> 这个全局变量，等待响应式属性去收集它</li>\n<li>这样在哪个组件执行 <code class=\"language-text\">render</code> 函数时访问了响应式属性，响应式属性就会精确的收集到当前全局存在的 <code class=\"language-text\">Dep.target</code> 作为自身的依赖</li>\n<li>在响应式属性发生更新时通知 <code class=\"language-text\">Watcher</code> 去重新调用 <code class=\"language-text\">vm._update(vm._render())</code> 进行组件的视图更新</li>\n</ol>\n<p>响应式部分，如果你想在简历上写熟悉的话，还是要抽时间好好的去看一下源码中真正的实现，而不是看这种模棱两可的说法就觉得自己熟练掌握了。</p>\n<h2 id=\"为什么vue采用异步渲染\"><a href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88vue%E9%87%87%E7%94%A8%E5%BC%82%E6%AD%A5%E6%B8%B2%E6%9F%93\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>为什么Vue采用异步渲染</h2>\n<blockquote>\n<p>因为如果不采用异步更新，那么每次更新数据都会对当前租金按进行重新渲染，所以为了性能考虑，Vue会在本轮数据更新后，再去异步更新数据</p>\n</blockquote>\n<p>什么叫本轮数据更新后，再去异步更新数据？</p>\n<p>轮指的是什么，在 <code class=\"language-text\">eventLoop</code> 里的 <code class=\"language-text\">task</code> 和 <code class=\"language-text\">microTask</code>，他们分别的执行时机是什么样的，为什么优先选用 <code class=\"language-text\">microTask</code>，这都是值得深思的好问题。</p>\n<p>建议看看这篇文章： <a href=\"https://segmentfault.com/a/1190000008589736\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Vue源码详解之nextTick：MutationObserver只是浮云，microtask才是核心！</a></p>\n<h2 id=\"nexttick实现原理\"><a href=\"#nexttick%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>nextTick实现原理</h2>\n<blockquote>\n<p>nextTick方法主要是使用了宏任务和微任务，定义一个异步方法，多次调用nextTick会将方法存在队列中，通过这个异步方法清空当前队列。所以这个nextTick方法就是异步方法</p>\n</blockquote>\n<p>这句话说的很乱，典型的让面试官忍不住想要深挖一探究竟的回答。（因为一听你就不是真的懂）</p>\n<p>正确的流程应该是先去 <code class=\"language-text\">嗅探环境</code>，依次去检测 </p>\n<p><code class=\"language-text\">Promise的then</code> -> <code class=\"language-text\">MutationObserver的回调函数</code> -> <code class=\"language-text\">setImmediate</code> -> <code class=\"language-text\">setTimeout</code> 是否存在，找到存在的就使用它，以此来确定回调函数队列是以哪个 api 来异步执行。</p>\n<p>在 <code class=\"language-text\">nextTick</code> 函数接受到一个 <code class=\"language-text\">callback</code> 函数的时候，先不去调用它，而是把它 push 到一个全局的 <code class=\"language-text\">queue</code> 队列中，等待下一个任务队列的时候再一次性的把这个 <code class=\"language-text\">queue</code> 里的函数依次执行。</p>\n<p>这个队列可能是 <code class=\"language-text\">microTask</code> 队列，也可能是 <code class=\"language-text\">macroTask</code> 队列，前两个 api 属于微任务队列，后两个 api 属于宏任务队列。</p>\n<p>简化实现一个异步合并任务队列：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> pending <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n<span class=\"token comment\">// 存放需要异步调用的任务</span>\n<span class=\"token keyword\">const</span> callbacks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">flushCallbacks</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  pending <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n  <span class=\"token comment\">// 循环执行队列</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> callbacks<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    callbacks<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// 清空</span>\n  callbacks<span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">nextTick</span><span class=\"token punctuation\">(</span>cb<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    callbacks<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>cb<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pending<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      pending <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n      <span class=\"token comment\">// 利用Promise的then方法 在下一个微任务队列中把函数全部执行 </span>\n      <span class=\"token comment\">// 在微任务开始之前 依然可以往callbacks里放入新的回调函数</span>\n      Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>flushCallbacks<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>测试一下：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 第一次调用 then方法已经被调用了 但是 flushCallbacks 还没执行</span>\n<span class=\"token function\">nextTick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// callbacks里push这个函数</span>\n<span class=\"token function\">nextTick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// callbacks里push这个函数</span>\n<span class=\"token function\">nextTick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 同步函数优先执行</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 此时调用栈清空了，浏览器开始检查微任务队列，发现了 flushCallbacks 方法，执行。</span>\n<span class=\"token comment\">// 此时 callbacks 里的 3 个函数被依次执行。</span>\n\n<span class=\"token comment\">// 4</span>\n<span class=\"token comment\">// 1</span>\n<span class=\"token comment\">// 2</span>\n<span class=\"token comment\">// 3</span></code></pre></div>\n<h2 id=\"vue优点\"><a href=\"#vue%E4%BC%98%E7%82%B9\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Vue优点</h2>\n<blockquote>\n<p>虚拟DOM把最终的DOM操作计算出来并优化，由于这个DOM操作属于预处理操作，并没有真实的操作DOM，所以叫做虚拟DOM。最后在计算完毕才真正将DOM操作提交，将DOM操作变化反映到DOM树上</p>\n</blockquote>\n<p>看起来说的很厉害，其实也没说到点上。关于虚拟 DOM 的优缺点，直接看 Vue 作者尤雨溪本人的知乎回答，你会对它有进一步的理解：</p>\n<p><a href=\"https://www.zhihu.com/question/31809713/answer/53544875\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">网上都说操作真实 DOM 慢，但测试结果却比 React 更快，为什么？</a></p>\n<blockquote>\n<p>双向数据绑定通过MVVM思想实现数据的双向绑定，让开发者不用再操作dom对象，有更多的时间去思考业务逻辑</p>\n</blockquote>\n<p>开发者不操作dom对象，和双向绑定没太大关系。React不提供双向绑定，开发者照样不需要操作dom。双向绑定只是一种语法糖，在表单元素上绑定 <code class=\"language-text\">value</code> 并且监听 <code class=\"language-text\">onChange</code> 事件去修改 <code class=\"language-text\">value</code> 触发响应式更新。</p>\n<p>我建议真正想看模板被编译后的原理的同学，可以去尤大开源的<a href=\"https://template-explorer.vuejs.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">vue-template-explorer</a> 网站输入对应的模板，就会展示出对应的 render 函数。</p>\n<blockquote>\n<p>运行速度更快，像比较与react而言,同样都是操作虚拟dom,就性能而言,vue存在很大的优势</p>\n</blockquote>\n<p>为什么快，快在哪里，什么情况下快，有数据支持吗？事实上在初始化数据量不同的场景是不好比较的，<code class=\"language-text\">React</code> 不需要对数据递归的进行 <code class=\"language-text\">响应式定义</code>。</p>\n<p>而在更新的场景下 <code class=\"language-text\">Vue</code> 可能更快一些，因为 <code class=\"language-text\">Vue</code> 的更新粒度是组件级别的，而 <code class=\"language-text\">React</code> 是递归向下的进行 <code class=\"language-text\">reconciler</code>，<code class=\"language-text\">React</code> 引入了 <code class=\"language-text\">Fiber</code> 架构和异步更新，目的也是为了让这个工作可以分在不同的 <code class=\"language-text\">时间片</code> 中进行，不要去阻塞用户高优先级的操作。</p>\n<blockquote>\n<p>Proxy是es6提供的新特性，兼容性不好，所以导致Vue3一致没有正式发布让开发者使用</p>\n</blockquote>\n<p>Vue3 没发布不是因为兼容性不好，工作正在有序推进中，新的语法也在不断迭代，并且发布 <code class=\"language-text\">rfc</code> 征求社区意见。</p>\n<blockquote>\n<p>Object.defineProperty的缺点：无法监控到数组下标的变化，导致直接通过数组的下标给数组设置值，不能实时响应</p>\n</blockquote>\n<p>事实上可以，并且<a href=\"https://segmentfault.com/a/1190000015783546\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">尤大说只是为了性能的权衡才不去监听</a>。数组下标本质上也就是对象的一个属性。</p>\n<h2 id=\"react和vue的比较\"><a href=\"#react%E5%92%8Cvue%E7%9A%84%E6%AF%94%E8%BE%83\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React和Vue的比较</h2>\n<blockquote>\n<p>React默认是通过比较引用的方式(diff)进行的，React不精确监听数据变化。</p>\n</blockquote>\n<p>比较引用和 <code class=\"language-text\">diff</code> 有什么关系，难道 Vue 就不 <code class=\"language-text\">diff</code> 了吗。</p>\n<blockquote>\n<p>Vue2.0可以通过props实现双向绑定，用vuex单向数据流的状态管理框架</p>\n</blockquote>\n<p>双向绑定是 <code class=\"language-text\">v-model</code> 吧。</p>\n<blockquote>\n<p>Vue 父组件通过props向子组件传递数据或回调</p>\n</blockquote>\n<p>Vue 虽然可以传递回调，但是一般来说还是通过 <code class=\"language-text\">v-on:change</code> 或者 <code class=\"language-text\">@change</code> 的方式去绑定事件吧，这和回调是两套机制。</p>\n<blockquote>\n<p>模板渲染方式不同，Vue通过HTML进行渲染</p>\n</blockquote>\n<p>事实上 Vue 是自己实现了一套模板引擎系统，<code class=\"language-text\">HTML</code> 可以被利用为模板的而已，你在 <code class=\"language-text\">.vue</code> 文件里写的 <code class=\"language-text\">template</code> 和 <code class=\"language-text\">HTML</code> 本质上没有关系。</p>\n<blockquote>\n<p>React组合不同功能方式是通过HoC(高阶组件)，本质是高阶函数</p>\n</blockquote>\n<p>事实上高阶函数只是社区提出的一种方案被 React 所采纳而已，其他的方案还有 <code class=\"language-text\">renderProps</code> 和 最近流行的<code class=\"language-text\">Hook</code></p>\n<p><a href=\"https://juejin.im/post/5e8b5fa6f265da47ff7cc139\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Vue 也可以利用高阶函数</a> 实现组合和复用。</p>\n<h2 id=\"diff算法的时间复杂度\"><a href=\"#diff%E7%AE%97%E6%B3%95%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>diff算法的时间复杂度</h2>\n<blockquote>\n<p>两个数的完全的diff算法是一个时间复杂度为o(n3)，\nVue进行了优化O(n3)复杂度的问题转换成O(n)复杂度的问题(只比较同级不考虑跨级问题)在前端当中，你很少会跨级层级地移动Dom元素，所以Virtual Dom只会对同一个层级地元素进行对比</p>\n</blockquote>\n<p>听这个描述来说，React 没有对 <code class=\"language-text\">O(n3)</code> 的复杂度进行优化？事实上 React 和 Vue 都只会对 <code class=\"language-text\">tag</code> 相同的同级节点进行 <code class=\"language-text\">diff</code>，如果不同则直接销毁重建，都是 <code class=\"language-text\">O(n)</code> 的复杂度。</p>\n<h2 id=\"谈谈你对作用域插槽的理解\"><a href=\"#%E8%B0%88%E8%B0%88%E4%BD%A0%E5%AF%B9%E4%BD%9C%E7%94%A8%E5%9F%9F%E6%8F%92%E6%A7%BD%E7%9A%84%E7%90%86%E8%A7%A3\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>谈谈你对作用域插槽的理解</h2>\n<blockquote>\n<p>单个插槽当子组件模板只有一个没有属性的插槽时， 父组件传入的整个内容片段将插入到插槽所在的 DOM 位置， 并替换掉插槽标签本身。</p>\n</blockquote>\n<p>跟 DOM 没关系，是在虚拟节点树的插槽位置替换。</p>\n<blockquote>\n<p>如果不加key,那么vue会选择复用节点(Vue的就地更新策略),导致之前节点的状态被保留下来，会产生一系列的bug</p>\n</blockquote>\n<p>不加 key 也不一定就会复用，关于 diff 和 key 的使用，建议大家还是找一些非造玩具的文章真正深入的看一下原理。</p>\n<p><a href=\"https://juejin.im/post/5e8694b75188257372503722\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">为什么 Vue 中不要用 index 作为 key？（diff 算法详解）</a></p>\n<h2 id=\"组件中的data为什么是函数\"><a href=\"#%E7%BB%84%E4%BB%B6%E4%B8%AD%E7%9A%84data%E4%B8%BA%E4%BB%80%E4%B9%88%E6%98%AF%E5%87%BD%E6%95%B0\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>组件中的data为什么是函数</h2>\n<blockquote>\n<p>因为组件是用来复用的，JS里对象是引用关系，这样作用域没有隔离，而new Vue的实例，是不会被复用的，因此不存在引用对象问题</p>\n</blockquote>\n<p>这句话反正我压根没听懂，事实上如果组件里 data 直接写了一个对象的话，那么如果你在模板中多次声明这个组件，组件中的 data 会指向同一个引用。</p>\n<p>此时如果在某个组件中对 data 进行修改，会导致其他组件里的 data 也被污染。 而如果使用函数的话，每个组件里的 data 会有单独的引用，这个问题就可以避免了。</p>\n<p>这个问题我同样举个例子来方便理解，假设我们有这样的一个组件，其中的 data 直接使用了对象而不是函数：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> Counter <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    template<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`&lt;span @click=\"count++\">&lt;/span>`</span></span>\n    data<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        count<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>注意，这里的 <code class=\"language-text\">Counter.data</code> 是一个引用，也就是它是在当前的运行环境下<code class=\"language-text\">全局唯一</code>的，它在堆内存中占用了一部分空间。</p>\n<p>然后我们在模板中调用两次 <code class=\"language-text\">Counter</code> 组件：</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Counter</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>a<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Counter</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>b<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>我们从原理出发，先看看它被<a href=\"https://template-explorer.vuejs.org/#%3Cdiv%3E%0A%20%3CCounter%20%2F%3E%0A%20%3CCounter%20%2F%3E%0A%3C%2Fdiv%3E\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">编译成什么样</a>的 <code class=\"language-text\">render</code> 函数：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">with</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">_c</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token function\">_c</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Counter'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">_c</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Counter'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>每一个 <code class=\"language-text\">Counter</code> 会被 <code class=\"language-text\">_c</code> 所调用，也就是 <code class=\"language-text\">createElement</code>，想象一下 <code class=\"language-text\">createElement</code> 内部会发生什么，它会直接拿着 <code class=\"language-text\">Counter</code> 上的 <code class=\"language-text\">data</code> 这个引用去创建一个组件。 也就是所有的 <code class=\"language-text\">Counter</code> 组件实例上的 <code class=\"language-text\">data</code> 都指向同一个引用。</p>\n<p>此时假如 id 为 a 的 Counter 组件内部调用了 <code class=\"language-text\">count++</code>，会去对 <code class=\"language-text\">data</code> 这个引用上的 count 属性赋值，那么此时由于 id 为 b 的 Counter 组件内部也是引用的同一份 data，它也会感觉到变化而更新组件，这就造成了多个组件之间的数据混乱了。</p>\n<h2 id=\"computed和watch有什么区别\"><a href=\"#computed%E5%92%8Cwatch%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>computed和watch有什么区别</h2>\n<blockquote>\n<p>计算属性是基于他们的响应式依赖进行缓存的，只有在依赖发生变化时，才会计算求值，而使用 methods，每次都会执行相应的方法</p>\n</blockquote>\n<p>这也是一个一问就倒的回答，依赖变化是计算属性就重新求值吗？中间经历了什么过程，为什么说 <code class=\"language-text\">computed</code> 是有缓存值的？随便挑一个点深入问下去就站不住。 事实上 <code class=\"language-text\">computed</code> 会拥有自己的 <code class=\"language-text\">watcher</code>，它内部有个属性 <code class=\"language-text\">dirty</code> 开关来决定 <code class=\"language-text\">computed</code> 的值是需要重新计算还是直接复用之前的值。</p>\n<p>以这样的一个例子来说：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">computed<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>首先明确两个关键字：</p>\n<p>「dirty」 从字面意义来讲就是 <code class=\"language-text\">脏</code> 的意思，这个开关开启了，就意味着这个数据是脏数据，需要重新求值了拿到最新值。</p>\n<p>「求值」 的意思的对用户传入的函数进行执行，也就是执行 <code class=\"language-text\">return this.count + 1</code></p>\n<ol>\n<li>在 <code class=\"language-text\">sum</code> 第一次进行求值的时候会读取响应式属性 <code class=\"language-text\">count</code>，收集到这个响应式数据作为依赖。并且计算出一个值来保存在自身的 <code class=\"language-text\">value</code> 上，把 <code class=\"language-text\">dirty</code> 设为 false，接下来在模板里再访问 <code class=\"language-text\">sum</code> 就直接返回这个求好的值 <code class=\"language-text\">value</code>，并不进行重新的求值。</li>\n<li>而 <code class=\"language-text\">count</code> 发生变化了以后会通知 <code class=\"language-text\">sum</code> 所对应的 <code class=\"language-text\">watcher</code> 把自身的 <code class=\"language-text\">dirty</code> 属性设置成 true，这也就相当于把重新求值的开关打开来了。这个很好理解，只有 <code class=\"language-text\">count</code> 变化了， <code class=\"language-text\">sum</code> 才需要重新去求值。</li>\n<li>那么下次模板中再访问到 <code class=\"language-text\">this.sum</code> 的时候，才会真正的去重新调用 <code class=\"language-text\">sum</code> 函数求值，并且再次把 <code class=\"language-text\">dirty</code> 设置为 false，等待下次的开启……</li>\n</ol>\n<p>后续我会考虑单独出一篇文章进行详细讲解。</p>\n<h2 id=\"watch中的deeptrue是如何实现的\"><a href=\"#watch%E4%B8%AD%E7%9A%84deeptrue%E6%98%AF%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E7%9A%84\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Watch中的deep:true是如何实现的</h2>\n<blockquote>\n<p>当用户指定了watch中的deep属性为true时，如果当前监控的值是数组类型，会对对象中的每一项进行求值，此时会将当前watcher存入到对应属性的依赖中，这样数组中的对象发生变化时也会通知数据更新。</p>\n</blockquote>\n<p>不光是数组类型，对象类型也会对深层属性进行 <code class=\"language-text\">依赖收集</code>，比如监听了 <code class=\"language-text\">obj</code>，假如设置了 <code class=\"language-text\">deep: true</code>，那么对 <code class=\"language-text\">obj.a.b.c = 5</code> 这样深层次的修改也一样会触发 watch 的回调函数。本质上是因为 Vue 内部对设置了 <code class=\"language-text\">deep</code> 的 watch，会进行<code class=\"language-text\">递归的访问</code>（只要此属性也是<code class=\"language-text\">响应式属性</code>），而在此过程中也会不断发生依赖收集。</p>\n<p>在回答这道题的时候，同样也要考虑到 <code class=\"language-text\">递归收集依赖</code> 对性能上的损耗和权衡，才是一份合格的回答。</p>\n<h2 id=\"action和mutation区别\"><a href=\"#action%E5%92%8Cmutation%E5%8C%BA%E5%88%AB\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>action和mutation区别</h2>\n<blockquote>\n<p>mutation是同步更新数据(内部会进行是否为异步方式更新数据的检测)</p>\n</blockquote>\n<p>内部并不能检测到是否异步更新，而是实例上有一个开关变量 <code class=\"language-text\">_committing</code>，</p>\n<ol>\n<li>只有在 mutation 执行之前才会把开关打开，允许修改 state 上的属性。</li>\n<li>并且在 mutation 同步执行完成后立刻关闭。</li>\n<li>\n<p>异步更新的话由于已经出了 <code class=\"language-text\">mutation</code> 的调用栈，此时的开关已经是关上的，自然能检测到对 state 的修改并报错。具体可以查看源码中的 <code class=\"language-text\">withCommit</code> 函数。这是一种很经典对于 <code class=\"language-text\">js单线程机制</code> 的利用。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Store<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">_withCommit</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">_withCommit</span> <span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">var</span> committing <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_committing<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_committing <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_committing <span class=\"token operator\">=</span> committing<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ol>\n<h2 id=\"关于重复发文章\"><a href=\"#%E5%85%B3%E4%BA%8E%E9%87%8D%E5%A4%8D%E5%8F%91%E6%96%87%E7%AB%A0\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>关于重复发文章</h2>\n<p>此外 @小明同学哟 这个作者和 @小梦哟 这两个作者之间有说不清道不明的关系（之前看好像是情侣头像，然后经常互动，并且两个人分别著有《一个湖北女生的总结》、《一个湖北男生的总结》）。</p>\n<p>两个作者之间把同一篇低质量文章来回发，都是那种评论区能指出特别多错误的水文。</p>\n<p>来波 diff 算法</p>\n<p>这是 @小明同学哟 的 《前端面试大厂手写源码系列（上）》：</p>\n<h3 id=\"《前端面试大厂手写源码系列（上）》\"><a href=\"#%E3%80%8A%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E5%A4%A7%E5%8E%82%E6%89%8B%E5%86%99%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%8A%EF%BC%89%E3%80%8B\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>《前端面试大厂手写源码系列（上）》</h3>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/4/9/1715b1d727f59320?w=1195&#x26;h=1235&#x26;f=png&#x26;s=111600\"></p>\n<p>这是 @小梦哟 的 《面试时，你被要求手写常见原理了吗？》</p>\n<h3 id=\"面试时，你被要求手写常见原理了吗？\"><a href=\"#%E9%9D%A2%E8%AF%95%E6%97%B6%EF%BC%8C%E4%BD%A0%E8%A2%AB%E8%A6%81%E6%B1%82%E6%89%8B%E5%86%99%E5%B8%B8%E8%A7%81%E5%8E%9F%E7%90%86%E4%BA%86%E5%90%97%EF%BC%9F\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>面试时，你被要求手写常见原理了吗？</h3>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/4/9/1715b1e10bf738d6?w=1492&#x26;h=1254&#x26;f=png&#x26;s=125409\"></p>\n<p>基本上就是顺序调换一下，内容完全重复的文章，阅读量还不低。</p>\n<h2 id=\"关于发课程文章不注明出处\"><a href=\"#%E5%85%B3%E4%BA%8E%E5%8F%91%E8%AF%BE%E7%A8%8B%E6%96%87%E7%AB%A0%E4%B8%8D%E6%B3%A8%E6%98%8E%E5%87%BA%E5%A4%84\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>关于发课程文章不注明出处</h2>\n<p>最开始接触到这个作者，是因为她写了一篇 《Vue仿饿了么app项目总结》，我正好在这个项目的作者黄轶老师的群里，群友非常愤慨的来评论区讨公道后她才在评论区里声明这是和慕课网的黄轶老师学习课程后进行的总结。</p>\n<p>我可以理解为如果没人说的话，她就想瞒混过去作为自己的项目了，可惜她不了解行情，这门课早就在几年前就家喻户晓，成为 Vue 面试必备的实战项目了。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/4/8/1715a81bbf9fff7e?w=930&#x26;h=1048&#x26;f=png&#x26;s=140726\"></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/4/9/1715b1ef2125bc0b?w=722&#x26;h=333&#x26;f=png&#x26;s=37032\"></p>\n<h2 id=\"申请水军号\"><a href=\"#%E7%94%B3%E8%AF%B7%E6%B0%B4%E5%86%9B%E5%8F%B7\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>申请水军号</h2>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/4/9/1715b1f8eeb2cd07?w=1355&#x26;h=1223&#x26;f=png&#x26;s=254947\"></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/4/9/1715b2122c00cae9?w=1099&#x26;h=529&#x26;f=png&#x26;s=55214\">\n他们的文章其实挺难获得好评的，毕竟真的挺水的。但是这个用户却时常在他们的文章下抢沙发。点进去仔细一看，只关注了这俩人，点赞的也全是这俩人……</p>\n<h2 id=\"关于知识变现\"><a href=\"#%E5%85%B3%E4%BA%8E%E7%9F%A5%E8%AF%86%E5%8F%98%E7%8E%B0\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>关于知识变现</h2>\n<p>我一直觉得知识变现不可耻，这是一个「自媒体」流行的时代，认真输出自己观点并且影响他人的人理应获得自己的收益，我并不觉得这有什么丢人的，  </p>\n<p>我在 <a href=\"https://juejin.im/post/5e7c08bde51d455c4c66ddad\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">写给初中级前端的高级进阶指南</a> 这篇文章里放了几个掘金小册的推广码，是我认真读过以后真心想推荐给大家的，这也是掘金官方提供的一种变现机制。我真心不觉得这有什么不对。知识是有价值的，前提是你不要输出二手错误百出的知识。甚至在大家的公众号上看到广告的时候，我也是会心一笑，因为这个作者曾经或「原创」或「转载」的优质文章给我带来了很大的收益……</p>\n<p>而原作者 @小明同学哟 的水平明显还不足以给社区的新人一些启发，甚至我感觉大概相当于某c字开头的论坛上面充斥着的新手学习笔记，这样子为了变现而影响社区环境的吃相我就接受不了了。</p>\n<p>再不济，你还可以学习某不愿提及姓名的「闰土大叔」，写些心灵鸡汤做一个教父，也一样可以赚的盆满钵满，毕竟人家没误导人。只是人家是真的不会技术，那就曲线救国而已。</p>\n<h2 id=\"总结\"><a href=\"#%E6%80%BB%E7%BB%93\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>总结</h2>\n<p>总而言之，我关注了这个作者和她的搭档 @小梦哟 挺久了，不知道这些作者为什么这么拼命的想火起来，不惜重复发文章，不惜借用别人的课程成果而不声明，这对社区的进步来说没有任何好处。</p>\n<p>我坚持在掘金发文章其实有一个原因，就是我也希望中文社区能慢慢发展出类似 <code class=\"language-text\">medium</code> 那样高质量的前端交流社区（虽然它是付费制的，有难度），而掘金是我前端最开始就接触到的社区，心里也很有感情，看着首页混杂着这种错误百出的低质量文章，我心里真的是百感交集，为什么明明是新手的类似于学习笔记质量的文章也要急着发出来吸引流量呢？</p>\n<p>总之，真心希望掘金能少一些不负责任的水文，一些摘抄搬运官方文档的东西。大家都认真的输出自己去证实过，或者真正理解的总结，慢慢的让掘金、甚至国内的前端氛围能够形成一个良性氛围，前端的明天越来越美好。</p>","timeToRead":18,"frontmatter":{"title":"驳《前端常见的Vue面试题目汇总》","date":"April 09, 2020","spoiler":""},"fields":{"slug":"/597005753/","langKey":"en"}}},"pageContext":{"slug":"/597005753/","previous":{"fields":{"slug":"/595351553/","langKey":"en","directoryName":"595351553"},"frontmatter":{"title":"Vue 进阶必学之高阶组件实战"}},"next":{"fields":{"slug":"/597722732/","langKey":"en","directoryName":"597722732"},"frontmatter":{"title":"Vue 的计算属性真的会缓存吗？（原理揭秘）"}},"translations":[],"translatedLinks":[]}},"staticQueryHashes":["336482444"]}