{"componentChunkName":"component---src-templates-blog-post-js","path":"/545524362/","result":{"data":{"site":{"siteMetadata":{"title":"ssh的博客","author":"ssh"}},"markdownRemark":{"id":"41f358bd-cadd-58eb-9368-4a328f596704","html":"<p>最近一段时间，Vue3带来的新能力composition-api带来了比较大的轰动，虽然是灵感是源React Hook，但是在很多方面却超越了它。但是除了composition-api，其他的改动却比较少有人讨论，本篇文章就由<a href=\"https://github.com/vuejs/rfcs\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">vuejs/rfcs</a> 这个仓库来看看其他比较让人振奋的RFC。</p>\n<p>RFC其实就是（Request For Comments）征求修正意见书，它不代表这个api一定会正式通过，但是却可以让社区知道vuejs团队正在进行的一些工作，和一些新想法。</p>\n<p>Vue的RFC分为四个阶段：</p>\n<ol>\n<li>Pending：当RFC作为PR提交时。</li>\n<li>Active：当RFC PR正在合并时。</li>\n<li>Landed：当RFC提出的更改在实际发行版中发布时。</li>\n<li>Rejected：关闭RFC PR而不合并时。  </li>\n</ol>\n<p>本篇讨论的RFC都在<a href=\"https://github.com/vuejs/rfcs/tree/master/active-rfcs\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Active</a>阶段</p>\n<h2 id=\"删除filters的支持\"><a href=\"#%E5%88%A0%E9%99%A4filters%E7%9A%84%E6%94%AF%E6%8C%81\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>删除filters的支持</h2>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token comment\">&lt;!-- before --></span>\n{{ msg | format }}\n\n<span class=\"token comment\">&lt;!-- after --></span>\n{{ format(msg) }}</code></pre></div>\n<p>动机：</p>\n<ol>\n<li>过滤器的功能可以轻松地通过方法调用或计算的属性来复制，因此它主要提供语法而不是实用的价值。</li>\n<li>过滤器需要一种自定义的微语法，该语法打破了表达式只是“ JavaScript”的假设-这增加了学习和实现成本。 实际上，它与JavaScript自己的按位或运算符（|）冲突，并使表达式解析更加复杂。</li>\n<li>过滤器还会在模板IDE支持中增加额外的复杂性（由于它们不是真正的JavaScript）。</li>\n</ol>\n<p>替代：</p>\n<ol>\n<li>可以简单的利用method替换filter的能力，统一语法，Vue.filter全局注册的能力也可以用Vue.prototype全局挂载方法来实现。</li>\n<li>\n<p>目前有一个stage-1的提案<a href=\"https://github.com/tc39/proposal-pipeline-operator\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">pipeline-operator</a> 可以优雅的实现方法组合。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> transformedMsg <span class=\"token operator\">=</span> msg <span class=\"token operator\">|</span><span class=\"token operator\">></span> uppercase <span class=\"token operator\">|</span><span class=\"token operator\">></span> reverse <span class=\"token operator\">|</span><span class=\"token operator\">></span> pluralize</code></pre></div>\n</li>\n</ol>\n<h2 id=\"render函数的改变\"><a href=\"#render%E5%87%BD%E6%95%B0%E7%9A%84%E6%94%B9%E5%8F%98\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>render函数的改变</h2>\n<p>原文：<br>\n<a href=\"https://github.com/vuejs/rfcs/blob/master/active-rfcs/0008-render-function-api-change.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/vuejs/rfcs/blob/master/active-rfcs/0008-render-function-api-change.md</a>  </p>\n<p>概览：</p>\n<ol>\n<li>h现在已全局导入，而不是传递给渲染函数作为参数</li>\n<li>渲染函数参数已更改，并使stateful组件和functional组件之间保持一致</li>\n<li>VNode现在具有拉平的props结构</li>\n</ol>\n<p>基本示例：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// globally imported `h`</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> h <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span>\n      <span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token comment\">// flat data structure</span>\n      <span class=\"token punctuation\">{</span>\n        id<span class=\"token punctuation\">:</span> <span class=\"token string\">'app'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">onClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">[</span>\n        <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token string\">'span'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'child'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>动机：\n在2.x中，VNode是特定于上下文的-这意味着创建的每个VNode都绑定到创建它的组件实例（“上下文”），</p>\n<p>在2.x中，这样的一段代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>h其实是通过render中的形参传入的，这是因为它需要关心是哪个组件实例在调用它，在3.x中，文章中介绍说vnode将会成为<code class=\"language-text\">context free</code>的，这意味着更加灵活的组件声明位置（不止在.vue文件中，不需要到处传递h参数）。  </p>\n<p>并且如果<code class=\"language-text\">context free</code>真的实现，那么在2.x中Vue高阶组件的一些诟病也可以一同解决掉了，如果对context带来的高阶组件的bug感兴趣的话，可以查看HcySunYang大大的这篇文章：<br>\n<a href=\"https://segmentfault.com/p/1210000012743259/read\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://segmentfault.com/p/1210000012743259/read</a>  </p>\n<p>另外本篇中还提到了一个vnode的属性拉平，</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// before</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">class</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  style<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> color<span class=\"token punctuation\">:</span> <span class=\"token string\">'red'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  attrs<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">:</span> <span class=\"token string\">'foo'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  domProps<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> innerHTML<span class=\"token punctuation\">:</span> <span class=\"token string\">''</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  on<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> click<span class=\"token punctuation\">:</span> foo <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  key<span class=\"token punctuation\">:</span> <span class=\"token string\">'foo'</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// after</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">class</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  style<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> color<span class=\"token punctuation\">:</span> <span class=\"token string\">'red'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  id<span class=\"token punctuation\">:</span> <span class=\"token string\">'foo'</span><span class=\"token punctuation\">,</span>\n  innerHTML<span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n  onClick<span class=\"token punctuation\">:</span> foo<span class=\"token punctuation\">,</span>\n  key<span class=\"token punctuation\">:</span> <span class=\"token string\">'foo'</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>目前看来，由于jsx最终会被编译成生成vnode的方法，这个改动可能会让vue中书写jsx变得更加容易，现在的一些写法可以看我写的这篇文章：<br>\n<a href=\"https://juejin.im/post/5d40fa605188255d2e32c929\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">手把手教你用jsx封装Vue中的复杂组件（网易云音乐实战项目需求）</a>  </p>\n<p>在这篇文章中可以看出，目前嵌套的vnode结构会让jsx的书写也变得很困难。  </p>\n<p>由于render函数的一些另外的细微变动，Vue3中理想的functional component的书写方式是这样的：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> inject <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> themeSymbol <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./ThemeProvider'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">FunctionalComp</span> <span class=\"token operator\">=</span> props <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> theme <span class=\"token operator\">=</span> <span class=\"token function\">inject</span><span class=\"token punctuation\">(</span>themeSymbol<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token string\">`Using theme </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>theme<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>是不是很像React，哈哈。  </p>\n<h2 id=\"全局方法的导入方式\"><a href=\"#%E5%85%A8%E5%B1%80%E6%96%B9%E6%B3%95%E7%9A%84%E5%AF%BC%E5%85%A5%E6%96%B9%E5%BC%8F\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>全局方法的导入方式</h2>\n<p>为了更好的支持<code class=\"language-text\">tree-shaking</code>，Vue3把2.x中统一导出Vue的方式更改为分散导出，这样只有项目中用到的方法会被打包进bundle中，有效的减少了包的大小。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> nextTick<span class=\"token punctuation\">,</span> observable <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span>\n\n<span class=\"token function\">nextTick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token function\">observable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>简单的来说，如果你项目中只用到了<code class=\"language-text\">observable</code>和<code class=\"language-text\">nextTick</code>，那么例如<code class=\"language-text\">use</code>，<code class=\"language-text\">reactive</code>等这些另外的api就不会被打包进你的项目中。  </p>\n<p>关于<code class=\"language-text\">tree-shaking</code>，我特别喜欢的作者<a href=\"https://juejin.im/user/58f876dc5c497d0058e38ae1\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">相学长</a>有一篇文章可以看一下：  </p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/32831172\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://zhuanlan.zhihu.com/p/32831172</a>  </p>\n<h2 id=\"总结\"><a href=\"#%E6%80%BB%E7%BB%93\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>总结</h2>\n<p>在这个仓库中，还有一些提案大家也可以自行去看一下，剩下的都是一些细节的优化，这些优化或多或少的会让Vue3更好用一些，非常期待Vue3的到来。  </p>\n<p>另外由于plugin的存在，我已经在2.x中用Vue3的composition-api做了一些尝鲜，不得不说<strong>真香</strong>！</p>\n<p><a href=\"https://juejin.im/post/5e0da5606fb9a048483ecf64\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Vue3 Composition-Api + TypeScript + 新型状态管理模式探索</a></p>","timeToRead":5,"frontmatter":{"title":"Vue3中不止composition-api，其他的提案(RFC)也很精彩。","date":"January 06, 2020","spoiler":""},"fields":{"slug":"/545524362/","langKey":"en"}}},"pageContext":{"slug":"/545524362/","previous":{"fields":{"slug":"/545265110/","langKey":"en","directoryName":"545265110"},"frontmatter":{"title":"Vue中的组件从初始化到挂载经历了什么"}},"next":{"fields":{"slug":"/546349944/","langKey":"en","directoryName":"546349944"},"frontmatter":{"title":"Koa的洋葱中间件，Redux的中间件，Axios的拦截器让你迷惑吗？实现一个精简版的就彻底搞懂了。"}},"translations":[],"translatedLinks":[]}},"staticQueryHashes":["336482444"]}