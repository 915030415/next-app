{"componentChunkName":"component---src-templates-blog-post-js","path":"/529164067/","result":{"data":{"site":{"siteMetadata":{"title":"ssh的博客","author":"ssh"}},"markdownRemark":{"id":"714b58d0-35d4-52ea-af8d-996b7eb69c61","html":"<h2 id=\"前言\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>TypeScript可以说是今年的一大流行点，虽然Angular早就开始把TypeScript作为内置支持了，但是真正在中文社区火起来据我观察也就是没多久的事情，尤其是在Vue3官方宣布采用TypeScript开发以后达到了一个顶点。  </p>\n<p>社区里有很多TypeScript比较基础的分享，但是关于React实战的还是相对少一些，这篇文章就带大家用React从头开始搭建一个TypeScript的todolist，我们的目标是实现类型安全，杜绝开发时可能出现的任何错误！</p>\n<p>本文所使用的所有代码全部整理在了 <a href=\"https://github.com/sl1673495/ts-react-todo\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ts-react-todo</a> 这个仓库里。</p>\n<p>本文默认你对于TypeScript的基础应用没有问题，对于泛型的使用也大概理解，如果对于TS的基础还没有熟悉的话，可以看我在上面github仓库的Readme的文末附上的几篇推荐。</p>\n<h2 id=\"实战\"><a href=\"#%E5%AE%9E%E6%88%98\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>实战</h2>\n<h3 id=\"创建应用\"><a href=\"#%E5%88%9B%E5%BB%BA%E5%BA%94%E7%94%A8\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>创建应用</h3>\n<p>首先使用的脚手架是create-react-app，根据<br>\n<a href=\"https://www.html.cn/create-react-app/docs/adding-typescript/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.html.cn/create-react-app/docs/adding-typescript/</a><br>\n的流程可以很轻松的创建一个开箱即用的typescript-react-app。  </p>\n<p>创建后的结构大概是这样的：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">my-app/\n  README.md\n  node_modules/\n  package.json\n  public/\n    index.html\n    favicon.ico\n  src/\n    App.css\n    App.ts\n    App.test.ts\n    index.css\n    index.ts\n    logo.svg</code></pre></div>\n<p>在src/App.ts中开始编写我们的基础代码</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> classNames <span class=\"token keyword\">from</span> <span class=\"token string\">\"classnames\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> TodoForm <span class=\"token keyword\">from</span> <span class=\"token string\">\"./TodoForm\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">\"../api/axios\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"../styles/App.css\"</span><span class=\"token punctuation\">;</span>\n\ntype Todo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token punctuation\">:</span> number<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 名字</span>\n  name<span class=\"token punctuation\">:</span> string<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 是否完成</span>\n  done<span class=\"token punctuation\">:</span> boolean<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\ntype Todos <span class=\"token operator\">=</span> Todo<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> App<span class=\"token punctuation\">:</span> React<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">FC</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>todos<span class=\"token punctuation\">,</span> setTodos<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> useState<span class=\"token operator\">&lt;</span>Todos<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"App\"</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>header className<span class=\"token operator\">=</span><span class=\"token string\">\"App-header\"</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>TodoForm <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n          <span class=\"token punctuation\">{</span>todos<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n              <span class=\"token operator\">&lt;</span>li\n                onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">onToggleTodo</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n                key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>index<span class=\"token punctuation\">}</span>\n                className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">classNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n                  done<span class=\"token punctuation\">:</span> todo<span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n              <span class=\"token operator\">></span>\n                <span class=\"token punctuation\">{</span>todo<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span>\n              <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>header<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App<span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"usestate\"><a href=\"#usestate\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>useState</h3>\n<p>代码很简单，利用type关键字来定义Todo这个类型，然后顺便生成Todos这个类型，用来给React的useState作为<code class=\"language-text\">泛型约束</code>使用，这样在上下文中，todos这个变量就会被约束为Todos这个类型，setTodos也只能去传入Todos类型的变量。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>todos<span class=\"token punctuation\">,</span> setTodos<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> useState<span class=\"token operator\">&lt;</span>Todos<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/11/27/16eaab9638955295?w=387&#x26;h=55&#x26;f=png&#x26;s=29172\" alt=\"Todos\"></p>\n<p>当然，useState也是具有泛型推导的能力的，但是这要求你传入的初始值已经是你想要的类型了，而不是空数组。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>todos<span class=\"token punctuation\">,</span> setTodos<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    id<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">'ssh'</span><span class=\"token punctuation\">,</span>\n    done<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/11/27/16eaabcfc1df56a8?w=292&#x26;h=184&#x26;f=png&#x26;s=55346\"></p>\n<h3 id=\"模拟axios（简单版）\"><a href=\"#%E6%A8%A1%E6%8B%9Faxios%EF%BC%88%E7%AE%80%E5%8D%95%E7%89%88%EF%BC%89\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>模拟axios（简单版）</h3>\n<p>有了基本的骨架以后，就要想办法去拿到数据了，这里我选择自己模拟编写一个axios去返回想要的数据。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">refreshTodos</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 这边必须手动声明axios的返回类型。</span>\n    axios<span class=\"token operator\">&lt;</span>Todos<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/todos\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>setTodos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">refreshTodos</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>注意这里的axios也要在使用时手动传入泛型，因为我们现在还不能根据”/api/todos”这个字符串来推导出返回值的类型，接下来看一下axios的实现。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> todos <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    id<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">'待办1'</span><span class=\"token punctuation\">,</span>\n    done<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    id<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">'待办2'</span><span class=\"token punctuation\">,</span>\n    done<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    id<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">'待办3'</span><span class=\"token punctuation\">,</span>\n    done<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\">// 使用联合类型来约束url</span>\ntype Url <span class=\"token operator\">=</span> <span class=\"token string\">'/api/todos'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'/api/toggle'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'/api/add'</span>\n\n<span class=\"token keyword\">const</span> axios <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">:</span> Url<span class=\"token punctuation\">,</span> payload<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> any<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Promise<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">|</span> never <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> data\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'/api/todos'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      data <span class=\"token operator\">=</span> todos<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">break</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Unknown api'</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>data <span class=\"token keyword\">as</span> any<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> axios</code></pre></div>\n<p>重点看一下axios的类型描述</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> axios <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">:</span> Url<span class=\"token punctuation\">,</span> payload<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> any<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Promise<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">|</span> never</code></pre></div>\n<p>泛型T被原封不动的交给了返回值的Promise<T>，</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">promise<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> data<span class=\"token punctuation\">.</span>xxx<span class=\"token punctuation\">)</span></code></pre></div>\n<p>所以外部axios调用时传入的Todos泛型就被交给了Promise，Ts就可以推断出这个promise去resolve的值的类型是Todos，然后我们把switch-case逻辑中拿到的值用Promise.resolve(data)返回出去。</p>\n<p>接下来回到src/App.ts 继续补充点击todo，更改完成状态时候的事件，</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> App<span class=\"token punctuation\">:</span> React<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">FC</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>todos<span class=\"token punctuation\">,</span> setTodos<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> useState<span class=\"token operator\">&lt;</span>Todos<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">refreshTodos</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// FIXME 这边必须手动声明axios的返回类型。</span>\n    axios<span class=\"token operator\">&lt;</span>Todos<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/todos\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>setTodos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">refreshTodos</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> onToggleTodo <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">:</span> Todo<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/toggle\"</span><span class=\"token punctuation\">,</span> todo<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">refreshTodos</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"App\"</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>header className<span class=\"token operator\">=</span><span class=\"token string\">\"App-header\"</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>TodoForm refreshTodos<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>refreshTodos<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n          <span class=\"token punctuation\">{</span>todos<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n              <span class=\"token operator\">&lt;</span>li\n                onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">onToggleTodo</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n                key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>index<span class=\"token punctuation\">}</span>\n                className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">classNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n                  done<span class=\"token punctuation\">:</span> todo<span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n              <span class=\"token operator\">></span>\n                <span class=\"token punctuation\">{</span>todo<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span>\n              <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>header<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>再来看一下src/TodoForm组件的实现:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">\"../api/axios\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Props</span> <span class=\"token punctuation\">{</span>\n  refreshTodos<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> TodoForm<span class=\"token punctuation\">:</span> React<span class=\"token punctuation\">.</span><span class=\"token constant\">FC</span><span class=\"token operator\">&lt;</span>Props<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> refreshTodos <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">,</span> setName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onChange</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">:</span> React<span class=\"token punctuation\">.</span>ChangeEvent<span class=\"token operator\">&lt;</span>HTMLInputElement<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onSubmit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">:</span> React<span class=\"token punctuation\">.</span>FormEvent<span class=\"token operator\">&lt;</span>HTMLFormElement<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    e<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> newTodo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      id<span class=\"token punctuation\">:</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      name<span class=\"token punctuation\">,</span>\n      done<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// FIXME 这边第二个参数没有做类型约束</span>\n      <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/add\"</span><span class=\"token punctuation\">,</span> newTodo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">refreshTodos</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>form className<span class=\"token operator\">=</span><span class=\"token string\">\"todo-form\"</span> onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>onSubmit<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>input\n        className<span class=\"token operator\">=</span><span class=\"token string\">\"todo-input\"</span>\n        value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span>\n        onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>onChange<span class=\"token punctuation\">}</span>\n        placeholder<span class=\"token operator\">=</span><span class=\"token string\">\"请输入待办事项\"</span>\n      <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button type<span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span><span class=\"token operator\">></span>新增<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> TodoForm<span class=\"token punctuation\">;</span></code></pre></div>\n<p>在axios里加入/api/toggle和/api/add的处理：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'/api/todos'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      data <span class=\"token operator\">=</span> todos<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">break</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'/api/toggle'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> todo <span class=\"token operator\">=</span> todos<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> id <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> id <span class=\"token operator\">===</span> payload<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        todo<span class=\"token punctuation\">.</span>done <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>todo<span class=\"token punctuation\">.</span>done\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">break</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'/api/add'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      todos<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">break</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Unknown api'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>其实写到这里，一个简单的todolist已经实现了，功能是完全可用的，但是你说它类型安全吗，其实一点也不安全。</p>\n<p>再回头看一下axios的类型签名：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> axios <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">:</span> Url<span class=\"token punctuation\">,</span> payload<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> any<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Promise<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">|</span> never</code></pre></div>\n<p>payload这个参数被加上了?可选符，这是因为有的接口需要传参而有的接口不需要，这就会带来一些问题。</p>\n<p>这里编写axios只约束了传入的url的限制，但是并没有约束入参的类型，返回值的类型，其实基本也就是anyscript了，举例来说，在src/TodoForm里的提交事件中，我们在FIXME的下面一行稍微改动，把axios的第二个参数去掉，如果以现实情况来说的话，一个add接口不传值，基本上报错没跑了，而且这个错误只有运行时才能发现。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onSubmit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">:</span> React<span class=\"token punctuation\">.</span>FormEvent<span class=\"token operator\">&lt;</span>HTMLFormElement<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    e<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> newTodo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      id<span class=\"token punctuation\">:</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      name<span class=\"token punctuation\">,</span>\n      done<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// ERROR！！ 这边的第二个参数被去掉了</span>\n      <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/add\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">refreshTodos</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>在src/App.ts的onToggleTodo事件里也有着同样的问题</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"> <span class=\"token keyword\">const</span> onToggleTodo <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">:</span> Todo<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ERROR！！ 这边的第二个参数被去掉了</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/toggle\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">refreshTodos</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>另外在获取数据时候axios，必须要手动用泛型来定义好返回类型，这个也很冗余。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">axios<span class=\"token operator\">&lt;</span>Todos<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/todos\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>setTodos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>接下来我们用一个严格类型版本的axios函数来解决这个问题。</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// axios.strict.ts</span>\n<span class=\"token keyword\">let</span> todos <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    id<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">'待办1'</span><span class=\"token punctuation\">,</span>\n    done<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    id<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">'待办2'</span><span class=\"token punctuation\">,</span>\n    done<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    id<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">'待办3'</span><span class=\"token punctuation\">,</span>\n    done<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span>\n\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">enum</span> Urls <span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">TODOS</span> <span class=\"token operator\">=</span> <span class=\"token string\">'/api/todos'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">TOGGLE</span> <span class=\"token operator\">=</span> <span class=\"token string\">'/api/toggle'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">ADD</span> <span class=\"token operator\">=</span> <span class=\"token string\">'/api/add'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> Todo <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> todos<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">type</span> Todos <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> todos</code></pre></div>\n<p>首先我们用enum枚举定义好我们所有的接口url，方便后续复用，\n然后我们用ts的typeof操作符从todos数据倒推出类型。  </p>\n<p>接下来用泛型条件类型来定义一个工具类型，根据泛型传入的值来返回一个自定义的key </p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> Key<span class=\"token operator\">&lt;</span><span class=\"token constant\">U</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span>\n  <span class=\"token constant\">U</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Urls<span class=\"token punctuation\">.</span>TOGGLE</span> <span class=\"token operator\">?</span> <span class=\"token string\">'toggle'</span><span class=\"token punctuation\">:</span> \n  <span class=\"token constant\">U</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Urls<span class=\"token punctuation\">.</span>ADD</span> <span class=\"token operator\">?</span> <span class=\"token string\">'add'</span><span class=\"token punctuation\">:</span> \n  <span class=\"token constant\">U</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Urls<span class=\"token punctuation\">.</span>TODOS</span> <span class=\"token operator\">?</span> <span class=\"token string\">'todos'</span><span class=\"token punctuation\">:</span> \n  <span class=\"token string\">'other'</span></code></pre></div>\n<p>这个Key的作用就是，假设我们传入</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token constant\">K</span> <span class=\"token operator\">=</span> Key<span class=\"token operator\">&lt;</span>Urls<span class=\"token punctuation\">.</span><span class=\"token constant\">TODOS</span><span class=\"token operator\">></span></code></pre></div>\n<p>会返回<code class=\"language-text\">todos</code>这个字符串类型，它有什么用呢，接着看就知道了。</p>\n<p>现在需要把axios的函数类型声明的更加严格，我们需要把入参payload的类型和返回值的类型都通过传入的url推断出来，这里要利用泛型推导：</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> axios <span class=\"token operator\">&lt;</span><span class=\"token constant\">U</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Urls</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">:</span> <span class=\"token constant\">U</span><span class=\"token punctuation\">,</span> payload<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> Payload<span class=\"token operator\">&lt;</span><span class=\"token constant\">U</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Promise<span class=\"token operator\">&lt;</span>Result<span class=\"token operator\">&lt;</span><span class=\"token constant\">U</span><span class=\"token operator\">>></span> <span class=\"token operator\">|</span> never</code></pre></div>\n<p>不要被这长串吓到，先一步步来分解它，  </p>\n<ol>\n<li><code class=\"language-text\">&lt;U extends Urls&gt;</code>首先泛型U用extends关键字做了类型约束，它必须是Urls枚举中的一个，</li>\n<li><code class=\"language-text\">(url: U, payload?: Payload&lt;U&gt;)</code>参数中，url参数和泛型U建立了关联，这样我们在调用axios函数时，就会动态的根据传入的url来确定上下文中U的类型，接下来用<code class=\"language-text\">Payload&lt;U&gt;</code>把U传入Payload工具类型中。</li>\n<li>最后返回值用<code class=\"language-text\">Promise&lt;Result&lt;U&gt;&gt;</code>，还是一样的原理，把U交给Result工具类型进行推导。</li>\n</ol>\n<p>接下来重要的就是看Payload和Result的实现了。</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> Payload<span class=\"token operator\">&lt;</span><span class=\"token constant\">U</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  toggle<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span>\n  add<span class=\"token punctuation\">:</span> Todo<span class=\"token punctuation\">,</span>\n  todos<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span>\n  other<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">[</span>Key<span class=\"token operator\">&lt;</span><span class=\"token constant\">U</span><span class=\"token operator\">></span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>刚刚定义的Key&#x3C;U>工具类型就派上用场了，假设我们调用axios(Urls.TOGGLE),那么U被推断Urls.TOGGLE，传给Payload的就是<code class=\"language-text\">Payload&lt;Urls.TOGGLE&gt;</code>，那么Key&#x3C;U>返回的结果就是Key&#x3C;Urls.TOGGLE>，即为<code class=\"language-text\">toggle</code>，</p>\n<p>那么此时推断的结果是</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">Payload<span class=\"token operator\">&lt;</span>Urls<span class=\"token punctuation\">.</span><span class=\"token constant\">TOGGLE</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  toggle<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span>\n  add<span class=\"token punctuation\">:</span> Todo<span class=\"token punctuation\">,</span>\n  todos<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span>\n  other<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">[</span><span class=\"token string\">'toggle'</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>此时todos命中的就是前面定义的类型集合中第一个<code class=\"language-text\">toggle: number</code>，\n所以此时<code class=\"language-text\">Payload&lt;Urls.TOGGLE&gt;</code>就这样被推断成了number 类型。</p>\n<p>Result也是类似的实现：</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> Result<span class=\"token operator\">&lt;</span><span class=\"token constant\">U</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  toggle<span class=\"token punctuation\">:</span> <span class=\"token builtin\">boolean</span>\n  add<span class=\"token punctuation\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">,</span>\n  todos<span class=\"token punctuation\">:</span> Todos\n  other<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">[</span>Key<span class=\"token operator\">&lt;</span><span class=\"token constant\">U</span><span class=\"token operator\">></span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>这时候再回头来看函数类型</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> axios <span class=\"token operator\">&lt;</span><span class=\"token constant\">U</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Urls</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">:</span> <span class=\"token constant\">U</span><span class=\"token punctuation\">,</span> payload<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> Payload<span class=\"token operator\">&lt;</span><span class=\"token constant\">U</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Promise<span class=\"token operator\">&lt;</span>Result<span class=\"token operator\">&lt;</span><span class=\"token constant\">U</span><span class=\"token operator\">>></span> <span class=\"token operator\">|</span> never </code></pre></div>\n<p>是不是就清楚很多了，传入不同的参数会推断出不同的payload入参，以及返回值类型。</p>\n<p>此时在来到app.ts里，看新版refreshTodos函数</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">refreshTodos</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span>Urls<span class=\"token punctuation\">.</span><span class=\"token constant\">TODOS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>todos<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setTodos</span><span class=\"token punctuation\">(</span>todos<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>axios后面的泛型约束被去掉了，then里面的todos依然被成功的推断为Todos类型。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/11/27/16eaba8268f9222d?w=405&#x26;h=183&#x26;f=png&#x26;s=70512\" alt=\"todos\"></p>\n<p>这时候就完美了吗？并没有，还有最后一点优化。</p>\n<h2 id=\"函数重载\"><a href=\"#%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>函数重载</h2>\n<p>写到这里，类型基本上是比较严格了，但是还有一个问题，就是在调用呢<code class=\"language-text\">axios(Urls.TOGGLE)</code>这个接口的时候，我们其实是一定要传递第二个参数的，但是因为<code class=\"language-text\">axios(Urls.TODOS)</code>是不需要传参的，所以我们只能在axios的函数签名把payload?设置为可选，这就导致了一个问题，就是ts不能明确的知道哪些接口需要传参，哪些接口不需要传参。</p>\n<p>注意下图中的payload是带?的。\n<img src=\"https://user-gold-cdn.xitu.io/2019/11/27/16eaba932b3f795a?w=678&#x26;h=103&#x26;f=png&#x26;s=43151\" alt=\"toggle\"></p>\n<p>要解决这个问题，需要用到ts中的函数重载。</p>\n<p>首先把需要传参的接口和不需要传参的接口列出来。</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> UrlNoPayload <span class=\"token operator\">=</span>  Urls<span class=\"token punctuation\">.</span><span class=\"token constant\">TODOS</span>\n<span class=\"token keyword\">type</span> UrlWithPayload <span class=\"token operator\">=</span> Exclude<span class=\"token operator\">&lt;</span>Urls<span class=\"token punctuation\">,</span> UrlNoPayload<span class=\"token operator\">></span></code></pre></div>\n<p>这里用到了TypeScript的内置类型Exclude，用来在传入的类型中排除某些类型，这里我们就有了两份类型，<code class=\"language-text\">需要传参的Url集合</code>和<code class=\"language-text\">无需传参的Url集合</code>。</p>\n<p>接着开始写重载</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> axios <span class=\"token operator\">&lt;</span><span class=\"token constant\">U</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">UrlNoPayload</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">:</span> <span class=\"token constant\">U</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Promise<span class=\"token operator\">&lt;</span>Result<span class=\"token operator\">&lt;</span><span class=\"token constant\">U</span><span class=\"token operator\">>></span>\n<span class=\"token keyword\">function</span> axios <span class=\"token operator\">&lt;</span><span class=\"token constant\">U</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">UrlWithPayload</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">:</span> <span class=\"token constant\">U</span><span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">:</span> Payload<span class=\"token operator\">&lt;</span><span class=\"token constant\">U</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Promise<span class=\"token operator\">&lt;</span>Result<span class=\"token operator\">&lt;</span><span class=\"token constant\">U</span><span class=\"token operator\">>></span> <span class=\"token operator\">|</span> never\n<span class=\"token keyword\">function</span> axios <span class=\"token operator\">&lt;</span><span class=\"token constant\">U</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Urls</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">:</span> <span class=\"token constant\">U</span><span class=\"token punctuation\">,</span> payload<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> Payload<span class=\"token operator\">&lt;</span><span class=\"token constant\">U</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Promise<span class=\"token operator\">&lt;</span>Result<span class=\"token operator\">&lt;</span><span class=\"token constant\">U</span><span class=\"token operator\">>></span> <span class=\"token operator\">|</span> never <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 具体实现</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>根据extends约束到的不同类型，来重写函数的入参形式，最后用一个最全的函数签名（一定是要能兼容之前所有的函数签名的，所以最后一个签名的payload需要写成可选）来进行函数的实现。</p>\n<p>此时如果再空参数调用toggle，就会直接报错，因为只有在请求todos的情况下才可以不传参数。\n<img src=\"https://user-gold-cdn.xitu.io/2019/11/27/16eabaec64ac4c0a?w=553&#x26;h=165&#x26;f=png&#x26;s=81097\" alt=\"toggle严格\"></p>\n<h2 id=\"后记\"><a href=\"#%E5%90%8E%E8%AE%B0\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>后记</h2>\n<p>到此我们就实现了一个严格类型的React应用，写这篇文章的目的不是让大家都要在公司的项目里去把类型推断做到极致，毕竟一切的技术还是为业务服务的。  </p>\n<p>但是就算是写宽松版本的TypeScript，带来的收益也远远比裸写JavaScript要高很多，尤其是在别人需要复用你写的工具函数或者组件时。   </p>\n<p>而且TypeScript也可以在开发时就避免很多粗心导致的错误，详见：<br>\nTypeScript 解决了什么痛点？ - justjavac的回答 - 知乎\n<a href=\"https://www.zhihu.com/question/308844713/answer/574423626\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.zhihu.com/question/308844713/answer/574423626</a></p>\n<p>本文涉及到的所有代码都在<br>\n<a href=\"https://github.com/sl1673495/ts-react-todo\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/sl1673495/ts-react-todo</a> 中，有兴趣的同学可以拉下来自己看看。</p>","timeToRead":10,"frontmatter":{"title":"React + TypeScript + Hook 带你手把手打造类型安全的应用。","date":"November 27, 2019","spoiler":""},"fields":{"slug":"/529164067/","langKey":"en"}}},"pageContext":{"slug":"/529164067/","previous":{"fields":{"slug":"/516924175/","langKey":"en","directoryName":"516924175"},"frontmatter":{"title":"通过实现一个最精简的响应式系统来学习Vue的data、computed、watch。"}},"next":{"fields":{"slug":"/536818126/","langKey":"en","directoryName":"536818126"},"frontmatter":{"title":"React Hook + TypeScript 手把手带你打造use-watch自定义Hook，实现Vue中的watch功能。"}},"translations":[],"translatedLinks":[]}},"staticQueryHashes":["336482444"]}