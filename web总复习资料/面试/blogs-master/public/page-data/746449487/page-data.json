{"componentChunkName":"component---src-templates-blog-post-js","path":"/746449487/","result":{"data":{"site":{"siteMetadata":{"title":"ssh的博客","author":"ssh"}},"markdownRemark":{"id":"06dc84ad-71a2-5031-a95a-6c6a63f99e90","html":"<h2 id=\"前言\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>本文是 <a href=\"https://www.youtube.com/watch?v=k-A2VfuUROg&#x26;feature=youtu.be&#x26;t=1036\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Rendering on the Web: Performance Implications of Application Architecture (Google I/O ’19)</a> 这篇谷歌工程师带来的现代应用架构体系下的优化相关演讲的总结，演讲介绍了以下优化手段：</p>\n<ul>\n<li>预渲染</li>\n<li>同构渲染</li>\n<li>流式渲染</li>\n<li><strong>渐进式注水</strong>（非常精彩）</li>\n</ul>\n<h2 id=\"应用架构体系\"><a href=\"#%E5%BA%94%E7%94%A8%E6%9E%B6%E6%9E%84%E4%BD%93%E7%B3%BB\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>应用架构体系</h2>\n<p>当我们讨论「应用架构」的时候，可以理解为通过以下几个部分组合来构建网站。</p>\n<ol>\n<li><code class=\"language-text\">Component model</code> 组件模型。</li>\n<li><code class=\"language-text\">Rendering and loading</code> 渲染和加载。</li>\n<li><code class=\"language-text\">Routing and transitions</code> 路由和过渡。</li>\n<li><code class=\"language-text\">Data/state management</code> 数据、状态的管理。</li>\n</ol>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6fd50dc605224818b1f936e6261279ca~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"image\"></p>\n<h2 id=\"性能指标\"><a href=\"#%E6%80%A7%E8%83%BD%E6%8C%87%E6%A0%87\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>性能指标</h2>\n<p>在分析页面渲染性能之前，先了解一下几个比较重要的指标，方便下文理解：</p>\n<ol>\n<li><code class=\"language-text\">FP</code>: First Paint，是 Paint Timing API 的一部分，是页面导航与浏览器将该网页的第一个像素渲染到屏幕上所用的中间时，渲染是任何与输入网页导航前的屏幕上的内容不同的内容。</li>\n<li><code class=\"language-text\">FCP</code>: First Contentful Paint，首次有内容的渲染是当浏览器渲染 DOM 第一块内容，第一次回馈用户页面正在载入。</li>\n<li><code class=\"language-text\">TTI</code>: Time to interactive 第一次可交互时间，此时用户可以真正的触发 DOM 元素的事件，和页面进行交互。</li>\n<li><code class=\"language-text\">FID</code>: First Input Delay 第一输入延迟测量用户首次与您的站点交互时的时间（即，当他们单击链接，点击按钮或使用自定义的 JavaScript 驱动控件时）到浏览器实际能够的时间回应这种互动。</li>\n<li><code class=\"language-text\">TTFB</code>: Time to First Byte 首字节时间，顾名思义，是指从客户端开始和服务端交互到服务端开始向客户端浏览器传输数据的时间（包括 DNS、socket 连接和请求响应时间），是能够反映服务端响应速度的重要指标。</li>\n</ol>\n<p>如果你还不太熟悉这些指标也没关系，接下来的内容中，会结合实际用例分析这些指标。</p>\n<h2 id=\"渲染开销-the-cost-of-rendering\"><a href=\"#%E6%B8%B2%E6%9F%93%E5%BC%80%E9%94%80-the-cost-of-rendering\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>渲染开销 The cost of rendering</h2>\n<h3 id=\"客户端渲染-client-side-rendering\"><a href=\"#%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%B8%B2%E6%9F%93-client-side-rendering\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>客户端渲染 Client-side rendering</h3>\n<p>从服务端获取 HTML、CSS、JavaScript 都是需要成本的，以一个 CSR（客户端渲染）的网站为例，客户端渲染的网站依赖框架库(bundle)、应用程序（app)来进行初始化渲染，假设它有 1MB 的 JavaScript Bundle 代码，那么只有当这一大段的代码加载并执行完成以后，用户才能看到页面。</p>\n<p>它的结构一般如下：</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8bd1b0712c454e97b6eb2ba3c5f2b658~tplv-k3u1fbpfcp-watermark.image\"></p>\n<p>分析一下它的流程：</p>\n<ol>\n<li>用户输入网址进入网站，拉取 HTML 资源。</li>\n</ol>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1c90c0d570364c91a0fe99aded1c4370~tplv-k3u1fbpfcp-watermark.image\"></p>\n<ol start=\"2\">\n<li>HTML 资源中发现 script 标签加载的 bundle 再一次发起请求拉取 bundle。此时也是性能统计指标中的 <code class=\"language-text\">FP</code> 完成。</li>\n</ol>\n<p>在这个阶段，页面基本上是没什么意义的，当然你也可以放置一些静态的骨架屏或者加载提示，来友好的提示用户。</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/464e3f1d4ba9468eb78953039c9fe640~tplv-k3u1fbpfcp-watermark.image\"></p>\n<ol start=\"3\">\n<li>JavaScript bundle 下载并执行完毕，此时页面才真正渲染出有意义的内容。对应 <code class=\"language-text\">FCP</code> 完成。</li>\n</ol>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fec883ea600a4f7a9469a974f48a0ef6~tplv-k3u1fbpfcp-watermark.image\"></p>\n<p>当框架对 DOM 节点添加各类事件绑定后，用户才真正可以和页面交互，此时也对应 <code class=\"language-text\">TTI</code> 完成。</p>\n<p>它的<strong>缺点</strong>在于，直到整个 JavaScript 依赖执行完成之前，用户都看不到什么有意义的内容。</p>\n<h3 id=\"服务端同构渲染-ssr-with-hydration\"><a href=\"#%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%90%8C%E6%9E%84%E6%B8%B2%E6%9F%93-ssr-with-hydration\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>服务端同构渲染 SSR with Hydration</h3>\n<p>基于以上客户端渲染的缺点以及用户对于 CSR 应用交互更加丰富的需求，于是诞生了集 SSR 和 CSR 的<strong>性能、SEO、数据获取</strong>的优点与一身的「<strong>同构渲染</strong>」，简单点说，就是：</p>\n<ol>\n<li>第一次请求，在服务端就利用框架提供的服务端渲染能力，直接原地请求数据，生成包含完整内容的 html 页面，用户不需要等待框架的 js 加载就可以看到内容。</li>\n<li>等到页面渲染后，再利用框架提供的 Hydration（注水）能力，让服务端返回的“干瘪”的 HTML 注册事件等等，变的丰富起来，拥有了各种事件后，就和传统 CSR 一样拥有了丰富多彩的客户端交互。</li>\n</ol>\n<p>在同构应用中，只要 HTML 页面返回，用户就可以看到丰富多彩的页面：</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/25347cfa3f164b928d4e4524adb26658~tplv-k3u1fbpfcp-watermark.image\"></p>\n<p>而 JavaScript 加载完毕后，用户就可以和这些内容进行交互（比如点击放大、跳转页面等等……）</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8699cbf1c2e94a53ae676b0df7988676~tplv-k3u1fbpfcp-watermark.image\"></p>\n<h3 id=\"代码对比\"><a href=\"#%E4%BB%A3%E7%A0%81%E5%AF%B9%E6%AF%94\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>代码对比</h3>\n<p>典型的 CSR React 应用的代码是这样的：</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0714c447f4844eb580ba28db8f4b2ed0~tplv-k3u1fbpfcp-watermark.image\"></p>\n<p>而 SSR 的代码则需要服务端的配合，</p>\n<p>先由服务端通过 <code class=\"language-text\">ReactDOMServer.renderToString</code> 在服务端把组件给序列化成 html 字符串，返回给前端：\n<img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2f2fe7ed202c4539905258f9c0774e3b~tplv-k3u1fbpfcp-watermark.image\"></p>\n<p>前端通过 <code class=\"language-text\">hydrate</code> 注水，使得功能交互变的完整：\n<img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2c9eb5a496b1460ea5aa6d915b85146e~tplv-k3u1fbpfcp-watermark.image\"></p>\n<p>Vue 的 SSR 也是同理：</p>\n<h3 id=\"同构的缺陷\"><a href=\"#%E5%90%8C%E6%9E%84%E7%9A%84%E7%BC%BA%E9%99%B7\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>同构的缺陷</h3>\n<p>至此看来，难道同构应用就是完美的吗？当然不是，其实普通的同构应用只是提升了 FCP 也就是用户看到内容的速度，但是却还是要等到框架代码下载完成，<code class=\"language-text\">hydrate</code> 注水完毕等一系列过程执行完毕以后才能真正的<strong>可交互</strong>。</p>\n<p>并且对于 <code class=\"language-text\">FID</code> 也就是 First Input Delay 第一输入延迟这个指标来说，由于 SSR 快速渲染出内容，更容易让用户误以为页面已经是可交互状态，反而会使「用户第一次点击 - 浏览器响应事件」 这个时间变得更久。</p>\n<p>因此，同构应用很可能变成一把「双刃剑」。</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/abbda5930e2d4b68a815f006ce2dde5c~tplv-k3u1fbpfcp-watermark.image\"></p>\n<p>下面我们来讨论一些方案。</p>\n<h2 id=\"pre-rendering-预渲染。\"><a href=\"#pre-rendering-%E9%A2%84%E6%B8%B2%E6%9F%93%E3%80%82\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Pre-rendering 预渲染。</h2>\n<p>对于不经常发生变化的内容来说，使用预渲染是一种很好的办法，它在代码构建时就通过框架能力生成好静态的 HTML 页面，而不是像同构应用那样在用户请求页面时再生成，这让它可以几乎立刻返回页面。</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/07afefd7e6fd49c1a5aaa6d303a9cc4b~tplv-k3u1fbpfcp-watermark.image\"></p>\n<p>当然它也有很大的限制：</p>\n<ol>\n<li>只适用于静态页面。</li>\n<li>需要提前列举出需要预渲染的 URLs。</li>\n</ol>\n<h2 id=\"流式渲染-streaming\"><a href=\"#%E6%B5%81%E5%BC%8F%E6%B8%B2%E6%9F%93-streaming\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>流式渲染 Streaming</h2>\n<p>流式渲染可以让服务端对大块的内容分片发送，使得客户端不需要完整的接收到 HTML，而是接受到第一部分时就开始渲染，这大大提升了 <code class=\"language-text\">TTFB</code> 首字节时间。</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0b06fd15df3a4c1ea6522f332b4fab51~tplv-k3u1fbpfcp-watermark.image\"></p>\n<p>在 React 中，可以通过 <code class=\"language-text\">renderToNodeStream</code> 来使用流式渲染：</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/401dd28293ec4cdf98eb5640dfe545e5~tplv-k3u1fbpfcp-watermark.image\"></p>\n<h2 id=\"渐进式注水-progressive-hydration\"><a href=\"#%E6%B8%90%E8%BF%9B%E5%BC%8F%E6%B3%A8%E6%B0%B4-progressive-hydration\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>渐进式注水 Progressive Hydration</h2>\n<p>我们知道 <code class=\"language-text\">hydrate</code> 的过程需要遍历整颗 React 节点树来添加事件，这在页面很大的情况下耗费的时间一定是很长的，我们能否先只对关键的部分，比如视图中可见的部分，进行「注水」，让这部分先一步可以进行交互？</p>\n<p>想象一下它的特点：</p>\n<ol>\n<li>组件级别的渐进式注水。</li>\n<li>服务端依旧整页渲染。</li>\n<li>页面可以根据优先级来分片“启动”组件。</li>\n</ol>\n<p>通过一张动图来直观的感受一下普通注水（左）和渐进式注水（右）的区别：</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/28225f2172f0411ab5974eea6c52623e~tplv-k3u1fbpfcp-watermark.image\"></p>\n<p>可以看到用户第一次可以交互的时间大大的提前了。</p>\n<p>光说不做假把式，我们看看用 React 完成这个功能的代码，首先我们需要准备一个组件 <code class=\"language-text\">Hydrator</code> 用来实现当某个组件<strong>进入视图范围以后</strong>再进行注水。</p>\n<p>首先来看看应用的整体结构：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">load</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./stream'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> Hydrator <span class=\"token operator\">=</span> ClientHydrator<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> window <span class=\"token operator\">===</span> <span class=\"token string\">'undefined'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  Hydrator <span class=\"token operator\">=</span> ServerHydrator<span class=\"token punctuation\">;</span>\n  <span class=\"token function-variable function\">load</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./stream'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>app<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Header</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Intro</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Hydrator</span> <span class=\"token attr-name\">load</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>load<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>根据客户端和服务端的环境区分使用不同的 <code class=\"language-text\">Hydrator</code>，在服务端就直接返回普通的 html 文本：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">interopDefault</span><span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>mod <span class=\"token operator\">&amp;&amp;</span> mod<span class=\"token punctuation\">.</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> mod<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">ServerHydrator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> load<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>props <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> Child <span class=\"token operator\">=</span> <span class=\"token function\">interopDefault</span><span class=\"token punctuation\">(</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>section</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Child</span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">...</span><span class=\"token attr-value\">props</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>section</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>而客户端，则需要实现渐进式注水的关键部分：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Hydrator</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>section</span>\n        <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>c <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root <span class=\"token operator\">=</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">dangerouslySetInnerHTML</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> __html<span class=\"token punctuation\">:</span> <span class=\"token string\">''</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">suppressHydrationWarning</span>\n      <span class=\"token punctuation\">/></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>首先 render 部分，利用 <code class=\"language-text\">dangerouslySetInnerHTML</code> 来使得这部分初始化为空的 html 文本，并且由于 server 端肯定还是和往常一样全量渲染内容，而客户端由于初始化需要先不做任何处理，会导致 React 内部对于服务端内容和客户端内容的「一致性检测」失败。</p>\n<p>而利用 <code class=\"language-text\">dangerouslySetInnerHTML</code> 的特性，会让 React 不再进一步 <code class=\"language-text\">hydrate</code> 遍历 <code class=\"language-text\">children</code> 而是直接沿用服务端渲染返回的 HTML，保证在注水前渲染的样式也是 OK 的。</p>\n<p>再利用 <code class=\"language-text\">suppressHydrationWarning</code> 取消 React 对于内容一致性检测失败的警告。</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Hydrator</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">IntersectionObserver</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>entry<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> obs<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>entry<span class=\"token punctuation\">.</span>isIntersecting<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n      obs<span class=\"token punctuation\">.</span><span class=\"token function\">unobserve</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> load<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>props <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> Child <span class=\"token operator\">=</span> <span class=\"token function\">interopDefault</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> <span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">hydrate</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Child</span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">...</span><span class=\"token attr-value\">props</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>section</span>\n        <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>c <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root <span class=\"token operator\">=</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">dangerouslySetInnerHTML</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> __html<span class=\"token punctuation\">:</span> <span class=\"token string\">''</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">suppressHydrationWarning</span>\n      <span class=\"token punctuation\">/></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>接下来，组件在客户端初始化的时候，利用 <code class=\"language-text\">IntersectionObserver</code> 监控组件元素是否进入视图，一旦进入视图了，才会动态的去 <code class=\"language-text\">import</code> 组件，并且利用 <code class=\"language-text\">ReactDOM.hydrate</code> 来真正的进行注水。</p>\n<p>此时不光注水是动态化的，包括组件代码的下载都会在组件进入视图时才发生，真正做到了「按需加载」。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7874c6f5d7284fd990ad0cd596e91a22~tplv-k3u1fbpfcp-watermark.image\"></p>\n<p>动图中紫色动画出现，就说明渐进式 <code class=\"language-text\">hydrate</code> 完成了。</p>\n<p>对比一下全量注水和渐进式注水的性能会发现首次可交互的时间被大大提前了：</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8e9a5e5a9b274d5fb4703cec07b66bac~tplv-k3u1fbpfcp-watermark.image\"></p>\n<p>当然，我们了解原理就发现，不光可以通过监听组件进入视图来 <code class=\"language-text\">hydrate</code>，甚至可以通过 <code class=\"language-text\">hover</code>、<code class=\"language-text\">click</code> 等时机来触发，根据业务需求的不同而灵活调整吧。</p>\n<p>可以访问图片中的网址获取你喜欢的框架在这方面的相关文章：</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4f9b465601214edcb485a7d393ba572f~tplv-k3u1fbpfcp-watermark.image\"></p>\n<h2 id=\"总结\"><a href=\"#%E6%80%BB%E7%BB%93\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>总结</h2>\n<p>本文通过总结了 <a href=\"https://www.youtube.com/watch?v=k-A2VfuUROg&#x26;feature=youtu.be&#x26;t=1036\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Rendering on the Web: Performance Implications of Application Architecture (Google I/O ’19)</a> 这段 Google 团队的精彩演讲，来介绍了现代应用架构体系中的优化手段，包括：</p>\n<ul>\n<li>预渲染</li>\n<li>同构渲染</li>\n<li>流式渲染</li>\n<li>渐进式注水</li>\n</ul>\n<p>在不同的业务场景下选择对应的优化手段，是一名优秀的前端工程师必备的技能，相信看完这篇文章的你一定有所收获。</p>\n<p>本文 demo 地址：<a href=\"https://github.com/GoogleChromeLabs/progressive-rendering-frameworks-samples\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/GoogleChromeLabs/progressive-rendering-frameworks-samples</a></p>","timeToRead":9,"frontmatter":{"title":"Web 现代应用程序架构下的性能优化，渐进式的极致艺术。","date":"November 19, 2020","spoiler":""},"fields":{"slug":"/746449487/","langKey":"en"}}},"pageContext":{"slug":"/746449487/","previous":{"fields":{"slug":"/744482423/","langKey":"en","directoryName":"744482423"},"frontmatter":{"title":"字节跳动招人啦"}},"next":{"fields":{"slug":"/751261724/","langKey":"en","directoryName":"751261724"},"frontmatter":{"title":"react-dev-inspector 原理解析，点击页面组件自动打开 VSCode 对应文件？"}},"translations":[],"translatedLinks":[]}},"staticQueryHashes":["336482444"]}