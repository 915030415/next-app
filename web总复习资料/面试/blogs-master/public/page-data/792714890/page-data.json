{"componentChunkName":"component---src-templates-blog-post-js","path":"/792714890/","result":{"data":{"site":{"siteMetadata":{"title":"ssh的博客","author":"ssh"}},"markdownRemark":{"id":"e4a83abb-0ddd-5f7a-88ac-e617deafde21","html":"<h2 id=\"前言\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>最近在业务的开发中，业务方需要我们性能监控平台提供火焰图来展示函数堆栈以及相关的耗时信息。</p>\n<p>根据 Brendan Gregg 在 <a href=\"http://www.brendangregg.com/flamegraphs.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">FlameGraph</a> 主页中的定义：</p>\n<blockquote>\n<p>Flame graphs are a visualization of profiled software, allowing the most frequent code-paths to be identified quickly and accurately</p>\n<p>火焰图是一种可视化分析软件，让我们可以快速准确的发现调用频繁的函数堆栈。</p>\n</blockquote>\n<p>可以在这里查看<a href=\"http://www.brendangregg.com/FlameGraphs/cpu-mysql-updated.svg\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">火焰图的示例</a>。</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/aeb03bd78dea469f845a922df5bde922~tplv-k3u1fbpfcp-watermark.image\"></p>\n<p>其实不光是调用频率，火焰图也同样适合描述函数调用的堆栈以及耗时频率，比如 Chrome DevTools 中的火焰图：</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2efa3db5ca234327aac18adf439bdaea~tplv-k3u1fbpfcp-watermark.image\"></p>\n<p>其实根节点在顶部，叶子节点在底部的这种图形称为 Icicle charts（冰柱图）更合适，不过为了理解方便，下文还是统一称为火焰图。</p>\n<p>本文想要分析的源码并不是上面的任意一种，而是 React 浏览器插件中使用的火焰图组件，它是由 React 官方成员 Brian Vaughn 开发的 <a href=\"react-flame-graph\">react-flame-graph</a>。</p>\n<h2 id=\"本地调试\"><a href=\"#%E6%9C%AC%E5%9C%B0%E8%B0%83%E8%AF%95\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>本地调试</h2>\n<p>这个库是由 rollup 负责构建，而 <a href=\"https://react-flame-graph.now.sh/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">react-flame-graph 的示例网站</a> 则是用 webpack 构建。</p>\n<p>所以本地想要调试的话，clone 这个库以后：</p>\n<ol>\n<li>分别在根目录和 website 目录安装依赖。</li>\n<li>在根目录执行 <code class=\"language-text\">npm link</code> 链接到全局，再去 <code class=\"language-text\">website</code> 目录 <code class=\"language-text\">npm link react-flame-graph</code> 建立软链接。</li>\n<li>在根目录执行 <code class=\"language-text\">npm run start</code> 开启 rollup 的 watch 编译模式。</li>\n<li>在 website 目录执行 <code class=\"language-text\">npm run start</code> 开启 webpack dev 模式，进入示例网站调试。</li>\n</ol>\n<p>由于这个库比较老，最好用 nrm 把 node 版本调整到 10.15.0，我是在这个版本下成功安装了依赖。</p>\n<p>先来简单看一下火焰图的效果：</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/95968bf94b864f92b4da3e5fdb8b241e~tplv-k3u1fbpfcp-watermark.image\"></p>\n<h2 id=\"组件揭秘\"><a href=\"#%E7%BB%84%E4%BB%B6%E6%8F%AD%E7%A7%98\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>组件揭秘</h2>\n<h3 id=\"使用\"><a href=\"#%E4%BD%BF%E7%94%A8\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>使用</h3>\n<p>想要使用这个组件，必须传入的数据是 <code class=\"language-text\">width</code> 和 <code class=\"language-text\">data</code>，</p>\n<p><code class=\"language-text\">width</code> 是指整个火焰图容器的宽度，后续计算每个的宽度都需要用到。</p>\n<p><code class=\"language-text\">data</code> 格式则是树形结构：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> simpleData <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token string\">'foo'</span><span class=\"token punctuation\">,</span>\n  value<span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\n  children<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      name<span class=\"token punctuation\">:</span> <span class=\"token string\">'custom tooltip'</span><span class=\"token punctuation\">,</span>\n      value<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      tooltip<span class=\"token punctuation\">:</span> <span class=\"token string\">'Custom tooltip shown on hover'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      name<span class=\"token punctuation\">:</span> <span class=\"token string\">'custom background color'</span><span class=\"token punctuation\">,</span>\n      value<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n      backgroundColor<span class=\"token punctuation\">:</span> <span class=\"token string\">'#35f'</span><span class=\"token punctuation\">,</span>\n      color<span class=\"token punctuation\">:</span> <span class=\"token string\">'#fff'</span><span class=\"token punctuation\">,</span>\n      children<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n          name<span class=\"token punctuation\">:</span> <span class=\"token string\">'leaf'</span><span class=\"token punctuation\">,</span>\n          value<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>除了标准树的 <code class=\"language-text\">name</code>, <code class=\"language-text\">children</code> 外，这里还有一个必须的属性 <code class=\"language-text\">value</code>，根据每一层的 <code class=\"language-text\">value</code> 也就决定了每一个火焰图块的宽度。</p>\n<p>比如这个数据的宽度树是</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">width: 5\n - width 1\n - width 3\n  - width 2</code></pre></div>\n<p>那么生成的火焰图也会遵循这个宽度比例：</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a32cae63e1454ce2bb017b1e590f4207~tplv-k3u1fbpfcp-watermark.image\"></p>\n<p>而在业务场景中，这里一般每个矩形块对应一次函数调用，它会统计到总耗时，这个值就可以用作为 <code class=\"language-text\">value</code>。</p>\n<h3 id=\"数据转换\"><a href=\"#%E6%95%B0%E6%8D%AE%E8%BD%AC%E6%8D%A2\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>数据转换</h3>\n<p>这个组件的第一步，是把这份递归的数据转化为拉平的数组。</p>\n<p>递归数据虽然比较直观的展示了层级，但是用作渲染却比较麻烦。</p>\n<p>整个火焰图的渲染，其实就是每个<strong>层级</strong>对应的<strong>所有矩形块</strong>逐行渲染而已，所以平级的数组更适合。</p>\n<p>我们的目标是把数据整理成这样的结构：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">levels<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"_0\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"_1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"_2\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"_3\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\nnodes<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n  _0<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> width<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> depth<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">,</span> …<span class=\"token punctuation\">}</span>\n  _1<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> width<span class=\"token punctuation\">:</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> depth<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"custom tooltip\"</span><span class=\"token punctuation\">,</span> …<span class=\"token punctuation\">}</span>\n  _2<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> width<span class=\"token punctuation\">:</span> <span class=\"token number\">0.6</span><span class=\"token punctuation\">,</span> depth<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">:</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"custom background color\"</span><span class=\"token punctuation\">,</span> …<span class=\"token punctuation\">}</span>\n  _3<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> width<span class=\"token punctuation\">:</span> <span class=\"token number\">0.4</span><span class=\"token punctuation\">,</span> depth<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">:</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"leaf\"</span><span class=\"token punctuation\">,</span> …<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>一目了然，<code class=\"language-text\">levels</code> 对应层级关系和每层的节点 id，<code class=\"language-text\">nodes</code> 则是 id 所对应的节点数据。</p>\n<p>其实这一步很关键，这个数据基本把渲染的层级和样式决定好了。</p>\n<p>这里的 <code class=\"language-text\">nodes</code> 中的 <code class=\"language-text\">width</code> 经过了 <code class=\"language-text\">width: value / maxValue</code> 这样的处理，而 <code class=\"language-text\">maxValue</code> 其实就是根节点定义的那个 <code class=\"language-text\">width</code>，本例中对应数值为 <code class=\"language-text\">5</code>，所以：</p>\n<ul>\n<li>第一层的节点宽度是 <code class=\"language-text\">5 / 5 = 1</code></li>\n<li>第二层的节点的宽度自然就是 <code class=\"language-text\">1 / 5 = 0.2</code>， <code class=\"language-text\">3 / 5 = 0.6</code>。</li>\n</ul>\n<p>在这里处理的好处是渲染的时候可以直接通过和火焰图容器的宽度，也就是真实 dom 节点的宽度相乘，得到矩形块真实宽度。</p>\n<p>转换部分其实就是一次递归，代码如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">transformChartData</span><span class=\"token punctuation\">(</span>rawData<span class=\"token punctuation\">:</span> RawData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> ChartData <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> uidCounter <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> maxValue <span class=\"token operator\">=</span> rawData<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> nodes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> levels <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">convertNode</span><span class=\"token punctuation\">(</span>\n    sourceNode<span class=\"token punctuation\">:</span> RawData<span class=\"token punctuation\">,</span>\n    depth<span class=\"token punctuation\">:</span> number<span class=\"token punctuation\">,</span>\n    leftOffset<span class=\"token punctuation\">:</span> number\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> ChartNode <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n      backgroundColor<span class=\"token punctuation\">,</span>\n      children<span class=\"token punctuation\">,</span>\n      color<span class=\"token punctuation\">,</span>\n      id<span class=\"token punctuation\">,</span>\n      name<span class=\"token punctuation\">,</span>\n      tooltip<span class=\"token punctuation\">,</span>\n      value<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> sourceNode<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> uidOrCounter <span class=\"token operator\">=</span> id <span class=\"token operator\">||</span> <span class=\"token template-string\"><span class=\"token string\">`_</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>uidCounter<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 把这个 node 放到 map 中</span>\n    <span class=\"token keyword\">const</span> targetNode <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>nodes<span class=\"token punctuation\">[</span>uidOrCounter<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      backgroundColor<span class=\"token punctuation\">:</span>\n        backgroundColor <span class=\"token operator\">||</span> <span class=\"token function\">getNodeBackgroundColor</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> maxValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      color<span class=\"token punctuation\">:</span> color <span class=\"token operator\">||</span> <span class=\"token function\">getNodeColor</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> maxValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      depth<span class=\"token punctuation\">,</span>\n      left<span class=\"token punctuation\">:</span> leftOffset<span class=\"token punctuation\">,</span>\n      name<span class=\"token punctuation\">,</span>\n      source<span class=\"token punctuation\">:</span> sourceNode<span class=\"token punctuation\">,</span>\n      tooltip<span class=\"token punctuation\">,</span>\n      <span class=\"token comment\">// width 属性是（当前节点 value / 根元素的 value）</span>\n      width<span class=\"token punctuation\">:</span> value <span class=\"token operator\">/</span> maxValue<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 记录每个 level 对应的 uid 列表</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>levels<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;=</span> depth<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      levels<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    levels<span class=\"token punctuation\">[</span>depth<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>uidOrCounter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 把全局的 UID 计数器 + 1</span>\n    uidCounter<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>children<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      children<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>sourceChildNode <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 进一步递归</span>\n        <span class=\"token keyword\">const</span> targetChildNode <span class=\"token operator\">=</span> <span class=\"token function\">convertNode</span><span class=\"token punctuation\">(</span>\n          sourceChildNode<span class=\"token punctuation\">,</span>\n          depth <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n          leftOffset\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        leftOffset <span class=\"token operator\">+=</span> targetChildNode<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> targetNode<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">convertNode</span><span class=\"token punctuation\">(</span>rawData<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> rootUid <span class=\"token operator\">=</span> rawData<span class=\"token punctuation\">.</span>id <span class=\"token operator\">||</span> <span class=\"token string\">'_0'</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    height<span class=\"token punctuation\">:</span> levels<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span>\n    levels<span class=\"token punctuation\">,</span>\n    nodes<span class=\"token punctuation\">,</span>\n    root<span class=\"token punctuation\">:</span> rootUid<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"渲染列表\"><a href=\"#%E6%B8%B2%E6%9F%93%E5%88%97%E8%A1%A8\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>渲染列表</h2>\n<p>转换好数据结构后，就要开始渲染部分了。这里作者 Brian Vaughn 用了他写的 React 虚拟滚动库 <a href=\"https://github.com/bvaughn/react-window\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">react-window</a> 去优化长列表的性能。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// FlamGraph.js</span>\n<span class=\"token keyword\">const</span> itemData <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getItemData</span><span class=\"token punctuation\">(</span>\n  data<span class=\"token punctuation\">,</span>\n  focusedNode<span class=\"token punctuation\">,</span>\n  <span class=\"token operator\">...</span><span class=\"token punctuation\">,</span>\n  width\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n<span class=\"token operator\">&lt;</span>List\n  height<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>height<span class=\"token punctuation\">}</span>\n  innerTagName<span class=\"token operator\">=</span><span class=\"token string\">\"svg\"</span>\n  itemCount<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">}</span>\n  itemData<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>itemData<span class=\"token punctuation\">}</span>\n  itemSize<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>rowHeight<span class=\"token punctuation\">}</span>\n  width<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>width<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">{</span>ItemRenderer<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>List<span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>这里需要注意的是把外部传入的一些数据整合成了虚拟列表组件所需要的 itemData，方法如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> memoize <span class=\"token keyword\">from</span> <span class=\"token string\">'memoize-one'</span><span class=\"token punctuation\">;</span>\n\ngetItemData <span class=\"token operator\">=</span> <span class=\"token function\">memoize</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span>\n    data<span class=\"token punctuation\">:</span> ChartData<span class=\"token punctuation\">,</span>\n    disableDefaultTooltips<span class=\"token punctuation\">:</span> boolean<span class=\"token punctuation\">,</span>\n    focusedNode<span class=\"token punctuation\">:</span> ChartNode<span class=\"token punctuation\">,</span>\n    focusNode<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>uid<span class=\"token punctuation\">:</span> any<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">,</span>\n    handleMouseEnter<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">:</span> SyntheticMouseEvent<span class=\"token operator\">&lt;</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">:</span> RawData<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">,</span>\n    handleMouseLeave<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">:</span> SyntheticMouseEvent<span class=\"token operator\">&lt;</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">:</span> RawData<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">,</span>\n    handleMouseMove<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">:</span> SyntheticMouseEvent<span class=\"token operator\">&lt;</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">:</span> RawData<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">,</span>\n    width<span class=\"token punctuation\">:</span> number\n  <span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      data<span class=\"token punctuation\">,</span>\n      disableDefaultTooltips<span class=\"token punctuation\">,</span>\n      focusedNode<span class=\"token punctuation\">,</span>\n      focusNode<span class=\"token punctuation\">,</span>\n      handleMouseEnter<span class=\"token punctuation\">,</span>\n      handleMouseLeave<span class=\"token punctuation\">,</span>\n      handleMouseMove<span class=\"token punctuation\">,</span>\n      scale<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">/</span> focusedNode<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> width<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">:</span> ItemData<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">memoize-one</code> 是一个用来做函数缓存的库，它的作用是传入的参数不发生改变的情况下，直接返回上一次计算的值。</p>\n<p>对于新版的 React 来说，直接用 <code class=\"language-text\">useMemo</code> 配合依赖也可以达到类似的效果。</p>\n<p>这里就是简单的把数据保存了一下，唯一不同的就是新定义了一个方法 <code class=\"language-text\">scale</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">scale<span class=\"token punctuation\">:</span> value <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">/</span> focusedNode<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> width<span class=\"token punctuation\">,</span></code></pre></div>\n<p>它是负责计算真实 DOM 宽度的，所有节点的宽度都会参照 <code class=\"language-text\">focuesdNode</code> 的宽度再乘以火焰图容易的真实 DOM 宽度来计算。</p>\n<p>所以点击了某个节点<strong>聚焦它</strong>后，它的子节点宽度也会发生变化。</p>\n<p><code class=\"language-text\">focuesdNode</code>为根节点时：</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4e6a2d63600b47ae8e1e76ffd57ca10e~tplv-k3u1fbpfcp-watermark.image\"></p>\n<p>点击 <code class=\"language-text\">custom background color</code> 这个节点后：</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dfef3b6facce484594e064c6567f227a~tplv-k3u1fbpfcp-watermark.image\"></p>\n<p>这里 children 的位置用花括号的方式放了一个组件引用 <code class=\"language-text\">ItemRenderer</code>，其实这是 render props 的用法，相当于：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>List<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">{</span>props <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>ItemRenderer <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>List<span class=\"token operator\">></span></code></pre></div>\n<p>而 <code class=\"language-text\">ItemRenderer</code> 组件其实就负责通过数据来渲染每一行的矩形块，由于数据中有 3 层 <code class=\"language-text\">level</code>，所以这个组件会被调用 3 次。</p>\n<p>每一次都可以拿到对应层级的 <code class=\"language-text\">uids</code>，通过 <code class=\"language-text\">uid</code> 又可以拿到 <code class=\"language-text\">node</code> 相关的信息，完成渲染。</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// ItemRenderer</span>\n<span class=\"token keyword\">const</span> focusedNodeLeft <span class=\"token operator\">=</span> <span class=\"token function\">scale</span><span class=\"token punctuation\">(</span>focusedNode<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> focusedNodeWidth <span class=\"token operator\">=</span> <span class=\"token function\">scale</span><span class=\"token punctuation\">(</span>focusedNode<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> top <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>style<span class=\"token punctuation\">.</span>top<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> uids <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>levels<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">return</span> uids<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>uid<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>nodes<span class=\"token punctuation\">[</span>uid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> nodeLeft <span class=\"token operator\">=</span> <span class=\"token function\">scale</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> nodeWidth <span class=\"token operator\">=</span> <span class=\"token function\">scale</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 太小的矩形块不渲染</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nodeWidth <span class=\"token operator\">&lt;</span> minWidthToDisplay<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 超出视图的部分就直接不渲染了</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n    nodeLeft <span class=\"token operator\">+</span> nodeWidth <span class=\"token operator\">&lt;</span> focusedNodeLeft <span class=\"token operator\">||</span>\n    nodeLeft <span class=\"token operator\">></span> focusedNodeLeft <span class=\"token operator\">+</span> focusedNodeWidth\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>LabeledRect</span>\n      <span class=\"token attr-name\">...</span>\n      <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> itemData<span class=\"token punctuation\">.</span><span class=\"token function\">focusNode</span><span class=\"token punctuation\">(</span>uid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">x</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>nodeLeft <span class=\"token operator\">-</span> focusedNodeLeft<span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">y</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>top<span class=\"token punctuation\">}</span></span>\n    <span class=\"token punctuation\">/></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>这里所有的数值量都是通过 <code class=\"language-text\">scale</code> 根据容器宽度算出来的真实 DOM 宽度。</p>\n<p>这里计算偏移量比较巧妙的点在于，最终传递给矩形块组件<code class=\"language-text\">LabeledRect</code>的 <code class=\"language-text\">x</code> 也就是横轴的偏移量，是根据 <code class=\"language-text\">focusedNode</code> 的 <code class=\"language-text\">left</code> 值计算出来的。</p>\n<p>如果父节点被 <code class=\"language-text\">focus</code> 后，它是占据整行的，子节点的 <code class=\"language-text\">x</code> 也会紧随父节点偏移到最左边去。</p>\n<p>比如这个图中聚焦的节点是 <code class=\"language-text\">foo</code>，那么最底下的 <code class=\"language-text\">leaf</code> 节点计算偏移量时，<code class=\"language-text\">focusedNodeLeft</code> 就是 0，它的偏移量就保持自身的 <code class=\"language-text\">left</code> 不变。</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4e6a2d63600b47ae8e1e76ffd57ca10e~tplv-k3u1fbpfcp-watermark.image\"></p>\n<p>而聚焦的节点变成 <code class=\"language-text\">custom background color</code> 时，由于聚焦节点的 left 是 200，所以 <code class=\"language-text\">leaf</code> 节点也会左移 200 像素。</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dfef3b6facce484594e064c6567f227a~tplv-k3u1fbpfcp-watermark.image\"></p>\n<p>也许有同学会疑惑，在 <code class=\"language-text\">custom background color</code> 聚焦时，它的父节点 <code class=\"language-text\">foo</code> 节点本身偏移量就是 0 了，再减去 200，不是成负数了嘛，那能父节点的矩形块保证占据一整行吗？</p>\n<p>这里再回顾 <code class=\"language-text\">scale</code> 的逻辑：<code class=\"language-text\">value =&gt; (value / focusedNode.width) * width</code>，计算父节点的宽度时是 <code class=\"language-text\">scale(父节点的宽度)</code>，而此时父节点的 <code class=\"language-text\">width</code> 是大于聚焦的节点的，所以最终的宽度能保证在偏移一定程度的负数时，父节点还是占满整行。</p>\n<p>最后 <code class=\"language-text\">LabeledRect</code> 就是用 svg 渲染出矩形，没什么特殊的。</p>\n<h2 id=\"总结\"><a href=\"#%E6%80%BB%E7%BB%93\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>总结</h2>\n<p>看似复杂的火焰图，在设计了良好的数据结构以及组件结构以后，一层层梳理下来，其实也并不难。</p>","timeToRead":8,"frontmatter":{"title":"React Core Team 成员开发的火焰图组件技术揭秘。","date":"January 24, 2021","spoiler":""},"fields":{"slug":"/792714890/","langKey":"en"}}},"pageContext":{"slug":"/792714890/","previous":{"fields":{"slug":"/777786151/","langKey":"en","directoryName":"777786151"},"frontmatter":{"title":"Facebook 重构：抛弃 Sass / Less ，迎接原子化 CSS 时代"}},"next":{"fields":{"slug":"/802370341/","langKey":"en","directoryName":"802370341"},"frontmatter":{"title":"Vuex 4.0 正式发布！新年官方生态齐聚一堂"}},"translations":[],"translatedLinks":[]}},"staticQueryHashes":["336482444"]}