{"componentChunkName":"component---src-templates-blog-post-js","path":"/494956890/","result":{"data":{"site":{"siteMetadata":{"title":"ssh的博客","author":"ssh"}},"markdownRemark":{"id":"796204b2-6069-59d6-90f3-2ab9aa8dd10a","html":"<p>相信有不少小伙伴和我一样用github issues记录自己的blog，但是久而久之也发现了一些小问题，比如</p>\n<ul>\n<li>国内访问速度比较慢</li>\n<li>不能自定义主题样式等等</li>\n<li>不能在博客中加入自己想要的功能</li>\n</ul>\n<p>正好最近又在学nextjs，react做ssr的神器，nextjs提供了<code class=\"language-text\">next export</code>这个命令，如果不熟悉next小伙伴可以先去官网阅读一下<br>\n<a href=\"https://nextjs.org/docs#static-html-export\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://nextjs.org/docs#static-html-export</a></p>\n<p>nextjs的教程，推荐一下技术胖的免费视频教程<br>\n<a href=\"http://jspang.com/posts/2019/09/01/react-nextjs.html#p02%EF%BC%9Acreact-next-app%E5%BF%AB%E9%80%9F%E5%88%9B%E5%BB%BAnext-js%E9%A1%B9%E7%9B%AE\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://jspang.com/posts/2019/09/01/react-nextjs.html#p02%EF%BC%9Acreact-next-app%E5%BF%AB%E9%80%9F%E5%88%9B%E5%BB%BAnext-js%E9%A1%B9%E7%9B%AE</a></p>\n<p>这个命令可以把react项目导出成静态html页面，这样在性能和seo方面考虑都是最优解。配合这个命令我就有了个折腾的想法，能不能把github issues导入到项目里，然后配合这个命令生成我的静态html博客呢。</p>\n<h2 id=\"目标\"><a href=\"#%E7%9B%AE%E6%A0%87\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>目标</h2>\n<p>配合nextjs实现一个命令把自己的github issues里的文章导出成自己的博客html页面。\n这样的好处是</p>\n<ul>\n<li>可以折腾</li>\n<li>可以折腾</li>\n<li>可以折腾</li>\n</ul>\n<p>开玩笑的，真正的好处是</p>\n<ul>\n<li>编写博客时可以利用github完善的编辑器。</li>\n<li>可以把github issues作为自己的数据存储服务，不用担心数据丢失和维护。</li>\n<li>可以在自己的博客内加入自己想要的任何功能。</li>\n<li>可以利用react的完整能力，完善的第三方生态。</li>\n<li>生成的博客是html格式的页面，回归原始，回归本心，seo和性能最优化。</li>\n</ul>\n<h2 id=\"尝鲜使用\"><a href=\"#%E5%B0%9D%E9%B2%9C%E4%BD%BF%E7%94%A8\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>尝鲜使用</h2>\n<h3 id=\"项目地址\"><a href=\"#%E9%A1%B9%E7%9B%AE%E5%9C%B0%E5%9D%80\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>项目地址</h3>\n<p><a href=\"https://github.com/sl1673495/next-blog\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/sl1673495/next-blog</a> 先clone到本地。</p>\n<h3 id=\"运行\"><a href=\"#%E8%BF%90%E8%A1%8C\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>运行</h3>\n<p>安装依赖：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">yarn</code></pre></div>\n<p>开发环境：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">yarn dev</code></pre></div>\n<p>导出博客(会放在out目录下，导出后请进入out目录后启动anywhere或者http-server类似的静态服务然后访问)：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">yarn all</code></pre></div>\n<h3 id=\"说明\"><a href=\"#%E8%AF%B4%E6%98%8E\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>说明</h3>\n<p>只需要在config.js里改掉repo的owner和name两个字段，<br>\n分别对应你的github用户名和博客仓库名，<br>\n然后执行<code class=\"language-text\">yarn all</code>，<br>\n就可以在out目录下生成静态博客目录。\nconfig中填写client<em>id和client</em>secret可以用于取消请求限制。</p>\n<h3 id=\"（可选）使用now部署\"><a href=\"#%EF%BC%88%E5%8F%AF%E9%80%89%EF%BC%89%E4%BD%BF%E7%94%A8now%E9%83%A8%E7%BD%B2\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>（可选）使用<a href=\"https://zeit.co/home\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">now</a>部署</h3>\n<p>进入out目录，然后执行<code class=\"language-text\">now</code>，页面就会自动部署了。</p>\n<h2 id=\"预览地址\"><a href=\"#%E9%A2%84%E8%A7%88%E5%9C%B0%E5%9D%80\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>预览地址</h2>\n<p>对应的github博客: <a href=\"https://github.com/sl1673495/blogs/issues\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/sl1673495/blogs/issues</a> </p>\n<p>自动生成的博客  <a href=\"http://blog.shanshihao.cn\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://blog.shanshihao.cn</a>  </p>\n<p>可以先访问一下生成博客的效果，可以看到静态html页面的速度是非常快的，体验在某些方面可以说比起spa和ssr都要好。  </p>\n<h2 id=\"代码解析\"><a href=\"#%E4%BB%A3%E7%A0%81%E8%A7%A3%E6%9E%90\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>代码解析</h2>\n<p>想要实现上面所说的功能，需要先把功能拆解一下。</p>\n<ol>\n<li>发起请求拉取自己github仓库里的博客，获取文章存成md格式在本地。</li>\n<li>根据nextjs的约定，把生成的md文章改写成jsx，写入到pages目录下。（这样nextjs就会识别成为一个个路由）</li>\n<li>根据自定的规则生成首页jsx，写入pages文件夹。</li>\n<li>使用next export导出博客。</li>\n</ol>\n<p>首先先用next脚手架生成一个项目，然后在项目下建立builder文件夹，用来编写逻辑。</p>\n<h3 id=\"全局配置\"><a href=\"#%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AE\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>全局配置</h3>\n<p>全局的一些配置我放在了config.js中，拉取我项目的小伙伴只需要更改里面的配置，就可以一键生成你自己的静态博客了。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> mdDir <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'./md'</span><span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  mdDir<span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 用于更改标题上的用户信息</span>\n  user<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">'ssh'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 用于同步github的博客</span>\n  repo<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    owner<span class=\"token punctuation\">:</span> <span class=\"token string\">'sl1673495'</span><span class=\"token punctuation\">,</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">'blogs'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 可选 如果申请了github Oauth app的话</span>\n  <span class=\"token comment\">// 可以填写用于取消github请求限制</span>\n  client_id<span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n  client_secret<span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">repo</code>字段中的信息决定了请求会去哪个仓库下拉取issues生成博客，<code class=\"language-text\">user</code>下的字段定义了首页显示的用户名，<code class=\"language-text\">client_id</code>和<code class=\"language-text\">client_secret</code>的作用后面会讲。</p>\n<h3 id=\"同步博客\"><a href=\"#%E5%90%8C%E6%AD%A5%E5%8D%9A%E5%AE%A2\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>同步博客</h3>\n<p>builder/sync.js  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * 同步github上的blogs\n */</span>\n<span class=\"token keyword\">const</span> axios <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'axios'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> rebuild <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./utils'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n  repo<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> owner<span class=\"token punctuation\">,</span> name <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> mdDir<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../config'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">GITHUB_BASE_URL</span> <span class=\"token operator\">=</span> <span class=\"token string\">'https://api.github.com'</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 清空md文件夹</span>\n  <span class=\"token function\">rebuild</span><span class=\"token punctuation\">(</span>mdDir<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 请求github博客内容</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data<span class=\"token punctuation\">:</span> blogs <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> axios<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span>\n      <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">GITHUB_BASE_URL</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/repos/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>owner<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/issues`</span></span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// 创建md文件</span>\n    blogs<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>blog<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      fs<span class=\"token punctuation\">.</span><span class=\"token function\">writeFileSync</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>mdDir<span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>blog<span class=\"token punctuation\">.</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.md`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> blog<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">,</span> <span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> blogs\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'仓库拉取失败，请检查您的用户名和仓库名'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">throw</span> e\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>其中rebuild函数就是用node的fs模块把文件夹删除再重新创建，</p>\n<p>这个函数的作用就是把github仓库里的issues拉取下来，并且写入到我们自己定义的存放md的文件夹中。  </p>\n<h3 id=\"把博客转为jsx写入pages目录\"><a href=\"#%E6%8A%8A%E5%8D%9A%E5%AE%A2%E8%BD%AC%E4%B8%BAjsx%E5%86%99%E5%85%A5pages%E7%9B%AE%E5%BD%95\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>把博客转为jsx写入pages目录</h3>\n<p>builder/page-builder.js</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * 生成nextjs识别的pages\n */</span>\n<span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> MarkdownIt <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'markdown-it'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> axios <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'axios'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n  mdDir<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../config'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> rebuild<span class=\"token punctuation\">,</span> copyFolder <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./utils'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> md <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MarkdownIt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  html<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  linkify<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleMarkdownBody</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">encodeURIComponent</span><span class=\"token punctuation\">(</span>md<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> pageTemplateDir <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'../pages-template'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> pageDir <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'./pages'</span><span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>blogs<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 清空pages文件夹</span>\n  <span class=\"token function\">rebuild</span><span class=\"token punctuation\">(</span>pageDir<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// 把pages-template目录的模板拷贝到pages下</span>\n  <span class=\"token keyword\">await</span> <span class=\"token function\">copyFolder</span><span class=\"token punctuation\">(</span>pageTemplateDir<span class=\"token punctuation\">,</span> pageDir<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 读取md文件夹下的所有md文件的名字（其实就是issue的id）</span>\n  <span class=\"token keyword\">const</span> mdPaths <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readdirSync</span><span class=\"token punctuation\">(</span>mdDir<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> convertMdToJSX <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>mdPath<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> mdContent <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>mdDir<span class=\"token punctuation\">,</span> mdPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// pages下的页面根据id命名</span>\n    <span class=\"token keyword\">const</span> mdId <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>mdPath<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.md'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> blog <span class=\"token operator\">=</span> blogs<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> id <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> id <span class=\"token operator\">===</span> mdId<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>blog<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// body已经在md文件夹内了 不需要了</span>\n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> body<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>restBlog <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> blog\n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> comments_url <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> restBlog\n\n      <span class=\"token comment\">// 获取评论信息</span>\n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data<span class=\"token punctuation\">:</span> comments <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> axios<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span>comments_url<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'评论生成失败，'</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n      <span class=\"token comment\">// 处理评论的markdown文本 并且写入到html字段中</span>\n      comments<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> body<span class=\"token punctuation\">:</span> commentBody <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> commentHtml <span class=\"token operator\">=</span> <span class=\"token function\">handleMarkdownBody</span><span class=\"token punctuation\">(</span>commentBody<span class=\"token punctuation\">)</span>\n        comments<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>html <span class=\"token operator\">=</span> commentHtml\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n      <span class=\"token comment\">// 页面的jsx</span>\n      <span class=\"token keyword\">const</span> pageContent <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token string\">`\n      import Page from '../components/Page'\n\n      const pageProps = {\n        blog: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>restBlog<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">,\n        comments: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>comments<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">,\n        html: \\`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">handleMarkdownBody</span><span class=\"token punctuation\">(</span>mdContent<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\\`,\n      }\n\n      export default () => &lt;Page {...pageProps}/>\n    `</span></span>\n      <span class=\"token comment\">// 写入文件</span>\n      fs<span class=\"token punctuation\">.</span><span class=\"token function\">writeFileSync</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>pageDir<span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>mdId<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.jsx`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> pageContent<span class=\"token punctuation\">,</span> <span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> tasks <span class=\"token operator\">=</span> mdPaths<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>convertMdToJSX<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">await</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>tasks<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这个函数需要接受我们刚刚请求到的issues数据，用来生成标题，因为在上一步中使用了issue的id去命名博客，所以可以在这一步中读取md文件夹下的所有issue id，就可以在这个blogs数组中找到对应的issue信息，这个issue对象中有github api给我们提供的comments_url，可以用来请求这个issue下的所有评论，这里也把它一起请求到。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token comment\">// 把pages-template目录的模板拷贝到pages下</span>\n  <span class=\"token keyword\">await</span> <span class=\"token function\">copyFolder</span><span class=\"token punctuation\">(</span>pageTemplateDir<span class=\"token punctuation\">,</span> pageDir<span class=\"token punctuation\">)</span></code></pre></div>\n<p>函数刚开始这一步的作用是因为每次执行这个函数都需要用rebuild函数清空pages文件夹，防止同步不同账号的数据以后产生数据混乱，但是nextjs中我们可能会自定义<code class=\"language-text\">_document.js</code>或者<code class=\"language-text\">_app.js</code>，这玩意也不需要动态生成，所以我们就先在pages-template文件夹下提前存放好这些组件，然后执行的时候直接拷贝过去就好了。\n<img src=\"https://user-gold-cdn.xitu.io/2019/9/18/16d422d1dd410c6c?w=432&#x26;h=48&#x26;f=png&#x26;s=15023\" alt=\"pages-template\"></p>\n<p><code class=\"language-text\">convertMdToJSX</code>这个方法就是把md文件转为nextjs可以识别的jsx格式，</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token template-string\"><span class=\"token string\">`\n      import Page from '../components/Page'\n\n      const pageProps = {\n        blog: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>restBlog<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">,\n        comments: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>comments<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">,\n        html: \\`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">handleMarkdownBody</span><span class=\"token punctuation\">(</span>mdContent<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\\`,\n      }\n\n      export default () => &lt;Page {...pageProps}/>\n    `</span></span></code></pre></div>\n<p>其实就是这么个格式，注意写入的时候要用JSON格式化一下，否则写入的会是[Object object]这样的文字。  </p>\n<p>另外我们在这一步就要配合<code class=\"language-text\">markdown-it</code>插件把md内容转成html格式，并且通过encodeURIComponent转义后再写入我们的jsx内，否则会出现很多格式错误。  </p>\n<p>最后利用Promise.all把convertMdToJSX这个异步方法批量执行一下。  </p>\n<p>这一步结束后，我们的pages目录大概是这个样子<br>\n<img src=\"https://user-gold-cdn.xitu.io/2019/9/18/16d42290ebe72f4c?w=404&#x26;h=400&#x26;f=png&#x26;s=84926\" alt=\"pages\"></p>\n<p>点开其中的一个jsx  </p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/9/18/16d422e601ac57ad?w=709&#x26;h=659&#x26;f=png&#x26;s=382507\" alt=\"jsx\"></p>\n<p>这已经是react可以渲染的jsx文件了，快要成功了~</p>\n<h3 id=\"生成首页\"><a href=\"#%E7%94%9F%E6%88%90%E9%A6%96%E9%A1%B5\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>生成首页</h3>\n<p>builder/page-builder.js</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * 生成博客首页\n */</span>\n<span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> indexPath <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'../pages/index.jsx'</span><span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>blogs<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> injectBlogs <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>\n    blogs<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> body<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>restBlog <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> restBlog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 把blog数据注入到首页中</span>\n  <span class=\"token keyword\">const</span> indexJsx <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token string\">`\n    import React from 'react'\n    import Link from 'next/link'\n    import Layout from '../components/Layout'\n    import Main from '../components/Main'\n    \n    const blogs = </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>injectBlogs<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\n    const Home = () => (\n      &lt;Layout>\n        &lt;Main blogs={blogs} />\n      &lt;/Layout>\n    )\n    \n    export default Home\n  `</span></span>\n  fs<span class=\"token punctuation\">.</span><span class=\"token function\">writeFileSync</span><span class=\"token punctuation\">(</span>indexPath<span class=\"token punctuation\">,</span> indexJsx<span class=\"token punctuation\">,</span> <span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这一步没啥好说的，一样的套路，写入jsx生成首页。  </p>\n<h3 id=\"执行入口\"><a href=\"#%E6%89%A7%E8%A1%8C%E5%85%A5%E5%8F%A3\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>执行入口</h3>\n<p>最后我们在入口把这些方法串起来。  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> withOra<span class=\"token punctuation\">,</span> initAxios <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./utils'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> syncBlogs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./sync'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> pageBuilder <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./page-builder'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> indexBuilder <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./index-builder'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> start <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">initAxios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 同步github上的blogs到md文件夹</span>\n  <span class=\"token keyword\">const</span> blogs <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">withOra</span><span class=\"token punctuation\">(</span>\n    syncBlogs<span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'正在同步博客中...'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 抓取评论，生成pages下的博客页面。</span>\n  <span class=\"token keyword\">await</span> <span class=\"token function\">withOra</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">pageBuilder</span><span class=\"token punctuation\">(</span>blogs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'正在生成博客页面中...'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 生成首页</span>\n  <span class=\"token function\">indexBuilder</span><span class=\"token punctuation\">(</span>blogs<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">initAxios</code>这个函数目的是在请求的时候可以带上github的<code class=\"language-text\">client_id</code>和<code class=\"language-text\">client_secret</code>信息，如果你在github申请了OAuth app就会拿到俩个东西，带上的话就可以更频繁的请求api，否则github会限制同一个ip下请求调用的次数。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">initAxios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  axios<span class=\"token punctuation\">.</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>axiosConfig<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>client_id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>axiosConfig<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        axiosConfig<span class=\"token punctuation\">.</span>params <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n      axiosConfig<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>client_id <span class=\"token operator\">=</span> client_id\n      axiosConfig<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>client_secret <span class=\"token operator\">=</span> client_secret\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> axiosConfig\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>在本项目中，<code class=\"language-text\">client_id</code>和<code class=\"language-text\">client_secret</code>定义在了配置文件config.js中。</p>\n<p><code class=\"language-text\">ora</code>是一个命令行提示加载中的插件，可以让我们在异步生成这些内容的时候得到更友好的提示，withOra就是封装了一层，在传入函数的调用前后去启动、暂停ora的提示。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">withOra</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">,</span> tip <span class=\"token operator\">=</span> <span class=\"token string\">'loading...'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> spinner <span class=\"token operator\">=</span> <span class=\"token function\">ora</span><span class=\"token punctuation\">(</span>tip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    spinner<span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> result\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    spinner<span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">throw</span> error\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>然后在package.json中写入自定义script</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&quot;scripts&quot;: {\n    &quot;dev&quot;: &quot;next dev&quot;,\n    &quot;build&quot;: &quot;next build&quot;,\n    &quot;start&quot;: &quot;next start&quot;,\n    &quot;export&quot;: &quot;next export&quot;,\n    &quot;sync&quot;: &quot;node builder/index.js&quot;,\n    &quot;all&quot;: &quot;npm run sync &amp;&amp; npm run build &amp;&amp; npm run export&quot;\n},</code></pre></div>\n<p>这样，<code class=\"language-text\">npm run sync</code>命令可以执行上面编写的builder逻辑，拉取github blogs生成pages，可以方便调试。</p>\n<p><code class=\"language-text\">npm run all</code>命令则是在sync命令调用后再去执行<code class=\"language-text\">npm run build</code> 和 <code class=\"language-text\">npm run export</code>，让nextjs去生成out文件夹下的静态html页面，这样就大功告成了。</p>\n<h2 id=\"本地调试\"><a href=\"#%E6%9C%AC%E5%9C%B0%E8%B0%83%E8%AF%95\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>本地调试</h2>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/9/18/16d423281216e445?w=426&#x26;h=417&#x26;f=png&#x26;s=86880\" alt=\"最终pages\"></p>\n<p>到了这一步，<code class=\"language-text\">npm run dev</code>后就可以开始调试你的博客了，注意生成的jsx都是尽量把内容最小化，把动态变化的内容都放到组件中去渲染，比如生成的page jsx里的<code class=\"language-text\">Page</code>组件，定义在components/Page.jsx中，在里面可以根据你的喜好去利用react任意发挥，并且调试支持热更新，可以说是非常友好了。</p>\n<p>components目录组件：</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/9/18/16d423b267fe20ae?w=413&#x26;h=134&#x26;f=png&#x26;s=19120\" alt=\"components目录\">\n<code class=\"language-text\">Header.jsx</code>： 对应首页中头部的部分。\n<code class=\"language-text\">Layout.jsx</code>：首页、博文详情页的布局组件，包含了Header.jsx\n<code class=\"language-text\">Main.jsx</code>：首页。\n<code class=\"language-text\">Markdown.jsx</code>：渲染markdown html文本的组件，本项目中利用了<code class=\"language-text\">react-highlight</code>库去高亮显示代码。\n<code class=\"language-text\">Page.jsx</code>：博客详情页，评论区也是在里面实现的。  </p>\n<h2 id=\"生成html\"><a href=\"#%E7%94%9F%E6%88%90html\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>生成html</h2>\n<p>本地开发完成后，执行<code class=\"language-text\">npm run all</code>，（或者不需要再同步博客的情况执行<code class=\"language-text\">npm run build</code> + <code class=\"language-text\">npm run export</code>)，就会在out目录下看到静态html页面了。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/9/18/16d4240937731590?w=409&#x26;h=274&#x26;f=png&#x26;s=68769\" alt=\"out\">\n里面的内容是这样的：\n<img src=\"https://user-gold-cdn.xitu.io/2019/9/18/16d424159df66f1a?w=852&#x26;h=616&#x26;f=png&#x26;s=306823\" alt=\"html\">\n把out目录部署到服务器上，就可以通过\n<a href=\"http://blog.shanshihao.cn/474922327\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://blog.shanshihao.cn/474922327</a>  这样的路径去访问博客内容了。</p>\n<p>到此我们就完成了手动生成自己的静态博客，nodejs真的是很强大，nextjs也是ssr的神器，在这里也推荐一下jocky老师的nextjs课程 <a href=\"https://coding.imooc.com/class/334.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://coding.imooc.com/class/334.html</a> ，我在这个课程中也学习到了非常多的东西。</p>","timeToRead":11,"frontmatter":{"title":"手把手教你用神器nextjs一键导出你的github博客文章生成静态html！","date":"September 18, 2019","spoiler":""},"fields":{"slug":"/494956890/","langKey":"en"}}},"pageContext":{"slug":"/494956890/","previous":{"fields":{"slug":"/487358969/","langKey":"en","directoryName":"487358969"},"frontmatter":{"title":"使用React Hooks + 自定义Hook封装一步一步打造一个完善的小型应用。"}},"next":{"fields":{"slug":"/505706239/","langKey":"en","directoryName":"505706239"},"frontmatter":{"title":"中文技术文章阅读"}},"translations":[],"translatedLinks":[]}},"staticQueryHashes":["336482444"]}