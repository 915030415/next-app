{"componentChunkName":"component---src-templates-blog-post-js","path":"/628894787/","result":{"data":{"site":{"siteMetadata":{"title":"ssh的博客","author":"ssh"}},"markdownRemark":{"id":"d9cfc87c-7832-5d05-9e8b-d22545798b59","html":"<h2 id=\"前言\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>瀑布流布局是前端领域中一个很常见的需求，由于图片的高度是不一致的，所以在多列布局中默认布局下很难获得满意的排列。</p>\n<p>我们的需求是，图片高度不规律的情况下，在两列布局中，让左右两侧的图片总高度尽可能的接近，这样的布局会非常的美观。</p>\n<p>注意，<strong>本文的目的仅仅是讨论算法在前端中能如何运用</strong>，而不是说瀑布流的最佳解法是动态规划，可以仅仅当做学习拓展来看。</p>\n<p>本文的图片节选自知乎问题<a href=\"https://www.zhihu.com/question/28997505\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">《有个漂亮女朋友是种怎样的体验？》</a>，我先去看美女了，本文到此结束。（逃</p>\n<h2 id=\"预览\"><a href=\"#%E9%A2%84%E8%A7%88\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>预览</h2>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/6/2/17272def722a4f89?w=628&#x26;h=1138&#x26;f=png&#x26;s=1612372\"></p>\n<h2 id=\"分析\"><a href=\"#%E5%88%86%E6%9E%90\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>分析</h2>\n<p>从预览图中可以看出，虽然图片的高度是不定的，但是到了这个布局的最底部，左右两张图片是正好对齐的，这就是一个比较美观的布局了。</p>\n<p>那么怎么实现这个需求呢？从头开始拆解，现在我们能拿到一组图片数组 <code class=\"language-text\">[img1, img2, img3]</code>，我们可以通过一些方法得到它对应的高度 <code class=\"language-text\">[1000, 2000, 3000]</code>，那么现在我们的目标就是能够计算出左右两列 <code class=\"language-text\">left: [1000, 2000]</code> 和 <code class=\"language-text\">right: [3000]</code> 这样就可以把一个左右等高的布局给渲染出来了。</p>\n<h2 id=\"准备工作\"><a href=\"#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>准备工作</h2>\n<p>首先准备好小姐姐数组 <code class=\"language-text\">SISTERS</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> <span class=\"token constant\">SISTERS</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token string\">'https://pic3.zhimg.com/v2-89735fee10045d51693f1f74369aaa46_r.jpg'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'https://pic1.zhimg.com/v2-ca51a8ce18f507b2502c4d495a217fa0_r.jpg'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'https://pic1.zhimg.com/v2-c90799771ed8469608f326698113e34c_r.jpg'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'https://pic1.zhimg.com/v2-8d3dd83f3a419964687a028de653f8d8_r.jpg'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token operator\">...</span> more <span class=\"token number\">50</span> items\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>准备好一个工具方法 <code class=\"language-text\">loadImages</code>，这个方法的目的就是把所有图片预加载以后获取对应的高度，放到一个数组里返回。并且要对外通知所有图片处理完成的时机，有点类似于 <code class=\"language-text\">Promise.all</code> 的思路。</p>\n<p>这个方法里，我们把图片按照 <code class=\"language-text\">宽高比</code> 和屏幕宽度的一半进行相乘，得到缩放后适配屏宽的图片高度。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">loadImgHeights</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>imgs<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> length <span class=\"token operator\">=</span> imgs<span class=\"token punctuation\">.</span>length\n    <span class=\"token keyword\">const</span> heights <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">load</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> img <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Image</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">checkIfFinished</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        count<span class=\"token operator\">++</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">===</span> length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>heights<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n      img<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> ratio <span class=\"token operator\">=</span> img<span class=\"token punctuation\">.</span>height <span class=\"token operator\">/</span> img<span class=\"token punctuation\">.</span>width\n        <span class=\"token keyword\">const</span> halfHeight <span class=\"token operator\">=</span> ratio <span class=\"token operator\">*</span> halfInnerWidth\n        <span class=\"token comment\">// 高度按屏幕一半的比例来计算</span>\n        heights<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> halfHeight\n        <span class=\"token function\">checkIfFinished</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n      img<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onerror</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        heights<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token function\">checkIfFinished</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n      img<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> imgs<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n    imgs<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">load</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>有了图片高度以后，我们就开始挑选适合这个需求的算法了。</p>\n<h2 id=\"贪心算法\"><a href=\"#%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>贪心算法</h2>\n<p>在人的脑海中最直观的想法是什么样的？在每装一个图片前都对比一下左右数组的高度和，往高度较小的那个数组里去放入下一项。</p>\n<p>这就是贪心算法，我们来简单实现下：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">greedy</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>heights<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> leftHeight <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">let</span> rightHeight <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">let</span> left <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">let</span> right <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n  heights<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>height<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>leftHeight <span class=\"token operator\">>=</span> rightHeight<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      right<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span>\n      rightHeight <span class=\"token operator\">+=</span> height\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      left<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span>\n      leftHeight <span class=\"token operator\">+=</span> height\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> left<span class=\"token punctuation\">,</span> right <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>我们得到了 <code class=\"language-text\">left</code>，<code class=\"language-text\">right</code> 数组，对应左右两列渲染图片的下标，并且我们也有了每个图片的高度，那么渲染到页面上就很简单了：</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>wrap<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">v-if</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>imgsLoaded<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>half<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span>\n      <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>img<span class=\"token punctuation\">\"</span></span>\n      <span class=\"token attr-name\">v-for</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>leftIndex in leftImgIndexes<span class=\"token punctuation\">\"</span></span>\n      <span class=\"token attr-name\">:src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>imgs[leftIndex]<span class=\"token punctuation\">\"</span></span>\n      <span class=\"token attr-name\">:</span><span class=\"token style-attr language-css\"><span class=\"token attr-name\"><span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">=\"</span><span class=\"token attr-value\"><span class=\"token punctuation\">{</span> <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'100%'</span>, <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> imgHeights[leftIndex] + <span class=\"token string\">'px'</span> <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">\"</span></span>\n    <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>half<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span>\n      <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>img<span class=\"token punctuation\">\"</span></span>\n      <span class=\"token attr-name\">v-for</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>rightIndex in rightImgIndexes<span class=\"token punctuation\">\"</span></span>\n      <span class=\"token attr-name\">:src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>imgs[rightIndex]<span class=\"token punctuation\">\"</span></span>\n      <span class=\"token attr-name\">:</span><span class=\"token style-attr language-css\"><span class=\"token attr-name\"><span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">=\"</span><span class=\"token attr-value\"><span class=\"token punctuation\">{</span> <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'100%'</span>, <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> imgHeights[rightIndex] + <span class=\"token string\">'px'</span> <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">\"</span></span>\n    <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>效果如图：\n<img src=\"https://user-gold-cdn.xitu.io/2020/6/2/17272ec94dcda26a?w=640&#x26;h=1138&#x26;f=png&#x26;s=1692813\"></p>\n<p>预览地址：\n<a href=\"https://sl1673495.github.io/dp-waterfall/greedy.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://sl1673495.github.io/dp-waterfall/greedy.html</a></p>\n<p>可以看出，贪心算法只寻求局部最优解（只在考虑当前图片的时候找到一个最优解），所以最后左右两边的高度差还是相对较大的，局部最优解很难成为全局最优解。</p>\n<p>再回到文章开头的图片去看看，对于同样的一个图片数组，那个预览图里的高度差非常的小，是怎么做到的呢？</p>\n<h2 id=\"动态规划\"><a href=\"#%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>动态规划</h2>\n<p>和局部最优解对应的是全局最优解，而说到全局最优解，我们很难不想到动态规划这种算法。它是求全局最优解的一个利器。</p>\n<p>如果你还没有了解过动态规划，建议你看一下海蓝大佬的 <a href=\"https://juejin.im/post/5e86d0ad6fb9a03c387f3342\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">一文搞懂动态规划</a>，也是这篇文章让我入门了最基础的动态规划。</p>\n<p>动态规划中有一个很著名的问题：「01 背包问题」，题目的意思是这样的：</p>\n<p><strong>有 n 个物品，它们有各自的体积和价值，现有给定容量的背包，如何让背包里装入的物品具有最大的价值总和？</strong></p>\n<p>关于 01 背包问题的题解，网上不错的教程似乎不多，我推荐看慕课网 bobo 老师的<a href=\"https://coding.imooc.com/class/82.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">玩转算法面试 从真题到思维全面提升算法思维</a> 中的第九章，会很仔细的讲解背包问题，对于算法思维有很大的提升，这门课的其他部分也非常非常的优秀。</p>\n<p>我也有在我自己维护的题解仓库中对老师的 01 背包解法做了一个<a href=\"https://github.com/sl1673495/leetcode-javascript/issues/15\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">js 版的改写</a>。</p>\n<p>那么 01 背包问题和这个瀑布流算法有什么关系呢？这个思路确实比较难找，但是我们仔细想一下，假设我们有 <code class=\"language-text\">[1, 2, 3]</code> 这 3 个图片高度的数组，我们怎么通过转化成 01 背包问题呢？</p>\n<p>由于我们要凑到的是图片总高度的一半，也就是 <code class=\"language-text\">(1 + 2 + 3) / 2 = 3</code>，那么我们此时就有了一个 <code class=\"language-text\">容量为3</code> 的背包，而由于我们装进左列中的图片高度需要低于总高度的一半，待装进背包的物体的总重量和高度是相同的 <code class=\"language-text\">[1, 2, 3]</code>。</p>\n<p>那么这个问题也就转化为了，在 <code class=\"language-text\">容量为3的背包</code> 中，尽可能的从重量为 <code class=\"language-text\">[1, 2, 3]</code>，并且价值也为 <code class=\"language-text\">[1, 2, 3]</code> 的物品中，尽可能的挑选出总价值最大的物品集合装进背包中。</p>\n<p>也就是 <code class=\"language-text\">总高度为3</code>，在 <code class=\"language-text\">[1, 2, 3]</code> 这几种高度的图片中，尽可能挑出 <code class=\"language-text\">总和最大，但是又小于3</code> 的图片集合，装进数组中。</p>\n<p>可以分析出 <strong>状态转移方程</strong> 是 </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">dp<span class=\"token punctuation\">[</span>heights<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>height<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>\n  <span class=\"token comment\">// 选择当前图片放入列中</span>\n  currentHeight <span class=\"token operator\">+</span> dp<span class=\"token punctuation\">[</span>heights <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>height <span class=\"token operator\">-</span> currnetHeight<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> \n  <span class=\"token comment\">// 不选择当前图片</span>\n  dp<span class=\"token punctuation\">[</span>heights <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>height<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>注意这里的纵坐标命名为 <code class=\"language-text\">heights</code>，代表它的意义是「可选择图片的集合」，比如 <code class=\"language-text\">dp[0]</code> 意味着只考虑第一张图片，<code class=\"language-text\">dp[1]</code> 则意味着既考虑第一张图片又考虑第二张图片，以此类推。</p>\n<h3 id=\"二维数组结构\"><a href=\"#%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E7%BB%93%E6%9E%84\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>二维数组结构</h3>\n<p>我们构建的二维 dp 数组</p>\n<p><strong>纵坐标 y</strong> 是：当前可以考虑的图片，比如 <code class=\"language-text\">dp[0]</code> 是只考虑下标为 0 的图片，<code class=\"language-text\">dp[1]</code> 是考虑下标为 0 的图片，并且考虑下标为 1 的图片，以此类推，取值范围是 <code class=\"language-text\">0 ~ 图片数组的长度 - 1</code>。</p>\n<p><strong>横坐标 x</strong> 是：用当前考虑的图片集合，去尽可能凑到总高度为 <code class=\"language-text\">y</code> 时，所能凑成的最大高度 <code class=\"language-text\">max</code>，以及当前所使用的图片下标集合 <code class=\"language-text\">indexes</code>，取值范围是 <code class=\"language-text\">0 ~ 高度的一半</code>。</p>\n<h3 id=\"小问题拆解\"><a href=\"#%E5%B0%8F%E9%97%AE%E9%A2%98%E6%8B%86%E8%A7%A3\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>小问题拆解</h3>\n<p>就以 <code class=\"language-text\">[1, 4, 5, 4]</code> 这四张图片高度为例，高度的一半是 7，用肉眼可以看出最接近 7 的子数组是<code class=\"language-text\">[1, 5]</code>，我们来看看动态规划是怎么求出这个结果的。</p>\n<p>我们先看纵坐标为 <code class=\"language-text\">0</code>，也就是只考虑图片 1 的情况：</p>\n<ol>\n<li>首先去尝试凑高度 <code class=\"language-text\">1</code>：我们知道图片 1 的高度正好是 1，所以此时<code class=\"language-text\">dp[0][0]</code>所填写的值是 <code class=\"language-text\">{ max: 1, indexes: [0] }</code>，也就代表用总高度还剩 1，并且只考虑图片 1 的情况下，我们的最优解是选用第一张图片。</li>\n<li>凑高度<code class=\"language-text\">2 ~ 7</code>：由于当前只有 1 可以选择，所以最优解只能是选择第一张图片，它们都是 <code class=\"language-text\">{ max: 1, indexes: [0] }</code>。</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">高度       1  2  3  4  5  6  7\n图片1(h=1) 1  1  1  1  1  1  1</code></pre></div>\n<p>这一层在动态规划中叫做基础状态，它是最小的子问题，它不像后面的纵坐标中要考虑多张图片，而是只考虑单张图片，所以一般来说都会在一层循环中单独把它求解出来。</p>\n<p>这里我们还要考虑第一张图片的高度大于我们要求的总高度的情况，这种情况下需要把 max 置为 0，选择的图片项也为空。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> mid <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>heights<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> dp <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">// 基础状态 只考虑第一个图片的情况</span>\ndp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> cap <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> cap <span class=\"token operator\">&lt;=</span> mid<span class=\"token punctuation\">;</span> cap<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>cap<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span>\n    heights<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> cap\n      <span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span> max<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> indexes<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> max<span class=\"token punctuation\">:</span> heights<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> indexes<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>有了第一层的基础状态后，我们就可以开始考虑多张图片的情况了，现在来到了纵坐标为 1，也就是考虑图片 1 和考虑图片 2 时求最优解：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">高度       1  2  3  4  5  6  7\n图片1(h=1) 1  1  1  1  1  1  1\n图片2(h=2)</code></pre></div>\n<p>此时问题就变的有些复杂了，在多张图片的情况下，我们可以有两种选择：</p>\n<ol>\n<li>选择当前图片，那么假设当前要凑的总高度为 3，当前图片的高度为 2，剩余的高度就为 1，此时我们可以用剩余的高度去「上一个纵坐标」里寻找「只考虑前面几种图片」的情况下，高度为 1 时的最优解。并且记录 <code class=\"language-text\">当前图片的高度 + 前几种图片凑剩余高度的最优解</code> 为 <code class=\"language-text\">max1</code>。</li>\n<li>不选择当前图片，那么就直接去「只考虑前面几种图片」的上一个纵坐标里，找到当前高度下的最优解即可，记为 <code class=\"language-text\">max2</code>。</li>\n<li>比较 <code class=\"language-text\">max1</code> 和<code class=\"language-text\">max2</code>，找出更大的那个值，记录为当前状态下的最优解。</li>\n</ol>\n<p>有了这个前置知识，来继续分解这个问题，在纵坐标为 1 的情况下，我们手上可以选择的图片有图片 1 和图片 2：</p>\n<ol>\n<li>凑高度 1：由于图片 2 的高度为 2，相当于是容量超了，所以这种情况下不选择图片 2，而是直接选择图片 1，所以 <code class=\"language-text\">dp[1][0]</code> 可以直接沿用 <code class=\"language-text\">dp[0][0]</code>的最优解，也就是 <code class=\"language-text\">{ max: 1, indexes: [0] }</code>。</li>\n<li>\n<p>凑高度 2：</p>\n<ol>\n<li>选择图片 2，图片 2 的高度为 4，能够凑成的高度为 4，已经超出了当前要凑的高度 2，所以不能选则图片 2。</li>\n<li>不选择图片 2，在只考虑图片 1 时的最优解数组 <code class=\"language-text\">dp[0]</code> 中找到高度为 2 时的最优解： <code class=\"language-text\">dp[0][2]</code>，直接沿用下来，也就是 <code class=\"language-text\">{ max: 1, indexes: [0] }</code></li>\n<li>这种情况下只能不选择图片 2，而沿用只选择图片 1 时的解， <code class=\"language-text\">{ max: 1, indexes: [0] }</code></li>\n</ol>\n</li>\n<li>省略凑高度 <code class=\"language-text\">3 ~ 4</code> 的情况，因为得出的结果和凑高度 2 是一样的。</li>\n<li>\n<p>凑高度 5：高度为 5 的情况下就比较有意思了：</p>\n<ol>\n<li>选择图片 2，图片 2 的高度为 4，能够凑成的高度为 4，此时剩余高度是 1，再去只考虑图片 1 的最优解数组 <code class=\"language-text\">dp[0]</code>中找高度为 1 时的最优解<code class=\"language-text\">dp[0][1]</code>，发现结果是 <code class=\"language-text\">{ max: 1, indexes: [0] }</code>，这两个高度值 4 和 1 相加后没有超出高度的限制，所以得出最优解：<code class=\"language-text\">{ max: 5, indexes: [0, 1] }</code></li>\n<li>不选择图片 2，在图片 1 的最优解数组中找到高度为 5 时的最优解： <code class=\"language-text\">dp[0][5]</code>，直接沿用下来，也就是 <code class=\"language-text\">{ max: 1, indexes: [0] }</code></li>\n<li>很明显选择图片 2 的情况下，能凑成的高度更大，所以 <code class=\"language-text\">dp[1][2]</code> 的最优解选择 <code class=\"language-text\">{ max: 5, indexes: [0, 1] }</code></li>\n</ol>\n</li>\n</ol>\n<p>仔细理解一下，相信你可以看出动态规划的过程，从最小的子问题 <code class=\"language-text\">只考虑图片1</code>出发，先求出最优解，然后再用子问题的最优解去推更大的问题 <code class=\"language-text\">考虑图片1、2</code>、<code class=\"language-text\">考虑图片1、2、3</code>的最优解。</p>\n<p>画一下<code class=\"language-text\">[1,4,5,4]</code>问题的 dp 状态表吧：</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/6/2/1727328d6aacdcef?w=1644&#x26;h=214&#x26;f=png&#x26;s=25629\"></p>\n<p>可以看到，和我们刚刚推论的结果一致，在考虑图片 1 和图片 2 的情况下，凑高度为 5，也就是<code class=\"language-text\">dp[1][5]</code>的位置的最优解就是 5。</p>\n<p>最右下角的 <code class=\"language-text\">dp[3][7]</code> 就是考虑所有图片的情况下，凑高度为 7 时的<strong>全局最优解</strong>。</p>\n<p><code class=\"language-text\">dp[3][7]</code> 的推理过程是这样的：</p>\n<ol>\n<li>用最后一张高度为 4 的图片，加上前三张图片在高度为 7 - 4 = 3 时的最优解也就是 <code class=\"language-text\">dp[2][3]</code>，得到结果 4 + 1 = 5。</li>\n<li>不用最后一张图片，直接取前三张图片在高度为 7 时的最优解，也就是 <code class=\"language-text\">dp[2][7]</code>，得到结果 6。</li>\n<li>对比这两者的值，得到最优解 6。</li>\n</ol>\n<p>至此我们就完成了整个动态规划的过程，得到了考虑所有图片的情况下，最大高度为 7 时的最优解：6，所需的两张图片的下标为 <code class=\"language-text\">[0, 2]</code>，对应高度是 <code class=\"language-text\">1</code> 和 <code class=\"language-text\">5</code>。</p>\n<p>给出代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 尽可能选出图片中高度最接近图片总高度一半的元素</span>\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">dpHalf</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>heights<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> mid <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>heights<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">let</span> dp <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token comment\">// 基础状态 只考虑第一个图片的情况</span>\n  dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> cap <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> cap <span class=\"token operator\">&lt;=</span> mid<span class=\"token punctuation\">;</span> cap<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>cap<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span>\n      heights<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> cap\n        <span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span> max<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> indexes<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> max<span class=\"token punctuation\">:</span> heights<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> indexes<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">let</span> useHeightIndex <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    useHeightIndex <span class=\"token operator\">&lt;</span> heights<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n    useHeightIndex<span class=\"token operator\">++</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>dp<span class=\"token punctuation\">[</span>useHeightIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      dp<span class=\"token punctuation\">[</span>useHeightIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> cap <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> cap <span class=\"token operator\">&lt;=</span> mid<span class=\"token punctuation\">;</span> cap<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> usePrevHeightDp <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>useHeightIndex <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>cap<span class=\"token punctuation\">]</span>\n      <span class=\"token keyword\">let</span> usePrevHeightMax <span class=\"token operator\">=</span> usePrevHeightDp<span class=\"token punctuation\">.</span>max\n      <span class=\"token keyword\">let</span> currentHeight <span class=\"token operator\">=</span> heights<span class=\"token punctuation\">[</span>useHeightIndex<span class=\"token punctuation\">]</span>\n      <span class=\"token comment\">// 这里有个小坑 剩余高度一定要转化为整数 否则去dp数组里取到的就是undefined了</span>\n      <span class=\"token keyword\">let</span> useThisHeightRestCap <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span>cap <span class=\"token operator\">-</span> heights<span class=\"token punctuation\">[</span>useHeightIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">let</span> useThisHeightPrevDp <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>useHeightIndex <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>useThisHeightRestCap<span class=\"token punctuation\">]</span>\n      <span class=\"token keyword\">let</span> useThisHeightMax <span class=\"token operator\">=</span> useThisHeightPrevDp\n        <span class=\"token operator\">?</span> currentHeight <span class=\"token operator\">+</span> useThisHeightPrevDp<span class=\"token punctuation\">.</span>max\n        <span class=\"token punctuation\">:</span> <span class=\"token number\">0</span>\n\n      <span class=\"token comment\">// 是否把当前图片纳入选择 如果取当前的图片大于不取当前图片的高度</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>useThisHeightMax <span class=\"token operator\">></span> usePrevHeightMax<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        dp<span class=\"token punctuation\">[</span>useHeightIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>cap<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n          max<span class=\"token punctuation\">:</span> useThisHeightMax<span class=\"token punctuation\">,</span>\n          indexes<span class=\"token punctuation\">:</span> useThisHeightPrevDp<span class=\"token punctuation\">.</span>indexes<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>useHeightIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        dp<span class=\"token punctuation\">[</span>useHeightIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>cap<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n          max<span class=\"token punctuation\">:</span> usePrevHeightMax<span class=\"token punctuation\">,</span>\n          indexes<span class=\"token punctuation\">:</span> usePrevHeightDp<span class=\"token punctuation\">.</span>indexes<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span>heights<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>有了一侧的数组以后，我们只需要在数组中找出另一半，即可渲染到屏幕的两列中：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>leftImgIndexes <span class=\"token operator\">=</span> <span class=\"token function\">dpHalf</span><span class=\"token punctuation\">(</span>imgHeights<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>indexes\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>rightImgIndexes <span class=\"token operator\">=</span> <span class=\"token function\">omitByIndexes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>imgs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>leftImgIndexes<span class=\"token punctuation\">)</span></code></pre></div>\n<p>得出效果：\n<img src=\"https://user-gold-cdn.xitu.io/2020/6/2/17272def722a4f89?w=628&#x26;h=1138&#x26;f=png&#x26;s=1612372\"></p>\n<h3 id=\"优化-1\"><a href=\"#%E4%BC%98%E5%8C%96-1\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>优化 1</h3>\n<p>由于纵轴的每一层的最优解都只需要参考上一层节点的最优解，因此可以只保留两行。通过判断除 2 取余来决定“上一行”的位置。此时空间复杂度是 O(n)。</p>\n<h3 id=\"优化-2\"><a href=\"#%E4%BC%98%E5%8C%96-2\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>优化 2</h3>\n<p>由于每次参考值都只需要取上一行和当前位置左边位置的值（因为减去了当前高度后，剩余高度的最优解一定在左边），因此 dp 数组可以只保留一行，把问题转为从右向左求解，并且在求解的过程中不断覆盖当前的值，而不会影响下一次求解。此时空间复杂度是 O(n)，但是其实占用的空间进一步缩小了。</p>\n<p>并且在这种情况下对于时间复杂度也可以做优化，由于优化后，求当前高度的最优解是倒序遍历的，那么当发现求最优解的高度小于当前所考虑的那个图片的的高度时，说明本次求解不可能考虑当前图片了，此时左边的高度的最优解一定是「上一行的最优解」。</p>\n<h2 id=\"代码地址\"><a href=\"#%E4%BB%A3%E7%A0%81%E5%9C%B0%E5%9D%80\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>代码地址</h2>\n<p><a href=\"https://sl1673495.github.io/dp-waterfall\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">预览地址</a></p>\n<p><a href=\"https://github.com/sl1673495/dp-waterfall/blob/master/index.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">完整代码地址</a></p>\n<h2 id=\"总结\"><a href=\"#%E6%80%BB%E7%BB%93\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>总结</h2>\n<p>算法思想在前端中的应用还是可以见到不少的，本文只是为了演示动态规划在求解最优解问题时的威力，并不代表这种算法适用于生产环境（实际上性能非常差）。</p>\n<p>在实际场景中我们可能一定需要最优解，而只是需要左右两侧的高度不要相差的过大就好，那么这种情况下简单的贪心算法完全足够。</p>\n<p>在业务工程中，我们需要结合当前的人力资源，项目周期，代码可维护性，性能等各个方面，去选择最适合业务场景的解法，而不一定要去找到那个最优解。</p>\n<p>但是算法对于前端来说还是非常重要的，想要写出 bug free 的代码，在复杂的业务场景下也能游刃有余的想出优化复杂度的方法，学习算法是一个非常棒的途径，这也是工程师必备的素养。</p>\n<h2 id=\"推荐\"><a href=\"#%E6%8E%A8%E8%8D%90\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>推荐</h2>\n<p>我维护了一个 LeetCode 的<a href=\"https://github.com/sl1673495/leetcode-javascript/issues\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">题解仓库</a>，这里会按照标签分类记录我平常刷题时遇到的一些比较经典的问题，并且也会经常更新 bobo 老师的力扣算法课程中提到的各个分类的经典算法，把他 C++ 的解法改写成 JavaScript 解法。欢迎关注，我会持续更新。</p>\n<h2 id=\"参考资料\"><a href=\"#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>参考资料</h2>\n<p><a href=\"https://juejin.im/post/5e86d0ad6fb9a03c387f3342\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">一文搞懂动态规划</a></p>\n<p><a href=\"https://coding.imooc.com/class/82.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">玩转算法面试 从真题到思维全面提升算法思维</a></p>\n<h2 id=\"️-感谢大家\"><a href=\"#%EF%B8%8F-%E6%84%9F%E8%B0%A2%E5%A4%A7%E5%AE%B6\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>❤️ 感谢大家</h2>\n<p>1.如果本文对你有帮助，就点个赞支持下吧，你的「赞」是我创作的动力。</p>\n<p>2.关注公众号「前端从进阶到入院」即可加我好友，我拉你进「前端进阶交流群」，大家一起共同交流和进步。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/4/5/17149cbcaa96ff26?w=910&#x26;h=436&#x26;f=jpeg&#x26;s=78195\"></p>","timeToRead":15,"frontmatter":{"title":"前端瀑布流布局如何应用动态规划和贪心算法","date":"June 02, 2020","spoiler":""},"fields":{"slug":"/628894787/","langKey":"en"}}},"pageContext":{"slug":"/628894787/","previous":{"fields":{"slug":"/622380785/","langKey":"en","directoryName":"622380785"},"frontmatter":{"title":"深入解析你不知道的 EventLoop 和浏览器渲染、帧动画、空闲回调"}},"next":{"fields":{"slug":"/629748618/","langKey":"en","directoryName":"629748618"},"frontmatter":{"title":"前端动画必知必会：React 和 Vue 都在用的 FLIP 思想实战"}},"translations":[],"translatedLinks":[]}},"staticQueryHashes":["336482444"]}