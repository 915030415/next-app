{"componentChunkName":"component---src-templates-blog-post-js","path":"/549412665/","result":{"data":{"site":{"siteMetadata":{"title":"ssh的博客","author":"ssh"}},"markdownRemark":{"id":"2c5a53f3-e4c6-5f27-9d3b-5a9eba605701","html":"<h2 id=\"前言\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p> 各位使用react技术栈的小伙伴都不可避免的接触过<code class=\"language-text\">redux</code> + <code class=\"language-text\">react-redux</code>的这套组合，众所周知redux是一个非常精简的库，它和react是没有做任何结合的，甚至可以在vue项目中使用。</p>\n<p> redux的核心状态管理实现其实就几行代码</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">let</span> currentState\n <span class=\"token keyword\">let</span> subscribers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n <span class=\"token keyword\">function</span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   currentState <span class=\"token operator\">=</span> <span class=\"token function\">reducer</span><span class=\"token punctuation\">(</span>currentState<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   subscribers<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">=></span> <span class=\"token function\">s</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">}</span>\n\n <span class=\"token keyword\">function</span> <span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">return</span> currentState<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n \n <span class=\"token keyword\">function</span> <span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>subscriber<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     subscribers<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>subscriber<span class=\"token punctuation\">)</span>\n     <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">unsubscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n         <span class=\"token operator\">...</span>\n     <span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">}</span>\n\n <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token keyword\">type</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'INIT'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n   dispatch<span class=\"token punctuation\">,</span>\n   getState<span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p> 它就是利用闭包管理了state等变量，然后在dispatch的时候通过用户定义reducer拿到新状态赋值给state，再把外部通过subscribe的订阅给触发一下。  </p>\n<p> 那redux的实现简单了，react-redux的实现肯定就需要相对复杂，它需要考虑如何和react的渲染结合起来，如何优化性能。 </p>\n<h2 id=\"目标\"><a href=\"#%E7%9B%AE%E6%A0%87\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>目标</h2>\n<ol>\n<li>本文目标是尽可能简短的实现<code class=\"language-text\">react-redux</code>v7中的hook用法部分<code class=\"language-text\">Provider</code>, <code class=\"language-text\">useSelector</code>, <code class=\"language-text\">useDispatch</code>方法。（不实现<code class=\"language-text\">connect</code>方法）</li>\n<li>可能会和官方版本的一些复杂实现不一样，但是保证主要的流程一致。  </li>\n<li>用TypeScript实现，并且能获得完善的类型提示。</li>\n</ol>\n<h2 id=\"预览\"><a href=\"#%E9%A2%84%E8%A7%88\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>预览</h2>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/1/11/16f946f6c4fd8955?w=706&#x26;h=380&#x26;f=gif&#x26;s=188883\" alt=\"redux gif.gif\"><br>\n预览地址：<a href=\"https://sl1673495.github.io/tiny-react-redux\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://sl1673495.github.io/tiny-react-redux</a>  </p>\n<h2 id=\"性能\"><a href=\"#%E6%80%A7%E8%83%BD\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>性能</h2>\n<p> 说到性能这个点，自从React Hook推出以后，有了<code class=\"language-text\">useContext</code>和<code class=\"language-text\">useReducer</code>这些方便的api，新的状态管理库如同雨后春笋版的冒了出来，其中的很多就是利用了<code class=\"language-text\">Context</code>做状态的向下传递。  </p>\n<p> 举一个最简单的状态管理的例子</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> StoreContext <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>StoreContext<span class=\"token punctuation\">.</span>Provider value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> state<span class=\"token punctuation\">,</span> setState <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>StoreContext<span class=\"token punctuation\">.</span>Provider<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Son</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> state <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>StoreContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>state是<span class=\"token punctuation\">{</span>state<span class=\"token punctuation\">.</span>xxx<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>利用useState或者useContext，可以很轻松的在所有组件之间通过Context共享状态。 </p>\n<p>但是这种模式的缺点在于Context会带来一定的性能问题，下面是React官方文档中的描述：</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/1/11/16f9412b5f3f10b2?w=1576&#x26;h=528&#x26;f=png&#x26;s=282752\" alt=\"Context性能问题\">  </p>\n<p>想像这样一个场景，在刚刚所描述的Context状态管理模式下，我们的全局状态中有<code class=\"language-text\">count</code>和<code class=\"language-text\">message</code>两个状态分别给通过<code class=\"language-text\">StoreContext.Provider</code>向下传递  </p>\n<ol>\n<li><code class=\"language-text\">Counter</code>计数器组件使用了<code class=\"language-text\">count</code></li>\n<li><code class=\"language-text\">Chatroom</code>聊天室组件使用了<code class=\"language-text\">message</code></li>\n</ol>\n<p>而在计数器组件通过Context中拿到的setState触发了<code class=\"language-text\">count</code>改变的时候，  </p>\n<p>由于聊天室组件也利用<code class=\"language-text\">useContext</code>消费了用于状态管理的StoreContext，所以聊天室组件也会被强制重新渲染，这就造成了性能浪费。  </p>\n<p>虽然这种情况可以用<code class=\"language-text\">useMemo</code>进行优化，但是手动优化和管理依赖必然会带来一定程度的心智负担，而在不手动优化的情况下，肯定无法达到上面动图中的重渲染优化。  </p>\n<p>那么<code class=\"language-text\">react-redux</code>作为社区知名的状态管理库，肯定被很多大型项目所使用，大型项目里的状态可能分散在各个模块下，它是怎么解决上述的性能缺陷的呢？接着往下看吧。  </p>\n<h2 id=\"缺陷示例\"><a href=\"#%E7%BC%BA%E9%99%B7%E7%A4%BA%E4%BE%8B\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>缺陷示例</h2>\n<p>在我之前写的类vuex语法的状态管理库<a href=\"https://github.com/sl1673495/react-vuex-hook\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">react-vuex-hook</a>中，就会有这样的问题。因为它就是用了<code class=\"language-text\">Context</code> + <code class=\"language-text\">useReducer</code>的模式。  </p>\n<p>你可以直接在 <a href=\"https://sl1673495.github.io/react-vuex-hook\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">在线示例</a> 这里，在左侧菜单栏选择<code class=\"language-text\">需要优化的场景</code>，即可看到上述性能问题的重现，优化方案也已经写在文档底部。  </p>\n<p>这也是为什么我觉得<code class=\"language-text\">Context</code> + <code class=\"language-text\">useReducer</code>的模式更适合在小型模块之间共享状态，而不是在全局。   </p>\n<h2 id=\"实现\"><a href=\"#%E5%AE%9E%E7%8E%B0\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>实现</h2>\n<h3 id=\"介绍\"><a href=\"#%E4%BB%8B%E7%BB%8D\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>介绍</h3>\n<p>本文的项目就上述性能场景提炼而成，由</p>\n<ol>\n<li><code class=\"language-text\">聊天室</code>组件，用了store中的<code class=\"language-text\">count</code></li>\n<li><code class=\"language-text\">计数器</code>组件，用了store中的<code class=\"language-text\">message</code></li>\n<li><code class=\"language-text\">控制台</code>组件，用来监控组件的重新渲染。  </li>\n</ol>\n<p>用最简短的方式实现代码，探究react-redux为什么能在<code class=\"language-text\">count</code>发生改变的时候不让使用了<code class=\"language-text\">message</code>的组件重新渲染。  </p>\n<h3 id=\"redux的定义\"><a href=\"#redux%E7%9A%84%E5%AE%9A%E4%B9%89\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>redux的定义</h3>\n<p>redux的使用很传统，跟着官方文档对于TypeScript的指导走起来，并且把类型定义和store都export出去。  </p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createStore <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'redux'</span><span class=\"token punctuation\">;</span>\n\ntype AddAction <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  type<span class=\"token punctuation\">:</span> <span class=\"token string\">'add'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\ntype ChatAction <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  type<span class=\"token punctuation\">:</span> <span class=\"token string\">'chat'</span><span class=\"token punctuation\">;</span>\n  payload<span class=\"token punctuation\">:</span> string<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\ntype LogAction <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  type<span class=\"token punctuation\">:</span> <span class=\"token string\">'log'</span><span class=\"token punctuation\">;</span>\n  payload<span class=\"token punctuation\">:</span> string<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> initState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  message<span class=\"token punctuation\">:</span> <span class=\"token string\">'Hello'</span><span class=\"token punctuation\">,</span>\n  logs<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> string<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> type ActionType <span class=\"token operator\">=</span> AddAction <span class=\"token operator\">|</span> ChatAction <span class=\"token operator\">|</span> LogAction<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> type State <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> initState<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">reducer</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">:</span> State<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">:</span> ActionType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> State <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'add'</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span>\n        count<span class=\"token punctuation\">:</span> state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'chat'</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span>\n        message<span class=\"token punctuation\">:</span> action<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'log'</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span>\n        logs<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>action<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>state<span class=\"token punctuation\">.</span>logs<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> initState<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"在项目中使用\"><a href=\"#%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>在项目中使用</h3>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useCallback <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Card<span class=\"token punctuation\">,</span> Button<span class=\"token punctuation\">,</span> Input <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'antd'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Provider<span class=\"token punctuation\">,</span> useSelector<span class=\"token punctuation\">,</span> useDispatch <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../src'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> store<span class=\"token punctuation\">,</span> State<span class=\"token punctuation\">,</span> ActionType <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./store'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">'./index.css'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">'antd/dist/antd.css'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token function\">useSelector</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">:</span> State<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> dispatch <span class=\"token operator\">=</span> useDispatch<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ActionType</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">();\n  // 同步的add\n  const add = useCallback(() => dispatch(</span><span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token string\">'add'</span> <span class=\"token punctuation\">}</span><span class=\"token plain-text\">), []);\n\n  dispatch(</span><span class=\"token punctuation\">{</span>\n    type<span class=\"token punctuation\">:</span> <span class=\"token string\">'log'</span><span class=\"token punctuation\">,</span>\n    payload<span class=\"token punctuation\">:</span> <span class=\"token string\">'计数器组件重新渲染🚀'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token plain-text\">);\n  return (\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Card</span> <span class=\"token attr-name\">hoverable</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> marginBottom<span class=\"token punctuation\">:</span> <span class=\"token number\">24</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">计数器</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>chunk<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>chunk<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">store中的count现在是 </span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>add<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">add</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Card</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  );\n}\n\nexport default () => </span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Provider</span> <span class=\"token attr-name\">store</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>store<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Count</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Provider</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token plain-text\">;</span></code></pre></div>\n<p>可以看到，我们用<code class=\"language-text\">Provider</code>组件里包裹了<code class=\"language-text\">Count</code>组件，并且把redux的store传递了下去  </p>\n<p>在子组件里，通过<code class=\"language-text\">useDispatch</code>可以拿到redux的dispatch， 通过<code class=\"language-text\">useSelector</code>可以访问到store，拿到其中任意的返回值。  </p>\n<h3 id=\"构建context\"><a href=\"#%E6%9E%84%E5%BB%BAcontext\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>构建Context</h3>\n<p>利用官方api构建context，并且提供一个自定义hook: <code class=\"language-text\">useReduxContext</code>去访问这个context，对于忘了用Provider包裹的情况进行一些错误提示：  </p>\n<p>对于不熟悉自定义hook的小伙伴，可以看我之前写的这篇文章：<br>\n<a href=\"https://juejin.im/post/5d6771375188257573636cf9\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">使用React Hooks + 自定义Hook封装一步一步打造一个完善的小型应用。</a></p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useContext <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Store <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'redux'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">ContextType</span> <span class=\"token punctuation\">{</span>\n  store<span class=\"token punctuation\">:</span> Store<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> Context <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span>createContext<span class=\"token operator\">&lt;</span>ContextType <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">useReduxContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> contextValue <span class=\"token operator\">=</span> <span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>Context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>contextValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>\n      <span class=\"token string\">'could not find react-redux context value; please ensure the component is wrapped in a &lt;Provider>'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> contextValue<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"实现provider\"><a href=\"#%E5%AE%9E%E7%8E%B0provider\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>实现Provider</h3>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">FC</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Store <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'redux'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Context <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./Context'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">ProviderProps</span> <span class=\"token punctuation\">{</span>\n  store<span class=\"token punctuation\">:</span> Store<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> Provider<span class=\"token punctuation\">:</span> <span class=\"token constant\">FC</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ProviderProps</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> = (</span><span class=\"token punctuation\">{</span> store<span class=\"token punctuation\">,</span> children <span class=\"token punctuation\">}</span><span class=\"token plain-text\">) => </span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Context.Provider</span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> store <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Context.Provider</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token plain-text\">;</span></code></pre></div>\n<h3 id=\"实现usedispatch\"><a href=\"#%E5%AE%9E%E7%8E%B0usedispatch\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>实现useDispatch</h3>\n<p>这里就是简单的把dispatch返回出去，通过泛型传递让外部使用的时候可以获得类型提示。  </p>\n<p>泛型推导不熟悉的小伙伴可以看一下之前这篇：<br>\n<a href=\"https://juejin.im/post/5e1684b65188253a8c26468b\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">进阶实现智能类型推导的简化版Vuex</a></p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useReduxContext <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./Context'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Dispatch<span class=\"token punctuation\">,</span> Action <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'redux'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> useDispatch<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>A</span> <span class=\"token attr-name\">extends</span> <span class=\"token attr-name\">Action</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">() </span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> store <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useReduxContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> store<span class=\"token punctuation\">.</span>dispatch <span class=\"token keyword\">as</span> Dispatch<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>A</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">;\n}</span></code></pre></div>\n<h3 id=\"实现useselector\"><a href=\"#%E5%AE%9E%E7%8E%B0useselector\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>实现useSelector</h3>\n<p>这里才是重点，这个api有两个参数。</p>\n<ol>\n<li><code class=\"language-text\">selector</code>: 定义如何从state中取值，如<code class=\"language-text\">state =&gt; state.count</code></li>\n<li><code class=\"language-text\">equalityFn</code>: 定义如何判断渲染之间值是否有改变。  </li>\n</ol>\n<p>在性能章节也提到过，大型应用中必须做到只有自己使用的状态改变了，才去重新渲染，那么<code class=\"language-text\">equalityFn</code>就是判断是否渲染的关键了。  </p>\n<p>关键流程（初始化）：  </p>\n<ol>\n<li>根据传入的selector从redux的store中取值。</li>\n<li>定义一个<code class=\"language-text\">latestSelectedState</code>保存上一次selector返回的值。</li>\n<li>定义一个<code class=\"language-text\">checkForceUpdate</code>方法用来控制当状态发生改变的时候，让当前组件的强制渲染。</li>\n<li>利用<code class=\"language-text\">store.subscribe</code>订阅一次redux的store，下次redux的store发生变化执行<code class=\"language-text\">checkForceUpdate</code>。</li>\n</ol>\n<p>关键流程（更新）  </p>\n<ol>\n<li>当用户使用<code class=\"language-text\">dispatch</code>触发了redux store的变动后，store会触发<code class=\"language-text\">checkForceUpdate</code>方法。  </li>\n<li><code class=\"language-text\">checkForceUpdate</code>中，从<code class=\"language-text\">latestSelectedState</code>拿到上一次selector的返回值，再利用selector(store)拿到最新的值，两者利用<code class=\"language-text\">equalityFn</code>进行比较。</li>\n<li>根据比较，判断是否需要强制渲染组件。  </li>\n</ol>\n<p>有了这个思路，就来实现代码吧：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useReducer<span class=\"token punctuation\">,</span> useRef<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useReduxContext <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./Context'</span><span class=\"token punctuation\">;</span>\n\ntype Selector<span class=\"token operator\">&lt;</span>State<span class=\"token punctuation\">,</span> Selected<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">:</span> State<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Selected<span class=\"token punctuation\">;</span>\ntype EqualityFn<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Selected</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> = (a: Selected, b: Selected) => boolean;\n\n// 默认比较的方法\nconst defaultEqualityFn = </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>T</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">(a: T, b: T) => a === b;\nexport function useSelector&lt;State, Selected>(\n  selector: Selector&lt;State, Selected>,\n  equalityFn: EqualityFn</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Selected</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> = defaultEqualityFn,\n) </span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> store <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useReduxContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 强制让当前组件渲染的方法。</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> forceRender<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">=></span> s <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 存储上一次selector的返回值。</span>\n  <span class=\"token keyword\">const</span> latestSelectedState <span class=\"token operator\">=</span> useRef<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Selected</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">();\n  // 根据用户传入的selector，从store中拿到用户想要的值。\n  const selectedState = selector(store.getState());\n\n  // 检查是否需要强制更新\n  function checkForUpdates() </span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 从store中拿到最新的值</span>\n    <span class=\"token keyword\">const</span> newSelectedState <span class=\"token operator\">=</span> <span class=\"token function\">selector</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 如果比较相等，就啥也不做</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">equalityFn</span><span class=\"token punctuation\">(</span>newSelectedState<span class=\"token punctuation\">,</span> latestSelectedState<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 否则更新ref中保存的上一次渲染的值</span>\n    <span class=\"token comment\">// 然后强制渲染</span>\n    latestSelectedState<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> newSelectedState<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">forceRender</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n  \n  // 组件第一次渲染后 执行订阅store的逻辑\n  useEffect(() => </span><span class=\"token punctuation\">{</span>\n  \n    <span class=\"token comment\">// 🚀重点，去订阅redux store的变化</span>\n    <span class=\"token comment\">// 在用户调用了dispatch后，执行checkForUpdates</span>\n    <span class=\"token keyword\">const</span> unsubscribe <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>checkForUpdates<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">// 组件被销毁后 需要调用unsubscribe停止订阅</span>\n    <span class=\"token keyword\">return</span> unsubscribe<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token plain-text\">, []);\n  \n  return selectedState;\n}</span></code></pre></div>\n<h2 id=\"总结\"><a href=\"#%E6%80%BB%E7%BB%93\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>总结</h2>\n<p>本文涉及到的源码地址：<br>\n<a href=\"https://github.com/sl1673495/tiny-react-redux\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/sl1673495/tiny-react-redux</a>  </p>\n<p>原版的react-redux的实现肯定比这里的简化版要复杂的多，它要考虑class组件的使用，以及更多的优化以及边界情况。  </p>\n<p>从简化版的实现入手，我们可以更清晰的得到整个流程脉络，如果你想进一步的学习源码，也可以考虑多花点时间去看官方源码并且单步调试。  </p>","timeToRead":9,"frontmatter":{"title":"React-Redux 100行代码简易版探究原理","date":"January 14, 2020","spoiler":""},"fields":{"slug":"/549412665/","langKey":"en"}}},"pageContext":{"slug":"/549412665/","previous":{"fields":{"slug":"/546349944/","langKey":"en","directoryName":"546349944"},"frontmatter":{"title":"Koa的洋葱中间件，Redux的中间件，Axios的拦截器让你迷惑吗？实现一个精简版的就彻底搞懂了。"}},"next":{"fields":{"slug":"/549412377/","langKey":"en","directoryName":"549412377"},"frontmatter":{"title":"TypeScript进阶实现智能类型推导的简化版Vuex"}},"translations":[],"translatedLinks":[]}},"staticQueryHashes":["336482444"]}